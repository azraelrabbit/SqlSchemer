//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from grammars/MySQLLexer.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

 
 
using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class MySQLLexer : Lexer {
	public const int
		SELECT=1, FROM=2, WHERE=3, AND=4, OR=5, XOR=6, IS=7, NULL=8, LIKE=9, IN=10, 
		EXISTS=11, ALL=12, ANY=13, TRUE=14, FALSE=15, DIVIDE=16, MOD=17, BETWEEN=18, 
		REGEXP=19, PLUS=20, MINUS=21, NEGATION=22, VERTBAR=23, BITAND=24, POWER_OP=25, 
		BINARY=26, SHIFT_LEFT=27, SHIFT_RIGHT=28, ESCAPE=29, ASTERISK=30, RPAREN=31, 
		LPAREN=32, RBRACK=33, LBRACK=34, COLON=35, ALL_FIELDS=36, EQ=37, LTH=38, 
		GTH=39, NOT_EQ=40, NOT=41, LET=42, GET=43, SEMI=44, COMMA=45, DOT=46, 
		COLLATE=47, INNER=48, OUTER=49, JOIN=50, CROSS=51, USING=52, INDEX=53, 
		KEY=54, ORDER=55, GROUP=56, BY=57, FOR=58, USE=59, IGNORE=60, PARTITION=61, 
		STRAIGHT_JOIN=62, NATURAL=63, LEFT=64, RIGHT=65, OJ=66, ON=67, ID=68, 
		INT=69, NEWLINE=70, WS=71, USER_VAR=72;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"SELECT", "FROM", "WHERE", "AND", "OR", "XOR", "IS", "NULL", "LIKE", "IN", 
		"EXISTS", "ALL", "ANY", "TRUE", "FALSE", "DIVIDE", "MOD", "BETWEEN", "REGEXP", 
		"PLUS", "MINUS", "NEGATION", "VERTBAR", "BITAND", "POWER_OP", "BINARY", 
		"SHIFT_LEFT", "SHIFT_RIGHT", "ESCAPE", "ASTERISK", "RPAREN", "LPAREN", 
		"RBRACK", "LBRACK", "COLON", "ALL_FIELDS", "EQ", "LTH", "GTH", "NOT_EQ", 
		"NOT", "LET", "GET", "SEMI", "COMMA", "DOT", "COLLATE", "INNER", "OUTER", 
		"JOIN", "CROSS", "USING", "INDEX", "KEY", "ORDER", "GROUP", "BY", "FOR", 
		"USE", "IGNORE", "PARTITION", "STRAIGHT_JOIN", "NATURAL", "LEFT", "RIGHT", 
		"OJ", "ON", "ID", "INT", "NEWLINE", "WS", "USER_VAR", "USER_VAR_SUBFIX1", 
		"USER_VAR_SUBFIX2", "USER_VAR_SUBFIX3", "USER_VAR_SUBFIX4"
	};


	public MySQLLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'select'", "'from'", "'where'", null, null, "'xor'", "'is'", "'null'", 
		"'like'", "'in'", "'exists'", "'all'", "'any'", "'true'", "'false'", null, 
		null, "'between'", "'regexp'", "'+'", "'-'", "'~'", "'|'", "'&'", "'^'", 
		"'binary'", "'<<'", "'>>'", "'escape'", "'*'", "')'", "'('", "']'", "'['", 
		"':'", "'.*'", "'='", "'<'", "'>'", "'!='", "'not'", "'<='", "'>='", "';'", 
		"','", "'.'", "'collate'", "'inner'", "'outer'", "'join'", "'cross'", 
		"'using'", "'index'", "'key'", "'order'", "'group'", "'by'", "'for'", 
		"'use'", "'ignore'", "'partition'", "'straight_join'", "'natural'", "'left'", 
		"'right'", "'oj'", "'on'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SELECT", "FROM", "WHERE", "AND", "OR", "XOR", "IS", "NULL", "LIKE", 
		"IN", "EXISTS", "ALL", "ANY", "TRUE", "FALSE", "DIVIDE", "MOD", "BETWEEN", 
		"REGEXP", "PLUS", "MINUS", "NEGATION", "VERTBAR", "BITAND", "POWER_OP", 
		"BINARY", "SHIFT_LEFT", "SHIFT_RIGHT", "ESCAPE", "ASTERISK", "RPAREN", 
		"LPAREN", "RBRACK", "LBRACK", "COLON", "ALL_FIELDS", "EQ", "LTH", "GTH", 
		"NOT_EQ", "NOT", "LET", "GET", "SEMI", "COMMA", "DOT", "COLLATE", "INNER", 
		"OUTER", "JOIN", "CROSS", "USING", "INDEX", "KEY", "ORDER", "GROUP", "BY", 
		"FOR", "USE", "IGNORE", "PARTITION", "STRAIGHT_JOIN", "NATURAL", "LEFT", 
		"RIGHT", "OJ", "ON", "ID", "INT", "NEWLINE", "WS", "USER_VAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MySQLLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2J\x206");
		sb.Append("\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t ");
		sb.Append("\x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t");
		sb.Append("(\x4)\t)\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t");
		sb.Append("\x30\x4\x31\t\x31\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4");
		sb.Append("\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37\x4\x38\t\x38\x4\x39\t\x39");
		sb.Append("\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4@\t@\x4\x41\t\x41");
		sb.Append("\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45\x4\x46");
		sb.Append("\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x3\x2");
		sb.Append("\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5");
		sb.Append("\x3\x5\x3\x5\x5\x5\xB3\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\xB9");
		sb.Append("\n\x6\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t");
		sb.Append("\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f");
		sb.Append("\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3");
		sb.Append("\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10");
		sb.Append("\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\xED\n\x11");
		sb.Append("\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\xF3\n\x12\x3\x13\x3\x13");
		sb.Append("\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3");
		sb.Append("\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16");
		sb.Append("\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3");
		sb.Append("\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C");
		sb.Append("\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3");
		sb.Append("\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3");
		sb.Append("#\x3#\x3$\x3$\x3%\x3%\x3%\x3&\x3&\x3\'\x3\'\x3(\x3(\x3)\x3)");
		sb.Append("\x3)\x3*\x3*\x3*\x3*\x3+\x3+\x3+\x3,\x3,\x3,\x3-\x3-\x3.\x3");
		sb.Append(".\x3/\x3/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3");
		sb.Append("\x30\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x32\x3\x32");
		sb.Append("\x3\x32\x3\x32\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3");
		sb.Append("\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x35\x3\x35");
		sb.Append("\x3\x35\x3\x35\x3\x35\x3\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3");
		sb.Append("\x36\x3\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x38\x3\x38\x3\x38");
		sb.Append("\x3\x38\x3\x38\x3\x38\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3");
		sb.Append("\x39\x3:\x3:\x3:\x3;\x3;\x3;\x3;\x3<\x3<\x3<\x3<\x3=\x3=\x3");
		sb.Append("=\x3=\x3=\x3=\x3=\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3");
		sb.Append("?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3@\x3");
		sb.Append("@\x3@\x3@\x3@\x3@\x3@\x3@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41");
		sb.Append("\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x43\x3\x43\x3");
		sb.Append("\x43\x3\x44\x3\x44\x3\x44\x3\x45\x6\x45\x1CB\n\x45\r\x45\xE");
		sb.Append("\x45\x1CC\x3\x46\x6\x46\x1D0\n\x46\r\x46\xE\x46\x1D1\x3G\x5");
		sb.Append("G\x1D5\nG\x3G\x3G\x3G\x3G\x3H\x6H\x1DC\nH\rH\xEH\x1DD\x3H\x3");
		sb.Append("H\x3I\x3I\x3I\x3I\x3I\x5I\x1E7\nI\x3J\x3J\x6J\x1EB\nJ\rJ\xE");
		sb.Append("J\x1EC\x3J\x3J\x3K\x3K\x6K\x1F3\nK\rK\xEK\x1F4\x3K\x3K\x3L\x3");
		sb.Append("L\x6L\x1FB\nL\rL\xEL\x1FC\x3L\x3L\x3M\x3M\x6M\x203\nM\rM\xE");
		sb.Append("M\x204\x2\x2N\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13\v");
		sb.Append("\x15\f\x17\r\x19\xE\x1B\xF\x1D\x10\x1F\x11!\x12#\x13%\x14\'");
		sb.Append("\x15)\x16+\x17-\x18/\x19\x31\x1A\x33\x1B\x35\x1C\x37\x1D\x39");
		sb.Append("\x1E;\x1F= ?!\x41\"\x43#\x45$G%I&K\'M(O)Q*S+U,W-Y.[/]\x30_\x31");
		sb.Append("\x61\x32\x63\x33\x65\x34g\x35i\x36k\x37m\x38o\x39q:s;u<w=y>");
		sb.Append("{?}@\x7F\x41\x81\x42\x83\x43\x85\x44\x87\x45\x89\x46\x8BG\x8D");
		sb.Append("H\x8FI\x91J\x93\x2\x95\x2\x97\x2\x99\x2\x3\x2\b\x5\x2\x43\\");
		sb.Append("\x61\x61\x63|\x5\x2\v\f\xF\xF\"\"\x3\x2\x62\x62\x3\x2))\x3\x2");
		sb.Append("$$\a\x2&&\x32;\x43\\\x61\x61\x63|\x211\x2\x3\x3\x2\x2\x2\x2");
		sb.Append("\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2");
		sb.Append("\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2");
		sb.Append("\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2");
		sb.Append("\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F");
		sb.Append("\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2");
		sb.Append("\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2");
		sb.Append("\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2");
		sb.Append("\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2");
		sb.Append(";\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2");
		sb.Append("\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2\x2");
		sb.Append("I\x3\x2\x2\x2\x2K\x3\x2\x2\x2\x2M\x3\x2\x2\x2\x2O\x3\x2\x2\x2");
		sb.Append("\x2Q\x3\x2\x2\x2\x2S\x3\x2\x2\x2\x2U\x3\x2\x2\x2\x2W\x3\x2\x2");
		sb.Append("\x2\x2Y\x3\x2\x2\x2\x2[\x3\x2\x2\x2\x2]\x3\x2\x2\x2\x2_\x3\x2");
		sb.Append("\x2\x2\x2\x61\x3\x2\x2\x2\x2\x63\x3\x2\x2\x2\x2\x65\x3\x2\x2");
		sb.Append("\x2\x2g\x3\x2\x2\x2\x2i\x3\x2\x2\x2\x2k\x3\x2\x2\x2\x2m\x3\x2");
		sb.Append("\x2\x2\x2o\x3\x2\x2\x2\x2q\x3\x2\x2\x2\x2s\x3\x2\x2\x2\x2u\x3");
		sb.Append("\x2\x2\x2\x2w\x3\x2\x2\x2\x2y\x3\x2\x2\x2\x2{\x3\x2\x2\x2\x2");
		sb.Append("}\x3\x2\x2\x2\x2\x7F\x3\x2\x2\x2\x2\x81\x3\x2\x2\x2\x2\x83\x3");
		sb.Append("\x2\x2\x2\x2\x85\x3\x2\x2\x2\x2\x87\x3\x2\x2\x2\x2\x89\x3\x2");
		sb.Append("\x2\x2\x2\x8B\x3\x2\x2\x2\x2\x8D\x3\x2\x2\x2\x2\x8F\x3\x2\x2");
		sb.Append("\x2\x2\x91\x3\x2\x2\x2\x3\x9B\x3\x2\x2\x2\x5\xA2\x3\x2\x2\x2");
		sb.Append("\a\xA7\x3\x2\x2\x2\t\xB2\x3\x2\x2\x2\v\xB8\x3\x2\x2\x2\r\xBA");
		sb.Append("\x3\x2\x2\x2\xF\xBE\x3\x2\x2\x2\x11\xC1\x3\x2\x2\x2\x13\xC6");
		sb.Append("\x3\x2\x2\x2\x15\xCB\x3\x2\x2\x2\x17\xCE\x3\x2\x2\x2\x19\xD5");
		sb.Append("\x3\x2\x2\x2\x1B\xD9\x3\x2\x2\x2\x1D\xDD\x3\x2\x2\x2\x1F\xE2");
		sb.Append("\x3\x2\x2\x2!\xEC\x3\x2\x2\x2#\xF2\x3\x2\x2\x2%\xF4\x3\x2\x2");
		sb.Append("\x2\'\xFC\x3\x2\x2\x2)\x103\x3\x2\x2\x2+\x105\x3\x2\x2\x2-\x107");
		sb.Append("\x3\x2\x2\x2/\x109\x3\x2\x2\x2\x31\x10B\x3\x2\x2\x2\x33\x10D");
		sb.Append("\x3\x2\x2\x2\x35\x10F\x3\x2\x2\x2\x37\x116\x3\x2\x2\x2\x39\x119");
		sb.Append("\x3\x2\x2\x2;\x11C\x3\x2\x2\x2=\x123\x3\x2\x2\x2?\x125\x3\x2");
		sb.Append("\x2\x2\x41\x127\x3\x2\x2\x2\x43\x129\x3\x2\x2\x2\x45\x12B\x3");
		sb.Append("\x2\x2\x2G\x12D\x3\x2\x2\x2I\x12F\x3\x2\x2\x2K\x132\x3\x2\x2");
		sb.Append("\x2M\x134\x3\x2\x2\x2O\x136\x3\x2\x2\x2Q\x138\x3\x2\x2\x2S\x13B");
		sb.Append("\x3\x2\x2\x2U\x13F\x3\x2\x2\x2W\x142\x3\x2\x2\x2Y\x145\x3\x2");
		sb.Append("\x2\x2[\x147\x3\x2\x2\x2]\x149\x3\x2\x2\x2_\x14B\x3\x2\x2\x2");
		sb.Append("\x61\x153\x3\x2\x2\x2\x63\x159\x3\x2\x2\x2\x65\x15F\x3\x2\x2");
		sb.Append("\x2g\x164\x3\x2\x2\x2i\x16A\x3\x2\x2\x2k\x170\x3\x2\x2\x2m\x176");
		sb.Append("\x3\x2\x2\x2o\x17A\x3\x2\x2\x2q\x180\x3\x2\x2\x2s\x186\x3\x2");
		sb.Append("\x2\x2u\x189\x3\x2\x2\x2w\x18D\x3\x2\x2\x2y\x191\x3\x2\x2\x2");
		sb.Append("{\x198\x3\x2\x2\x2}\x1A2\x3\x2\x2\x2\x7F\x1B0\x3\x2\x2\x2\x81");
		sb.Append("\x1B8\x3\x2\x2\x2\x83\x1BD\x3\x2\x2\x2\x85\x1C3\x3\x2\x2\x2");
		sb.Append("\x87\x1C6\x3\x2\x2\x2\x89\x1CA\x3\x2\x2\x2\x8B\x1CF\x3\x2\x2");
		sb.Append("\x2\x8D\x1D4\x3\x2\x2\x2\x8F\x1DB\x3\x2\x2\x2\x91\x1E1\x3\x2");
		sb.Append("\x2\x2\x93\x1E8\x3\x2\x2\x2\x95\x1F0\x3\x2\x2\x2\x97\x1F8\x3");
		sb.Append("\x2\x2\x2\x99\x202\x3\x2\x2\x2\x9B\x9C\au\x2\x2\x9C\x9D\ag\x2");
		sb.Append("\x2\x9D\x9E\an\x2\x2\x9E\x9F\ag\x2\x2\x9F\xA0\a\x65\x2\x2\xA0");
		sb.Append("\xA1\av\x2\x2\xA1\x4\x3\x2\x2\x2\xA2\xA3\ah\x2\x2\xA3\xA4\a");
		sb.Append("t\x2\x2\xA4\xA5\aq\x2\x2\xA5\xA6\ao\x2\x2\xA6\x6\x3\x2\x2\x2");
		sb.Append("\xA7\xA8\ay\x2\x2\xA8\xA9\aj\x2\x2\xA9\xAA\ag\x2\x2\xAA\xAB");
		sb.Append("\at\x2\x2\xAB\xAC\ag\x2\x2\xAC\b\x3\x2\x2\x2\xAD\xAE\a\x63\x2");
		sb.Append("\x2\xAE\xAF\ap\x2\x2\xAF\xB3\a\x66\x2\x2\xB0\xB1\a(\x2\x2\xB1");
		sb.Append("\xB3\a(\x2\x2\xB2\xAD\x3\x2\x2\x2\xB2\xB0\x3\x2\x2\x2\xB3\n");
		sb.Append("\x3\x2\x2\x2\xB4\xB5\aq\x2\x2\xB5\xB9\at\x2\x2\xB6\xB7\a~\x2");
		sb.Append("\x2\xB7\xB9\a~\x2\x2\xB8\xB4\x3\x2\x2\x2\xB8\xB6\x3\x2\x2\x2");
		sb.Append("\xB9\f\x3\x2\x2\x2\xBA\xBB\az\x2\x2\xBB\xBC\aq\x2\x2\xBC\xBD");
		sb.Append("\at\x2\x2\xBD\xE\x3\x2\x2\x2\xBE\xBF\ak\x2\x2\xBF\xC0\au\x2");
		sb.Append("\x2\xC0\x10\x3\x2\x2\x2\xC1\xC2\ap\x2\x2\xC2\xC3\aw\x2\x2\xC3");
		sb.Append("\xC4\an\x2\x2\xC4\xC5\an\x2\x2\xC5\x12\x3\x2\x2\x2\xC6\xC7\a");
		sb.Append("n\x2\x2\xC7\xC8\ak\x2\x2\xC8\xC9\am\x2\x2\xC9\xCA\ag\x2\x2\xCA");
		sb.Append("\x14\x3\x2\x2\x2\xCB\xCC\ak\x2\x2\xCC\xCD\ap\x2\x2\xCD\x16\x3");
		sb.Append("\x2\x2\x2\xCE\xCF\ag\x2\x2\xCF\xD0\az\x2\x2\xD0\xD1\ak\x2\x2");
		sb.Append("\xD1\xD2\au\x2\x2\xD2\xD3\av\x2\x2\xD3\xD4\au\x2\x2\xD4\x18");
		sb.Append("\x3\x2\x2\x2\xD5\xD6\a\x63\x2\x2\xD6\xD7\an\x2\x2\xD7\xD8\a");
		sb.Append("n\x2\x2\xD8\x1A\x3\x2\x2\x2\xD9\xDA\a\x63\x2\x2\xDA\xDB\ap\x2");
		sb.Append("\x2\xDB\xDC\a{\x2\x2\xDC\x1C\x3\x2\x2\x2\xDD\xDE\av\x2\x2\xDE");
		sb.Append("\xDF\at\x2\x2\xDF\xE0\aw\x2\x2\xE0\xE1\ag\x2\x2\xE1\x1E\x3\x2");
		sb.Append("\x2\x2\xE2\xE3\ah\x2\x2\xE3\xE4\a\x63\x2\x2\xE4\xE5\an\x2\x2");
		sb.Append("\xE5\xE6\au\x2\x2\xE6\xE7\ag\x2\x2\xE7 \x3\x2\x2\x2\xE8\xE9");
		sb.Append("\a\x66\x2\x2\xE9\xEA\ak\x2\x2\xEA\xED\ax\x2\x2\xEB\xED\a\x31");
		sb.Append("\x2\x2\xEC\xE8\x3\x2\x2\x2\xEC\xEB\x3\x2\x2\x2\xED\"\x3\x2\x2");
		sb.Append("\x2\xEE\xEF\ao\x2\x2\xEF\xF0\aq\x2\x2\xF0\xF3\a\x66\x2\x2\xF1");
		sb.Append("\xF3\a\'\x2\x2\xF2\xEE\x3\x2\x2\x2\xF2\xF1\x3\x2\x2\x2\xF3$");
		sb.Append("\x3\x2\x2\x2\xF4\xF5\a\x64\x2\x2\xF5\xF6\ag\x2\x2\xF6\xF7\a");
		sb.Append("v\x2\x2\xF7\xF8\ay\x2\x2\xF8\xF9\ag\x2\x2\xF9\xFA\ag\x2\x2\xFA");
		sb.Append("\xFB\ap\x2\x2\xFB&\x3\x2\x2\x2\xFC\xFD\at\x2\x2\xFD\xFE\ag\x2");
		sb.Append("\x2\xFE\xFF\ai\x2\x2\xFF\x100\ag\x2\x2\x100\x101\az\x2\x2\x101");
		sb.Append("\x102\ar\x2\x2\x102(\x3\x2\x2\x2\x103\x104\a-\x2\x2\x104*\x3");
		sb.Append("\x2\x2\x2\x105\x106\a/\x2\x2\x106,\x3\x2\x2\x2\x107\x108\a\x80");
		sb.Append("\x2\x2\x108.\x3\x2\x2\x2\x109\x10A\a~\x2\x2\x10A\x30\x3\x2\x2");
		sb.Append("\x2\x10B\x10C\a(\x2\x2\x10C\x32\x3\x2\x2\x2\x10D\x10E\a`\x2");
		sb.Append("\x2\x10E\x34\x3\x2\x2\x2\x10F\x110\a\x64\x2\x2\x110\x111\ak");
		sb.Append("\x2\x2\x111\x112\ap\x2\x2\x112\x113\a\x63\x2\x2\x113\x114\a");
		sb.Append("t\x2\x2\x114\x115\a{\x2\x2\x115\x36\x3\x2\x2\x2\x116\x117\a");
		sb.Append(">\x2\x2\x117\x118\a>\x2\x2\x118\x38\x3\x2\x2\x2\x119\x11A\a");
		sb.Append("@\x2\x2\x11A\x11B\a@\x2\x2\x11B:\x3\x2\x2\x2\x11C\x11D\ag\x2");
		sb.Append("\x2\x11D\x11E\au\x2\x2\x11E\x11F\a\x65\x2\x2\x11F\x120\a\x63");
		sb.Append("\x2\x2\x120\x121\ar\x2\x2\x121\x122\ag\x2\x2\x122<\x3\x2\x2");
		sb.Append("\x2\x123\x124\a,\x2\x2\x124>\x3\x2\x2\x2\x125\x126\a+\x2\x2");
		sb.Append("\x126@\x3\x2\x2\x2\x127\x128\a*\x2\x2\x128\x42\x3\x2\x2\x2\x129");
		sb.Append("\x12A\a_\x2\x2\x12A\x44\x3\x2\x2\x2\x12B\x12C\a]\x2\x2\x12C");
		sb.Append("\x46\x3\x2\x2\x2\x12D\x12E\a<\x2\x2\x12EH\x3\x2\x2\x2\x12F\x130");
		sb.Append("\a\x30\x2\x2\x130\x131\a,\x2\x2\x131J\x3\x2\x2\x2\x132\x133");
		sb.Append("\a?\x2\x2\x133L\x3\x2\x2\x2\x134\x135\a>\x2\x2\x135N\x3\x2\x2");
		sb.Append("\x2\x136\x137\a@\x2\x2\x137P\x3\x2\x2\x2\x138\x139\a#\x2\x2");
		sb.Append("\x139\x13A\a?\x2\x2\x13AR\x3\x2\x2\x2\x13B\x13C\ap\x2\x2\x13C");
		sb.Append("\x13D\aq\x2\x2\x13D\x13E\av\x2\x2\x13ET\x3\x2\x2\x2\x13F\x140");
		sb.Append("\a>\x2\x2\x140\x141\a?\x2\x2\x141V\x3\x2\x2\x2\x142\x143\a@");
		sb.Append("\x2\x2\x143\x144\a?\x2\x2\x144X\x3\x2\x2\x2\x145\x146\a=\x2");
		sb.Append("\x2\x146Z\x3\x2\x2\x2\x147\x148\a.\x2\x2\x148\\\x3\x2\x2\x2");
		sb.Append("\x149\x14A\a\x30\x2\x2\x14A^\x3\x2\x2\x2\x14B\x14C\a\x65\x2");
		sb.Append("\x2\x14C\x14D\aq\x2\x2\x14D\x14E\an\x2\x2\x14E\x14F\an\x2\x2");
		sb.Append("\x14F\x150\a\x63\x2\x2\x150\x151\av\x2\x2\x151\x152\ag\x2\x2");
		sb.Append("\x152`\x3\x2\x2\x2\x153\x154\ak\x2\x2\x154\x155\ap\x2\x2\x155");
		sb.Append("\x156\ap\x2\x2\x156\x157\ag\x2\x2\x157\x158\at\x2\x2\x158\x62");
		sb.Append("\x3\x2\x2\x2\x159\x15A\aq\x2\x2\x15A\x15B\aw\x2\x2\x15B\x15C");
		sb.Append("\av\x2\x2\x15C\x15D\ag\x2\x2\x15D\x15E\at\x2\x2\x15E\x64\x3");
		sb.Append("\x2\x2\x2\x15F\x160\al\x2\x2\x160\x161\aq\x2\x2\x161\x162\a");
		sb.Append("k\x2\x2\x162\x163\ap\x2\x2\x163\x66\x3\x2\x2\x2\x164\x165\a");
		sb.Append("\x65\x2\x2\x165\x166\at\x2\x2\x166\x167\aq\x2\x2\x167\x168\a");
		sb.Append("u\x2\x2\x168\x169\au\x2\x2\x169h\x3\x2\x2\x2\x16A\x16B\aw\x2");
		sb.Append("\x2\x16B\x16C\au\x2\x2\x16C\x16D\ak\x2\x2\x16D\x16E\ap\x2\x2");
		sb.Append("\x16E\x16F\ai\x2\x2\x16Fj\x3\x2\x2\x2\x170\x171\ak\x2\x2\x171");
		sb.Append("\x172\ap\x2\x2\x172\x173\a\x66\x2\x2\x173\x174\ag\x2\x2\x174");
		sb.Append("\x175\az\x2\x2\x175l\x3\x2\x2\x2\x176\x177\am\x2\x2\x177\x178");
		sb.Append("\ag\x2\x2\x178\x179\a{\x2\x2\x179n\x3\x2\x2\x2\x17A\x17B\aq");
		sb.Append("\x2\x2\x17B\x17C\at\x2\x2\x17C\x17D\a\x66\x2\x2\x17D\x17E\a");
		sb.Append("g\x2\x2\x17E\x17F\at\x2\x2\x17Fp\x3\x2\x2\x2\x180\x181\ai\x2");
		sb.Append("\x2\x181\x182\at\x2\x2\x182\x183\aq\x2\x2\x183\x184\aw\x2\x2");
		sb.Append("\x184\x185\ar\x2\x2\x185r\x3\x2\x2\x2\x186\x187\a\x64\x2\x2");
		sb.Append("\x187\x188\a{\x2\x2\x188t\x3\x2\x2\x2\x189\x18A\ah\x2\x2\x18A");
		sb.Append("\x18B\aq\x2\x2\x18B\x18C\at\x2\x2\x18Cv\x3\x2\x2\x2\x18D\x18E");
		sb.Append("\aw\x2\x2\x18E\x18F\au\x2\x2\x18F\x190\ag\x2\x2\x190x\x3\x2");
		sb.Append("\x2\x2\x191\x192\ak\x2\x2\x192\x193\ai\x2\x2\x193\x194\ap\x2");
		sb.Append("\x2\x194\x195\aq\x2\x2\x195\x196\at\x2\x2\x196\x197\ag\x2\x2");
		sb.Append("\x197z\x3\x2\x2\x2\x198\x199\ar\x2\x2\x199\x19A\a\x63\x2\x2");
		sb.Append("\x19A\x19B\at\x2\x2\x19B\x19C\av\x2\x2\x19C\x19D\ak\x2\x2\x19D");
		sb.Append("\x19E\av\x2\x2\x19E\x19F\ak\x2\x2\x19F\x1A0\aq\x2\x2\x1A0\x1A1");
		sb.Append("\ap\x2\x2\x1A1|\x3\x2\x2\x2\x1A2\x1A3\au\x2\x2\x1A3\x1A4\av");
		sb.Append("\x2\x2\x1A4\x1A5\at\x2\x2\x1A5\x1A6\a\x63\x2\x2\x1A6\x1A7\a");
		sb.Append("k\x2\x2\x1A7\x1A8\ai\x2\x2\x1A8\x1A9\aj\x2\x2\x1A9\x1AA\av\x2");
		sb.Append("\x2\x1AA\x1AB\a\x61\x2\x2\x1AB\x1AC\al\x2\x2\x1AC\x1AD\aq\x2");
		sb.Append("\x2\x1AD\x1AE\ak\x2\x2\x1AE\x1AF\ap\x2\x2\x1AF~\x3\x2\x2\x2");
		sb.Append("\x1B0\x1B1\ap\x2\x2\x1B1\x1B2\a\x63\x2\x2\x1B2\x1B3\av\x2\x2");
		sb.Append("\x1B3\x1B4\aw\x2\x2\x1B4\x1B5\at\x2\x2\x1B5\x1B6\a\x63\x2\x2");
		sb.Append("\x1B6\x1B7\an\x2\x2\x1B7\x80\x3\x2\x2\x2\x1B8\x1B9\an\x2\x2");
		sb.Append("\x1B9\x1BA\ag\x2\x2\x1BA\x1BB\ah\x2\x2\x1BB\x1BC\av\x2\x2\x1BC");
		sb.Append("\x82\x3\x2\x2\x2\x1BD\x1BE\at\x2\x2\x1BE\x1BF\ak\x2\x2\x1BF");
		sb.Append("\x1C0\ai\x2\x2\x1C0\x1C1\aj\x2\x2\x1C1\x1C2\av\x2\x2\x1C2\x84");
		sb.Append("\x3\x2\x2\x2\x1C3\x1C4\aq\x2\x2\x1C4\x1C5\al\x2\x2\x1C5\x86");
		sb.Append("\x3\x2\x2\x2\x1C6\x1C7\aq\x2\x2\x1C7\x1C8\ap\x2\x2\x1C8\x88");
		sb.Append("\x3\x2\x2\x2\x1C9\x1CB\t\x2\x2\x2\x1CA\x1C9\x3\x2\x2\x2\x1CB");
		sb.Append("\x1CC\x3\x2\x2\x2\x1CC\x1CA\x3\x2\x2\x2\x1CC\x1CD\x3\x2\x2\x2");
		sb.Append("\x1CD\x8A\x3\x2\x2\x2\x1CE\x1D0\x4\x32;\x2\x1CF\x1CE\x3\x2\x2");
		sb.Append("\x2\x1D0\x1D1\x3\x2\x2\x2\x1D1\x1CF\x3\x2\x2\x2\x1D1\x1D2\x3");
		sb.Append("\x2\x2\x2\x1D2\x8C\x3\x2\x2\x2\x1D3\x1D5\a\xF\x2\x2\x1D4\x1D3");
		sb.Append("\x3\x2\x2\x2\x1D4\x1D5\x3\x2\x2\x2\x1D5\x1D6\x3\x2\x2\x2\x1D6");
		sb.Append("\x1D7\a\f\x2\x2\x1D7\x1D8\x3\x2\x2\x2\x1D8\x1D9\bG\x2\x2\x1D9");
		sb.Append("\x8E\x3\x2\x2\x2\x1DA\x1DC\t\x3\x2\x2\x1DB\x1DA\x3\x2\x2\x2");
		sb.Append("\x1DC\x1DD\x3\x2\x2\x2\x1DD\x1DB\x3\x2\x2\x2\x1DD\x1DE\x3\x2");
		sb.Append("\x2\x2\x1DE\x1DF\x3\x2\x2\x2\x1DF\x1E0\bH\x2\x2\x1E0\x90\x3");
		sb.Append("\x2\x2\x2\x1E1\x1E6\a\x42\x2\x2\x1E2\x1E7\x5\x93J\x2\x1E3\x1E7");
		sb.Append("\x5\x95K\x2\x1E4\x1E7\x5\x97L\x2\x1E5\x1E7\x5\x99M\x2\x1E6\x1E2");
		sb.Append("\x3\x2\x2\x2\x1E6\x1E3\x3\x2\x2\x2\x1E6\x1E4\x3\x2\x2\x2\x1E6");
		sb.Append("\x1E5\x3\x2\x2\x2\x1E7\x92\x3\x2\x2\x2\x1E8\x1EA\a\x62\x2\x2");
		sb.Append("\x1E9\x1EB\n\x4\x2\x2\x1EA\x1E9\x3\x2\x2\x2\x1EB\x1EC\x3\x2");
		sb.Append("\x2\x2\x1EC\x1EA\x3\x2\x2\x2\x1EC\x1ED\x3\x2\x2\x2\x1ED\x1EE");
		sb.Append("\x3\x2\x2\x2\x1EE\x1EF\a\x62\x2\x2\x1EF\x94\x3\x2\x2\x2\x1F0");
		sb.Append("\x1F2\a)\x2\x2\x1F1\x1F3\n\x5\x2\x2\x1F2\x1F1\x3\x2\x2\x2\x1F3");
		sb.Append("\x1F4\x3\x2\x2\x2\x1F4\x1F2\x3\x2\x2\x2\x1F4\x1F5\x3\x2\x2\x2");
		sb.Append("\x1F5\x1F6\x3\x2\x2\x2\x1F6\x1F7\a)\x2\x2\x1F7\x96\x3\x2\x2");
		sb.Append("\x2\x1F8\x1FA\a$\x2\x2\x1F9\x1FB\n\x6\x2\x2\x1FA\x1F9\x3\x2");
		sb.Append("\x2\x2\x1FB\x1FC\x3\x2\x2\x2\x1FC\x1FA\x3\x2\x2\x2\x1FC\x1FD");
		sb.Append("\x3\x2\x2\x2\x1FD\x1FE\x3\x2\x2\x2\x1FE\x1FF\a$\x2\x2\x1FF\x98");
		sb.Append("\x3\x2\x2\x2\x200\x203\t\a\x2\x2\x201\x203\x5]/\x2\x202\x200");
		sb.Append("\x3\x2\x2\x2\x202\x201\x3\x2\x2\x2\x203\x204\x3\x2\x2\x2\x204");
		sb.Append("\x202\x3\x2\x2\x2\x204\x205\x3\x2\x2\x2\x205\x9A\x3\x2\x2\x2");
		sb.Append("\x11\x2\xB2\xB8\xEC\xF2\x1CC\x1D1\x1D4\x1DD\x1E6\x1EC\x1F4\x1FC");
		sb.Append("\x202\x204\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
