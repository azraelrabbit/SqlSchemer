//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from grammars/MySQLParser.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class MySQLParser : Parser {
	public const int
		SELECT=1, FROM=2, WHERE=3, AND=4, OR=5, XOR=6, IS=7, NULL=8, LIKE=9, IN=10, 
		EXISTS=11, ALL=12, ANY=13, TRUE=14, FALSE=15, DIVIDE=16, MOD=17, BETWEEN=18, 
		REGEXP=19, PLUS=20, MINUS=21, NEGATION=22, VERTBAR=23, BITAND=24, POWER_OP=25, 
		BINARY=26, SHIFT_LEFT=27, SHIFT_RIGHT=28, ESCAPE=29, ASTERISK=30, RPAREN=31, 
		LPAREN=32, RBRACK=33, LBRACK=34, COLON=35, ALL_FIELDS=36, EQ=37, LTH=38, 
		GTH=39, NOT_EQ=40, NOT=41, LET=42, GET=43, SEMI=44, COMMA=45, DOT=46, 
		COLLATE=47, INNER=48, OUTER=49, JOIN=50, CROSS=51, USING=52, INDEX=53, 
		KEY=54, ORDER=55, GROUP=56, BY=57, FOR=58, USE=59, IGNORE=60, PARTITION=61, 
		STRAIGHT_JOIN=62, NATURAL=63, LEFT=64, RIGHT=65, OJ=66, ON=67, ID=68, 
		INT=69, NEWLINE=70, WS=71, USER_VAR=72;
	public const int
		RULE_stat = 0, RULE_schema_name = 1, RULE_select_clause = 2, RULE_table_name = 3, 
		RULE_table_alias = 4, RULE_column_name = 5, RULE_column_name_alias = 6, 
		RULE_index_name = 7, RULE_column_list = 8, RULE_column_list_clause = 9, 
		RULE_from_clause = 10, RULE_select_key = 11, RULE_where_clause = 12, RULE_expression = 13, 
		RULE_element = 14, RULE_right_element = 15, RULE_left_element = 16, RULE_target_element = 17, 
		RULE_relational_op = 18, RULE_expr_op = 19, RULE_between_op = 20, RULE_is_or_is_not = 21, 
		RULE_simple_expression = 22, RULE_table_references = 23, RULE_table_reference = 24, 
		RULE_table_factor1 = 25, RULE_table_factor2 = 26, RULE_table_factor3 = 27, 
		RULE_table_factor4 = 28, RULE_table_atom = 29, RULE_join_clause = 30, 
		RULE_join_condition = 31, RULE_index_hint_list = 32, RULE_index_options = 33, 
		RULE_index_hint = 34, RULE_index_list = 35, RULE_partition_clause = 36, 
		RULE_partition_names = 37, RULE_partition_name = 38, RULE_subquery_alias = 39, 
		RULE_subquery = 40;
	public static readonly string[] ruleNames = {
		"stat", "schema_name", "select_clause", "table_name", "table_alias", "column_name", 
		"column_name_alias", "index_name", "column_list", "column_list_clause", 
		"from_clause", "select_key", "where_clause", "expression", "element", 
		"right_element", "left_element", "target_element", "relational_op", "expr_op", 
		"between_op", "is_or_is_not", "simple_expression", "table_references", 
		"table_reference", "table_factor1", "table_factor2", "table_factor3", 
		"table_factor4", "table_atom", "join_clause", "join_condition", "index_hint_list", 
		"index_options", "index_hint", "index_list", "partition_clause", "partition_names", 
		"partition_name", "subquery_alias", "subquery"
	};

	private static readonly string[] _LiteralNames = {
		null, "'select'", "'from'", "'where'", null, null, "'xor'", "'is'", "'null'", 
		"'like'", "'in'", "'exists'", "'all'", "'any'", "'true'", "'false'", null, 
		null, "'between'", "'regexp'", "'+'", "'-'", "'~'", "'|'", "'&'", "'^'", 
		"'binary'", "'<<'", "'>>'", "'escape'", "'*'", "')'", "'('", "']'", "'['", 
		"':'", "'.*'", "'='", "'<'", "'>'", "'!='", "'not'", "'<='", "'>='", "';'", 
		"','", "'.'", "'collate'", "'inner'", "'outer'", "'join'", "'cross'", 
		"'using'", "'index'", "'key'", "'order'", "'group'", "'by'", "'for'", 
		"'use'", "'ignore'", "'partition'", "'straight_join'", "'natural'", "'left'", 
		"'right'", "'oj'", "'on'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SELECT", "FROM", "WHERE", "AND", "OR", "XOR", "IS", "NULL", "LIKE", 
		"IN", "EXISTS", "ALL", "ANY", "TRUE", "FALSE", "DIVIDE", "MOD", "BETWEEN", 
		"REGEXP", "PLUS", "MINUS", "NEGATION", "VERTBAR", "BITAND", "POWER_OP", 
		"BINARY", "SHIFT_LEFT", "SHIFT_RIGHT", "ESCAPE", "ASTERISK", "RPAREN", 
		"LPAREN", "RBRACK", "LBRACK", "COLON", "ALL_FIELDS", "EQ", "LTH", "GTH", 
		"NOT_EQ", "NOT", "LET", "GET", "SEMI", "COMMA", "DOT", "COLLATE", "INNER", 
		"OUTER", "JOIN", "CROSS", "USING", "INDEX", "KEY", "ORDER", "GROUP", "BY", 
		"FOR", "USE", "IGNORE", "PARTITION", "STRAIGHT_JOIN", "NATURAL", "LEFT", 
		"RIGHT", "OJ", "ON", "ID", "INT", "NEWLINE", "WS", "USER_VAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MySQLParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MySQLParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class StatContext : ParserRuleContext {
		public Select_clauseContext[] select_clause() {
			return GetRuleContexts<Select_clauseContext>();
		}
		public Select_clauseContext select_clause(int i) {
			return GetRuleContext<Select_clauseContext>(i);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 0, RULE_stat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 82; select_clause();
				}
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==SELECT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Schema_nameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MySQLParser.ID, 0); }
		public Schema_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSchema_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSchema_name(this);
		}
	}

	[RuleVersion(0)]
	public Schema_nameContext schema_name() {
		Schema_nameContext _localctx = new Schema_nameContext(Context, State);
		EnterRule(_localctx, 2, RULE_schema_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_clauseContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(MySQLParser.SELECT, 0); }
		public Column_list_clauseContext column_list_clause() {
			return GetRuleContext<Column_list_clauseContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(MySQLParser.FROM, 0); }
		public Table_referencesContext table_references() {
			return GetRuleContext<Table_referencesContext>(0);
		}
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Select_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_clause(this);
		}
	}

	[RuleVersion(0)]
	public Select_clauseContext select_clause() {
		Select_clauseContext _localctx = new Select_clauseContext(Context, State);
		EnterRule(_localctx, 4, RULE_select_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; Match(SELECT);
			State = 90; column_list_clause();
			State = 93;
			_la = TokenStream.La(1);
			if (_la==FROM) {
				{
				State = 91; Match(FROM);
				State = 92; table_references();
				}
			}

			State = 96;
			_la = TokenStream.La(1);
			if (_la==WHERE) {
				{
				State = 95; where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MySQLParser.ID, 0); }
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTable_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTable_name(this);
		}
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(Context, State);
		EnterRule(_localctx, 6, RULE_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MySQLParser.ID, 0); }
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTable_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTable_alias(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(Context, State);
		EnterRule(_localctx, 8, RULE_table_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_nameContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(MySQLParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(MySQLParser.ID, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(MySQLParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(MySQLParser.DOT, i);
		}
		public Column_name_aliasContext column_name_alias() {
			return GetRuleContext<Column_name_aliasContext>(0);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public ITerminalNode USER_VAR() { return GetToken(MySQLParser.USER_VAR, 0); }
		public Column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterColumn_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitColumn_name(this);
		}
	}

	[RuleVersion(0)]
	public Column_nameContext column_name() {
		Column_nameContext _localctx = new Column_nameContext(Context, State);
		EnterRule(_localctx, 10, RULE_column_name);
		int _la;
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 109;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 105;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						State = 102; schema_name();
						State = 103; Match(DOT);
						}
						break;
					}
					State = 107; Match(ID);
					State = 108; Match(DOT);
					}
					break;
				}
				State = 111; Match(ID);
				State = 113;
				_la = TokenStream.La(1);
				if (_la==ID) {
					{
					State = 112; column_name_alias();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 118;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 115; table_alias();
					State = 116; Match(DOT);
					}
					break;
				}
				State = 120; Match(ID);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 121; Match(USER_VAR);
				State = 123;
				_la = TokenStream.La(1);
				if (_la==ID) {
					{
					State = 122; column_name_alias();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_aliasContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MySQLParser.ID, 0); }
		public Column_name_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterColumn_name_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitColumn_name_alias(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_aliasContext column_name_alias() {
		Column_name_aliasContext _localctx = new Column_name_aliasContext(Context, State);
		EnterRule(_localctx, 12, RULE_column_name_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_nameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MySQLParser.ID, 0); }
		public Index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndex_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndex_name(this);
		}
	}

	[RuleVersion(0)]
	public Index_nameContext index_name() {
		Index_nameContext _localctx = new Index_nameContext(Context, State);
		EnterRule(_localctx, 14, RULE_index_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_listContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(MySQLParser.LPAREN, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(MySQLParser.RPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(MySQLParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MySQLParser.COMMA, i);
		}
		public Column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterColumn_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitColumn_list(this);
		}
	}

	[RuleVersion(0)]
	public Column_listContext column_list() {
		Column_listContext _localctx = new Column_listContext(Context, State);
		EnterRule(_localctx, 16, RULE_column_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; Match(LPAREN);
			State = 132; column_name();
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 133; Match(COMMA);
				State = 134; column_name();
				}
				}
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 140; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_list_clauseContext : ParserRuleContext {
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MySQLParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MySQLParser.COMMA, i);
		}
		public Column_list_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_list_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterColumn_list_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitColumn_list_clause(this);
		}
	}

	[RuleVersion(0)]
	public Column_list_clauseContext column_list_clause() {
		Column_list_clauseContext _localctx = new Column_list_clauseContext(Context, State);
		EnterRule(_localctx, 18, RULE_column_list_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; column_name();
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 143; Match(COMMA);
				State = 144; column_name();
				}
				}
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clauseContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(MySQLParser.FROM, 0); }
		public Table_nameContext[] table_name() {
			return GetRuleContexts<Table_nameContext>();
		}
		public Table_nameContext table_name(int i) {
			return GetRuleContext<Table_nameContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MySQLParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MySQLParser.COMMA, i);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterFrom_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitFrom_clause(this);
		}
	}

	[RuleVersion(0)]
	public From_clauseContext from_clause() {
		From_clauseContext _localctx = new From_clauseContext(Context, State);
		EnterRule(_localctx, 20, RULE_from_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; Match(FROM);
			State = 151; table_name();
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 152; Match(COMMA);
				State = 153; table_name();
				}
				}
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_keyContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(MySQLParser.SELECT, 0); }
		public Select_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_key(this);
		}
	}

	[RuleVersion(0)]
	public Select_keyContext select_key() {
		Select_keyContext _localctx = new Select_keyContext(Context, State);
		EnterRule(_localctx, 22, RULE_select_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159; Match(SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(MySQLParser.WHERE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterWhere_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitWhere_clause(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(Context, State);
		EnterRule(_localctx, 24, RULE_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; Match(WHERE);
			State = 162; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Simple_expressionContext[] simple_expression() {
			return GetRuleContexts<Simple_expressionContext>();
		}
		public Simple_expressionContext simple_expression(int i) {
			return GetRuleContext<Simple_expressionContext>(i);
		}
		public Expr_opContext[] expr_op() {
			return GetRuleContexts<Expr_opContext>();
		}
		public Expr_opContext expr_op(int i) {
			return GetRuleContext<Expr_opContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; simple_expression();
			State = 170;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 165; expr_op();
					State = 166; simple_expression();
					}
					} 
				}
				State = 172;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public ITerminalNode USER_VAR() { return GetToken(MySQLParser.USER_VAR, 0); }
		public ITerminalNode ID() { return GetToken(MySQLParser.ID, 0); }
		public ITerminalNode INT() { return GetToken(MySQLParser.INT, 0); }
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 28, RULE_element);
		try {
			State = 180;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 173; Match(USER_VAR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 174; Match(ID);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 175; Match(VERTBAR);
				State = 176; Match(ID);
				State = 177; Match(VERTBAR);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 178; Match(INT);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 179; column_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_elementContext : ParserRuleContext {
		public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		public Right_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRight_element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRight_element(this);
		}
	}

	[RuleVersion(0)]
	public Right_elementContext right_element() {
		Right_elementContext _localctx = new Right_elementContext(Context, State);
		EnterRule(_localctx, 30, RULE_right_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; element();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Left_elementContext : ParserRuleContext {
		public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		public Left_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_left_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterLeft_element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitLeft_element(this);
		}
	}

	[RuleVersion(0)]
	public Left_elementContext left_element() {
		Left_elementContext _localctx = new Left_elementContext(Context, State);
		EnterRule(_localctx, 32, RULE_left_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; element();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target_elementContext : ParserRuleContext {
		public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		public Target_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTarget_element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTarget_element(this);
		}
	}

	[RuleVersion(0)]
	public Target_elementContext target_element() {
		Target_elementContext _localctx = new Target_elementContext(Context, State);
		EnterRule(_localctx, 34, RULE_target_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; element();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_opContext : ParserRuleContext {
		public ITerminalNode EQ() { return GetToken(MySQLParser.EQ, 0); }
		public ITerminalNode LTH() { return GetToken(MySQLParser.LTH, 0); }
		public ITerminalNode GTH() { return GetToken(MySQLParser.GTH, 0); }
		public ITerminalNode NOT_EQ() { return GetToken(MySQLParser.NOT_EQ, 0); }
		public ITerminalNode LET() { return GetToken(MySQLParser.LET, 0); }
		public ITerminalNode GET() { return GetToken(MySQLParser.GET, 0); }
		public Relational_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterRelational_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitRelational_op(this);
		}
	}

	[RuleVersion(0)]
	public Relational_opContext relational_op() {
		Relational_opContext _localctx = new Relational_opContext(Context, State);
		EnterRule(_localctx, 36, RULE_relational_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << LTH) | (1L << GTH) | (1L << NOT_EQ) | (1L << LET) | (1L << GET))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_opContext : ParserRuleContext {
		public ITerminalNode AND() { return GetToken(MySQLParser.AND, 0); }
		public ITerminalNode XOR() { return GetToken(MySQLParser.XOR, 0); }
		public ITerminalNode OR() { return GetToken(MySQLParser.OR, 0); }
		public ITerminalNode NOT() { return GetToken(MySQLParser.NOT, 0); }
		public Expr_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterExpr_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitExpr_op(this);
		}
	}

	[RuleVersion(0)]
	public Expr_opContext expr_op() {
		Expr_opContext _localctx = new Expr_opContext(Context, State);
		EnterRule(_localctx, 38, RULE_expr_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << OR) | (1L << XOR) | (1L << NOT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Between_opContext : ParserRuleContext {
		public ITerminalNode BETWEEN() { return GetToken(MySQLParser.BETWEEN, 0); }
		public Between_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_between_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterBetween_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitBetween_op(this);
		}
	}

	[RuleVersion(0)]
	public Between_opContext between_op() {
		Between_opContext _localctx = new Between_opContext(Context, State);
		EnterRule(_localctx, 40, RULE_between_op);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; Match(BETWEEN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Is_or_is_notContext : ParserRuleContext {
		public ITerminalNode IS() { return GetToken(MySQLParser.IS, 0); }
		public ITerminalNode NOT() { return GetToken(MySQLParser.NOT, 0); }
		public Is_or_is_notContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_is_or_is_not; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIs_or_is_not(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIs_or_is_not(this);
		}
	}

	[RuleVersion(0)]
	public Is_or_is_notContext is_or_is_not() {
		Is_or_is_notContext _localctx = new Is_or_is_notContext(Context, State);
		EnterRule(_localctx, 42, RULE_is_or_is_not);
		try {
			State = 197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 194; Match(IS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 195; Match(IS);
				State = 196; Match(NOT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_expressionContext : ParserRuleContext {
		public Left_elementContext left_element() {
			return GetRuleContext<Left_elementContext>(0);
		}
		public Relational_opContext relational_op() {
			return GetRuleContext<Relational_opContext>(0);
		}
		public Right_elementContext right_element() {
			return GetRuleContext<Right_elementContext>(0);
		}
		public Target_elementContext target_element() {
			return GetRuleContext<Target_elementContext>(0);
		}
		public Between_opContext between_op() {
			return GetRuleContext<Between_opContext>(0);
		}
		public ITerminalNode AND() { return GetToken(MySQLParser.AND, 0); }
		public Is_or_is_notContext is_or_is_not() {
			return GetRuleContext<Is_or_is_notContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(MySQLParser.NULL, 0); }
		public Simple_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSimple_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSimple_expression(this);
		}
	}

	[RuleVersion(0)]
	public Simple_expressionContext simple_expression() {
		Simple_expressionContext _localctx = new Simple_expressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_simple_expression);
		try {
			State = 213;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 199; left_element();
				State = 200; relational_op();
				State = 201; right_element();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 203; target_element();
				State = 204; between_op();
				State = 205; left_element();
				State = 206; Match(AND);
				State = 207; right_element();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 209; target_element();
				State = 210; is_or_is_not();
				State = 211; Match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_referencesContext : ParserRuleContext {
		public Table_referenceContext[] table_reference() {
			return GetRuleContexts<Table_referenceContext>();
		}
		public Table_referenceContext table_reference(int i) {
			return GetRuleContext<Table_referenceContext>(i);
		}
		public Join_clauseContext[] join_clause() {
			return GetRuleContexts<Join_clauseContext>();
		}
		public Join_clauseContext join_clause(int i) {
			return GetRuleContext<Join_clauseContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MySQLParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MySQLParser.COMMA, i);
		}
		public Table_referencesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_references; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTable_references(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTable_references(this);
		}
	}

	[RuleVersion(0)]
	public Table_referencesContext table_references() {
		Table_referencesContext _localctx = new Table_referencesContext(Context, State);
		EnterRule(_localctx, 46, RULE_table_references);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; table_reference();
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 45)) & ~0x3f) == 0 && ((1L << (_la - 45)) & ((1L << (COMMA - 45)) | (1L << (INNER - 45)) | (1L << (JOIN - 45)) | (1L << (CROSS - 45)) | (1L << (STRAIGHT_JOIN - 45)) | (1L << (NATURAL - 45)) | (1L << (LEFT - 45)) | (1L << (RIGHT - 45)))) != 0)) {
				{
				State = 219;
				switch (TokenStream.La(1)) {
				case COMMA:
					{
					{
					State = 216; Match(COMMA);
					State = 217; table_reference();
					}
					}
					break;
				case INNER:
				case JOIN:
				case CROSS:
				case STRAIGHT_JOIN:
				case NATURAL:
				case LEFT:
				case RIGHT:
					{
					State = 218; join_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_referenceContext : ParserRuleContext {
		public Table_factor1Context table_factor1() {
			return GetRuleContext<Table_factor1Context>(0);
		}
		public Table_atomContext table_atom() {
			return GetRuleContext<Table_atomContext>(0);
		}
		public Table_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_reference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTable_reference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTable_reference(this);
		}
	}

	[RuleVersion(0)]
	public Table_referenceContext table_reference() {
		Table_referenceContext _localctx = new Table_referenceContext(Context, State);
		EnterRule(_localctx, 48, RULE_table_reference);
		try {
			State = 226;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 224; table_factor1();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 225; table_atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_factor1Context : ParserRuleContext {
		public Table_factor2Context table_factor2() {
			return GetRuleContext<Table_factor2Context>(0);
		}
		public ITerminalNode JOIN() { return GetToken(MySQLParser.JOIN, 0); }
		public Table_atomContext table_atom() {
			return GetRuleContext<Table_atomContext>(0);
		}
		public Join_conditionContext join_condition() {
			return GetRuleContext<Join_conditionContext>(0);
		}
		public ITerminalNode INNER() { return GetToken(MySQLParser.INNER, 0); }
		public ITerminalNode CROSS() { return GetToken(MySQLParser.CROSS, 0); }
		public Table_factor1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_factor1; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTable_factor1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTable_factor1(this);
		}
	}

	[RuleVersion(0)]
	public Table_factor1Context table_factor1() {
		Table_factor1Context _localctx = new Table_factor1Context(Context, State);
		EnterRule(_localctx, 50, RULE_table_factor1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228; table_factor2();
			State = 237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 230;
				_la = TokenStream.La(1);
				if (_la==INNER || _la==CROSS) {
					{
					State = 229;
					_la = TokenStream.La(1);
					if ( !(_la==INNER || _la==CROSS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
				}

				State = 232; Match(JOIN);
				State = 233; table_atom();
				State = 235;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 234; join_condition();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_factor2Context : ParserRuleContext {
		public Table_factor3Context table_factor3() {
			return GetRuleContext<Table_factor3Context>(0);
		}
		public ITerminalNode STRAIGHT_JOIN() { return GetToken(MySQLParser.STRAIGHT_JOIN, 0); }
		public Table_atomContext table_atom() {
			return GetRuleContext<Table_atomContext>(0);
		}
		public ITerminalNode ON() { return GetToken(MySQLParser.ON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Table_factor2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_factor2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTable_factor2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTable_factor2(this);
		}
	}

	[RuleVersion(0)]
	public Table_factor2Context table_factor2() {
		Table_factor2Context _localctx = new Table_factor2Context(Context, State);
		EnterRule(_localctx, 52, RULE_table_factor2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239; table_factor3();
			State = 246;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 240; Match(STRAIGHT_JOIN);
				State = 241; table_atom();
				State = 244;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 242; Match(ON);
					State = 243; expression();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_factor3Context : ParserRuleContext {
		public Table_factor4Context[] table_factor4() {
			return GetRuleContexts<Table_factor4Context>();
		}
		public Table_factor4Context table_factor4(int i) {
			return GetRuleContext<Table_factor4Context>(i);
		}
		public ITerminalNode JOIN() { return GetToken(MySQLParser.JOIN, 0); }
		public Join_conditionContext join_condition() {
			return GetRuleContext<Join_conditionContext>(0);
		}
		public ITerminalNode LEFT() { return GetToken(MySQLParser.LEFT, 0); }
		public ITerminalNode RIGHT() { return GetToken(MySQLParser.RIGHT, 0); }
		public ITerminalNode OUTER() { return GetToken(MySQLParser.OUTER, 0); }
		public Table_factor3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_factor3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTable_factor3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTable_factor3(this);
		}
	}

	[RuleVersion(0)]
	public Table_factor3Context table_factor3() {
		Table_factor3Context _localctx = new Table_factor3Context(Context, State);
		EnterRule(_localctx, 54, RULE_table_factor3);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; table_factor4();
			State = 257;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 249;
				_la = TokenStream.La(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 251;
				_la = TokenStream.La(1);
				if (_la==OUTER) {
					{
					State = 250; Match(OUTER);
					}
				}

				State = 253; Match(JOIN);
				State = 254; table_factor4();
				State = 255; join_condition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_factor4Context : ParserRuleContext {
		public Table_atomContext[] table_atom() {
			return GetRuleContexts<Table_atomContext>();
		}
		public Table_atomContext table_atom(int i) {
			return GetRuleContext<Table_atomContext>(i);
		}
		public ITerminalNode NATURAL() { return GetToken(MySQLParser.NATURAL, 0); }
		public ITerminalNode JOIN() { return GetToken(MySQLParser.JOIN, 0); }
		public ITerminalNode LEFT() { return GetToken(MySQLParser.LEFT, 0); }
		public ITerminalNode RIGHT() { return GetToken(MySQLParser.RIGHT, 0); }
		public ITerminalNode OUTER() { return GetToken(MySQLParser.OUTER, 0); }
		public Table_factor4Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_factor4; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTable_factor4(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTable_factor4(this);
		}
	}

	[RuleVersion(0)]
	public Table_factor4Context table_factor4() {
		Table_factor4Context _localctx = new Table_factor4Context(Context, State);
		EnterRule(_localctx, 56, RULE_table_factor4);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259; table_atom();
			State = 269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 260; Match(NATURAL);
				State = 265;
				_la = TokenStream.La(1);
				if (_la==LEFT || _la==RIGHT) {
					{
					State = 261;
					_la = TokenStream.La(1);
					if ( !(_la==LEFT || _la==RIGHT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					State = 263;
					_la = TokenStream.La(1);
					if (_la==OUTER) {
						{
						State = 262; Match(OUTER);
						}
					}

					}
				}

				State = 267; Match(JOIN);
				State = 268; table_atom();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_atomContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Partition_clauseContext partition_clause() {
			return GetRuleContext<Partition_clauseContext>(0);
		}
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public Index_hint_listContext index_hint_list() {
			return GetRuleContext<Index_hint_listContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Subquery_aliasContext subquery_alias() {
			return GetRuleContext<Subquery_aliasContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(MySQLParser.LPAREN, 0); }
		public Table_referencesContext table_references() {
			return GetRuleContext<Table_referencesContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(MySQLParser.RPAREN, 0); }
		public ITerminalNode OJ() { return GetToken(MySQLParser.OJ, 0); }
		public Table_referenceContext[] table_reference() {
			return GetRuleContexts<Table_referenceContext>();
		}
		public Table_referenceContext table_reference(int i) {
			return GetRuleContext<Table_referenceContext>(i);
		}
		public ITerminalNode LEFT() { return GetToken(MySQLParser.LEFT, 0); }
		public ITerminalNode OUTER() { return GetToken(MySQLParser.OUTER, 0); }
		public ITerminalNode JOIN() { return GetToken(MySQLParser.JOIN, 0); }
		public ITerminalNode ON() { return GetToken(MySQLParser.ON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Table_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterTable_atom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitTable_atom(this);
		}
	}

	[RuleVersion(0)]
	public Table_atomContext table_atom() {
		Table_atomContext _localctx = new Table_atomContext(Context, State);
		EnterRule(_localctx, 58, RULE_table_atom);
		int _la;
		try {
			State = 297;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 271; table_name();
				State = 273;
				_la = TokenStream.La(1);
				if (_la==PARTITION) {
					{
					State = 272; partition_clause();
					}
				}

				State = 276;
				_la = TokenStream.La(1);
				if (_la==ID) {
					{
					State = 275; table_alias();
					}
				}

				State = 279;
				_la = TokenStream.La(1);
				if (_la==USE || _la==IGNORE) {
					{
					State = 278; index_hint_list();
					}
				}

				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 281; subquery();
				State = 282; subquery_alias();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 284; Match(LPAREN);
				State = 285; table_references();
				State = 286; Match(RPAREN);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 288; Match(OJ);
				State = 289; table_reference();
				State = 290; Match(LEFT);
				State = 291; Match(OUTER);
				State = 292; Match(JOIN);
				State = 293; table_reference();
				State = 294; Match(ON);
				State = 295; expression();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_clauseContext : ParserRuleContext {
		public ITerminalNode JOIN() { return GetToken(MySQLParser.JOIN, 0); }
		public Table_atomContext table_atom() {
			return GetRuleContext<Table_atomContext>(0);
		}
		public Join_conditionContext join_condition() {
			return GetRuleContext<Join_conditionContext>(0);
		}
		public ITerminalNode INNER() { return GetToken(MySQLParser.INNER, 0); }
		public ITerminalNode CROSS() { return GetToken(MySQLParser.CROSS, 0); }
		public ITerminalNode STRAIGHT_JOIN() { return GetToken(MySQLParser.STRAIGHT_JOIN, 0); }
		public ITerminalNode ON() { return GetToken(MySQLParser.ON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Table_factor4Context table_factor4() {
			return GetRuleContext<Table_factor4Context>(0);
		}
		public ITerminalNode LEFT() { return GetToken(MySQLParser.LEFT, 0); }
		public ITerminalNode RIGHT() { return GetToken(MySQLParser.RIGHT, 0); }
		public ITerminalNode OUTER() { return GetToken(MySQLParser.OUTER, 0); }
		public ITerminalNode NATURAL() { return GetToken(MySQLParser.NATURAL, 0); }
		public Join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterJoin_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitJoin_clause(this);
		}
	}

	[RuleVersion(0)]
	public Join_clauseContext join_clause() {
		Join_clauseContext _localctx = new Join_clauseContext(Context, State);
		EnterRule(_localctx, 60, RULE_join_clause);
		int _la;
		try {
			State = 330;
			switch (TokenStream.La(1)) {
			case INNER:
			case JOIN:
			case CROSS:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 300;
				_la = TokenStream.La(1);
				if (_la==INNER || _la==CROSS) {
					{
					State = 299;
					_la = TokenStream.La(1);
					if ( !(_la==INNER || _la==CROSS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
				}

				State = 302; Match(JOIN);
				State = 303; table_atom();
				State = 305;
				_la = TokenStream.La(1);
				if (_la==USING || _la==ON) {
					{
					State = 304; join_condition();
					}
				}

				}
				}
				break;
			case STRAIGHT_JOIN:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 307; Match(STRAIGHT_JOIN);
				State = 308; table_atom();
				State = 311;
				_la = TokenStream.La(1);
				if (_la==ON) {
					{
					State = 309; Match(ON);
					State = 310; expression();
					}
				}

				}
				}
				break;
			case LEFT:
			case RIGHT:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 313;
				_la = TokenStream.La(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 315;
				_la = TokenStream.La(1);
				if (_la==OUTER) {
					{
					State = 314; Match(OUTER);
					}
				}

				State = 317; Match(JOIN);
				State = 318; table_factor4();
				State = 319; join_condition();
				}
				}
				break;
			case NATURAL:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 321; Match(NATURAL);
				State = 326;
				_la = TokenStream.La(1);
				if (_la==LEFT || _la==RIGHT) {
					{
					State = 322;
					_la = TokenStream.La(1);
					if ( !(_la==LEFT || _la==RIGHT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					State = 324;
					_la = TokenStream.La(1);
					if (_la==OUTER) {
						{
						State = 323; Match(OUTER);
						}
					}

					}
				}

				State = 328; Match(JOIN);
				State = 329; table_atom();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_conditionContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(MySQLParser.ON, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Expr_opContext[] expr_op() {
			return GetRuleContexts<Expr_opContext>();
		}
		public Expr_opContext expr_op(int i) {
			return GetRuleContext<Expr_opContext>(i);
		}
		public ITerminalNode USING() { return GetToken(MySQLParser.USING, 0); }
		public Column_listContext column_list() {
			return GetRuleContext<Column_listContext>(0);
		}
		public Join_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterJoin_condition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitJoin_condition(this);
		}
	}

	[RuleVersion(0)]
	public Join_conditionContext join_condition() {
		Join_conditionContext _localctx = new Join_conditionContext(Context, State);
		EnterRule(_localctx, 62, RULE_join_condition);
		int _la;
		try {
			State = 344;
			switch (TokenStream.La(1)) {
			case ON:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 332; Match(ON);
				State = 333; expression();
				State = 339;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << OR) | (1L << XOR) | (1L << NOT))) != 0)) {
					{
					{
					State = 334; expr_op();
					State = 335; expression();
					}
					}
					State = 341;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 342; Match(USING);
				State = 343; column_list();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_hint_listContext : ParserRuleContext {
		public Index_hintContext[] index_hint() {
			return GetRuleContexts<Index_hintContext>();
		}
		public Index_hintContext index_hint(int i) {
			return GetRuleContext<Index_hintContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MySQLParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MySQLParser.COMMA, i);
		}
		public Index_hint_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_hint_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndex_hint_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndex_hint_list(this);
		}
	}

	[RuleVersion(0)]
	public Index_hint_listContext index_hint_list() {
		Index_hint_listContext _localctx = new Index_hint_listContext(Context, State);
		EnterRule(_localctx, 64, RULE_index_hint_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 346; index_hint();
			State = 351;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 347; Match(COMMA);
					State = 348; index_hint();
					}
					} 
				}
				State = 353;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_optionsContext : ParserRuleContext {
		public ITerminalNode INDEX() { return GetToken(MySQLParser.INDEX, 0); }
		public ITerminalNode KEY() { return GetToken(MySQLParser.KEY, 0); }
		public ITerminalNode FOR() { return GetToken(MySQLParser.FOR, 0); }
		public ITerminalNode JOIN() { return GetToken(MySQLParser.JOIN, 0); }
		public ITerminalNode ORDER() { return GetToken(MySQLParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(MySQLParser.BY, 0); }
		public ITerminalNode GROUP() { return GetToken(MySQLParser.GROUP, 0); }
		public Index_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndex_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndex_options(this);
		}
	}

	[RuleVersion(0)]
	public Index_optionsContext index_options() {
		Index_optionsContext _localctx = new Index_optionsContext(Context, State);
		EnterRule(_localctx, 66, RULE_index_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			_la = TokenStream.La(1);
			if ( !(_la==INDEX || _la==KEY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 363;
			_la = TokenStream.La(1);
			if (_la==FOR) {
				{
				State = 355; Match(FOR);
				State = 361;
				switch (TokenStream.La(1)) {
				case JOIN:
					{
					{
					State = 356; Match(JOIN);
					}
					}
					break;
				case ORDER:
					{
					{
					State = 357; Match(ORDER);
					State = 358; Match(BY);
					}
					}
					break;
				case GROUP:
					{
					{
					State = 359; Match(GROUP);
					State = 360; Match(BY);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_hintContext : ParserRuleContext {
		public ITerminalNode USE() { return GetToken(MySQLParser.USE, 0); }
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(MySQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(MySQLParser.RPAREN, 0); }
		public Index_listContext index_list() {
			return GetRuleContext<Index_listContext>(0);
		}
		public ITerminalNode IGNORE() { return GetToken(MySQLParser.IGNORE, 0); }
		public Index_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_hint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndex_hint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndex_hint(this);
		}
	}

	[RuleVersion(0)]
	public Index_hintContext index_hint() {
		Index_hintContext _localctx = new Index_hintContext(Context, State);
		EnterRule(_localctx, 68, RULE_index_hint);
		int _la;
		try {
			State = 379;
			switch (TokenStream.La(1)) {
			case USE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 365; Match(USE);
				State = 366; index_options();
				State = 367; Match(LPAREN);
				State = 369;
				_la = TokenStream.La(1);
				if (_la==ID) {
					{
					State = 368; index_list();
					}
				}

				State = 371; Match(RPAREN);
				}
				break;
			case IGNORE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 373; Match(IGNORE);
				State = 374; index_options();
				State = 375; Match(LPAREN);
				State = 376; index_list();
				State = 377; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_listContext : ParserRuleContext {
		public Index_nameContext[] index_name() {
			return GetRuleContexts<Index_nameContext>();
		}
		public Index_nameContext index_name(int i) {
			return GetRuleContext<Index_nameContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MySQLParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MySQLParser.COMMA, i);
		}
		public Index_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterIndex_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitIndex_list(this);
		}
	}

	[RuleVersion(0)]
	public Index_listContext index_list() {
		Index_listContext _localctx = new Index_listContext(Context, State);
		EnterRule(_localctx, 70, RULE_index_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381; index_name();
			State = 386;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 382; Match(COMMA);
				State = 383; index_name();
				}
				}
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_clauseContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(MySQLParser.PARTITION, 0); }
		public ITerminalNode LPAREN() { return GetToken(MySQLParser.LPAREN, 0); }
		public Partition_namesContext partition_names() {
			return GetRuleContext<Partition_namesContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(MySQLParser.RPAREN, 0); }
		public Partition_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartition_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartition_clause(this);
		}
	}

	[RuleVersion(0)]
	public Partition_clauseContext partition_clause() {
		Partition_clauseContext _localctx = new Partition_clauseContext(Context, State);
		EnterRule(_localctx, 72, RULE_partition_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389; Match(PARTITION);
			State = 390; Match(LPAREN);
			State = 391; partition_names();
			State = 392; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_namesContext : ParserRuleContext {
		public Partition_nameContext[] partition_name() {
			return GetRuleContexts<Partition_nameContext>();
		}
		public Partition_nameContext partition_name(int i) {
			return GetRuleContext<Partition_nameContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MySQLParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MySQLParser.COMMA, i);
		}
		public Partition_namesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_names; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartition_names(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartition_names(this);
		}
	}

	[RuleVersion(0)]
	public Partition_namesContext partition_names() {
		Partition_namesContext _localctx = new Partition_namesContext(Context, State);
		EnterRule(_localctx, 74, RULE_partition_names);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394; partition_name();
			State = 399;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 395; Match(COMMA);
				State = 396; partition_name();
				}
				}
				State = 401;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_nameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MySQLParser.ID, 0); }
		public Partition_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterPartition_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitPartition_name(this);
		}
	}

	[RuleVersion(0)]
	public Partition_nameContext partition_name() {
		Partition_nameContext _localctx = new Partition_nameContext(Context, State);
		EnterRule(_localctx, 76, RULE_partition_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subquery_aliasContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MySQLParser.ID, 0); }
		public Subquery_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSubquery_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSubquery_alias(this);
		}
	}

	[RuleVersion(0)]
	public Subquery_aliasContext subquery_alias() {
		Subquery_aliasContext _localctx = new Subquery_aliasContext(Context, State);
		EnterRule(_localctx, 78, RULE_subquery_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubqueryContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(MySQLParser.LPAREN, 0); }
		public Select_clauseContext select_clause() {
			return GetRuleContext<Select_clauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(MySQLParser.RPAREN, 0); }
		public SubqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.EnterSubquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySQLParserListener typedListener = listener as IMySQLParserListener;
			if (typedListener != null) typedListener.ExitSubquery(this);
		}
	}

	[RuleVersion(0)]
	public SubqueryContext subquery() {
		SubqueryContext _localctx = new SubqueryContext(Context, State);
		EnterRule(_localctx, 80, RULE_subquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406; Match(LPAREN);
			State = 407; select_clause();
			State = 408; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3J\x19D");
		sb.Append("\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a");
		sb.Append("\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4");
		sb.Append("\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4");
		sb.Append("\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4\x17\t\x17");
		sb.Append("\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B\x4\x1C");
		sb.Append("\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!\t!");
		sb.Append("\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t");
		sb.Append(")\x4*\t*\x3\x2\x6\x2V\n\x2\r\x2\xE\x2W\x3\x3\x3\x3\x3\x4\x3");
		sb.Append("\x4\x3\x4\x3\x4\x5\x4`\n\x4\x3\x4\x5\x4\x63\n\x4\x3\x5\x3\x5");
		sb.Append("\x3\x6\x3\x6\x3\a\x3\a\x3\a\x5\al\n\a\x3\a\x3\a\x5\ap\n\a\x3");
		sb.Append("\a\x3\a\x5\at\n\a\x3\a\x3\a\x3\a\x5\ay\n\a\x3\a\x3\a\x3\a\x5");
		sb.Append("\a~\n\a\x5\a\x80\n\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n");
		sb.Append("\a\n\x8A\n\n\f\n\xE\n\x8D\v\n\x3\n\x3\n\x3\v\x3\v\x3\v\a\v\x94");
		sb.Append("\n\v\f\v\xE\v\x97\v\v\x3\f\x3\f\x3\f\x3\f\a\f\x9D\n\f\f\f\xE");
		sb.Append("\f\xA0\v\f\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3");
		sb.Append("\xF\a\xF\xAB\n\xF\f\xF\xE\xF\xAE\v\xF\x3\x10\x3\x10\x3\x10\x3");
		sb.Append("\x10\x3\x10\x3\x10\x3\x10\x5\x10\xB7\n\x10\x3\x11\x3\x11\x3");
		sb.Append("\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16");
		sb.Append("\x3\x16\x3\x17\x3\x17\x3\x17\x5\x17\xC8\n\x17\x3\x18\x3\x18");
		sb.Append("\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3");
		sb.Append("\x18\x3\x18\x3\x18\x3\x18\x5\x18\xD8\n\x18\x3\x19\x3\x19\x3");
		sb.Append("\x19\x3\x19\a\x19\xDE\n\x19\f\x19\xE\x19\xE1\v\x19\x3\x1A\x3");
		sb.Append("\x1A\x5\x1A\xE5\n\x1A\x3\x1B\x3\x1B\x5\x1B\xE9\n\x1B\x3\x1B");
		sb.Append("\x3\x1B\x3\x1B\x5\x1B\xEE\n\x1B\x5\x1B\xF0\n\x1B\x3\x1C\x3\x1C");
		sb.Append("\x3\x1C\x3\x1C\x3\x1C\x5\x1C\xF7\n\x1C\x5\x1C\xF9\n\x1C\x3\x1D");
		sb.Append("\x3\x1D\x3\x1D\x5\x1D\xFE\n\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D");
		sb.Append("\x5\x1D\x104\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x10A\n");
		sb.Append("\x1E\x5\x1E\x10C\n\x1E\x3\x1E\x3\x1E\x5\x1E\x110\n\x1E\x3\x1F");
		sb.Append("\x3\x1F\x5\x1F\x114\n\x1F\x3\x1F\x5\x1F\x117\n\x1F\x3\x1F\x5");
		sb.Append("\x1F\x11A\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3");
		sb.Append("\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F");
		sb.Append("\x3\x1F\x5\x1F\x12C\n\x1F\x3 \x5 \x12F\n \x3 \x3 \x3 \x5 \x134");
		sb.Append("\n \x3 \x3 \x3 \x3 \x5 \x13A\n \x3 \x3 \x5 \x13E\n \x3 \x3 ");
		sb.Append("\x3 \x3 \x3 \x3 \x3 \x5 \x147\n \x5 \x149\n \x3 \x3 \x5 \x14D");
		sb.Append("\n \x3!\x3!\x3!\x3!\x3!\a!\x154\n!\f!\xE!\x157\v!\x3!\x3!\x5");
		sb.Append("!\x15B\n!\x3\"\x3\"\x3\"\a\"\x160\n\"\f\"\xE\"\x163\v\"\x3#");
		sb.Append("\x3#\x3#\x3#\x3#\x3#\x3#\x5#\x16C\n#\x5#\x16E\n#\x3$\x3$\x3");
		sb.Append("$\x3$\x5$\x174\n$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x5$\x17E\n");
		sb.Append("$\x3%\x3%\x3%\a%\x183\n%\f%\xE%\x186\v%\x3&\x3&\x3&\x3&\x3&");
		sb.Append("\x3\'\x3\'\x3\'\a\'\x190\n\'\f\'\xE\'\x193\v\'\x3(\x3(\x3)\x3");
		sb.Append(")\x3*\x3*\x3*\x3*\x3*\x2\x2+\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16");
		sb.Append("\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46");
		sb.Append("HJLNPR\x2\a\x4\x2\'*,-\x4\x2\x6\b++\x4\x2\x32\x32\x35\x35\x3");
		sb.Append("\x2\x42\x43\x3\x2\x37\x38\x1AE\x2U\x3\x2\x2\x2\x4Y\x3\x2\x2");
		sb.Append("\x2\x6[\x3\x2\x2\x2\b\x64\x3\x2\x2\x2\n\x66\x3\x2\x2\x2\f\x7F");
		sb.Append("\x3\x2\x2\x2\xE\x81\x3\x2\x2\x2\x10\x83\x3\x2\x2\x2\x12\x85");
		sb.Append("\x3\x2\x2\x2\x14\x90\x3\x2\x2\x2\x16\x98\x3\x2\x2\x2\x18\xA1");
		sb.Append("\x3\x2\x2\x2\x1A\xA3\x3\x2\x2\x2\x1C\xA6\x3\x2\x2\x2\x1E\xB6");
		sb.Append("\x3\x2\x2\x2 \xB8\x3\x2\x2\x2\"\xBA\x3\x2\x2\x2$\xBC\x3\x2\x2");
		sb.Append("\x2&\xBE\x3\x2\x2\x2(\xC0\x3\x2\x2\x2*\xC2\x3\x2\x2\x2,\xC7");
		sb.Append("\x3\x2\x2\x2.\xD7\x3\x2\x2\x2\x30\xD9\x3\x2\x2\x2\x32\xE4\x3");
		sb.Append("\x2\x2\x2\x34\xE6\x3\x2\x2\x2\x36\xF1\x3\x2\x2\x2\x38\xFA\x3");
		sb.Append("\x2\x2\x2:\x105\x3\x2\x2\x2<\x12B\x3\x2\x2\x2>\x14C\x3\x2\x2");
		sb.Append("\x2@\x15A\x3\x2\x2\x2\x42\x15C\x3\x2\x2\x2\x44\x164\x3\x2\x2");
		sb.Append("\x2\x46\x17D\x3\x2\x2\x2H\x17F\x3\x2\x2\x2J\x187\x3\x2\x2\x2");
		sb.Append("L\x18C\x3\x2\x2\x2N\x194\x3\x2\x2\x2P\x196\x3\x2\x2\x2R\x198");
		sb.Append("\x3\x2\x2\x2TV\x5\x6\x4\x2UT\x3\x2\x2\x2VW\x3\x2\x2\x2WU\x3");
		sb.Append("\x2\x2\x2WX\x3\x2\x2\x2X\x3\x3\x2\x2\x2YZ\a\x46\x2\x2Z\x5\x3");
		sb.Append("\x2\x2\x2[\\\a\x3\x2\x2\\_\x5\x14\v\x2]^\a\x4\x2\x2^`\x5\x30");
		sb.Append("\x19\x2_]\x3\x2\x2\x2_`\x3\x2\x2\x2`\x62\x3\x2\x2\x2\x61\x63");
		sb.Append("\x5\x1A\xE\x2\x62\x61\x3\x2\x2\x2\x62\x63\x3\x2\x2\x2\x63\a");
		sb.Append("\x3\x2\x2\x2\x64\x65\a\x46\x2\x2\x65\t\x3\x2\x2\x2\x66g\a\x46");
		sb.Append("\x2\x2g\v\x3\x2\x2\x2hi\x5\x4\x3\x2ij\a\x30\x2\x2jl\x3\x2\x2");
		sb.Append("\x2kh\x3\x2\x2\x2kl\x3\x2\x2\x2lm\x3\x2\x2\x2mn\a\x46\x2\x2");
		sb.Append("np\a\x30\x2\x2ok\x3\x2\x2\x2op\x3\x2\x2\x2pq\x3\x2\x2\x2qs\a");
		sb.Append("\x46\x2\x2rt\x5\xE\b\x2sr\x3\x2\x2\x2st\x3\x2\x2\x2t\x80\x3");
		sb.Append("\x2\x2\x2uv\x5\n\x6\x2vw\a\x30\x2\x2wy\x3\x2\x2\x2xu\x3\x2\x2");
		sb.Append("\x2xy\x3\x2\x2\x2yz\x3\x2\x2\x2z\x80\a\x46\x2\x2{}\aJ\x2\x2");
		sb.Append("|~\x5\xE\b\x2}|\x3\x2\x2\x2}~\x3\x2\x2\x2~\x80\x3\x2\x2\x2\x7F");
		sb.Append("o\x3\x2\x2\x2\x7Fx\x3\x2\x2\x2\x7F{\x3\x2\x2\x2\x80\r\x3\x2");
		sb.Append("\x2\x2\x81\x82\a\x46\x2\x2\x82\xF\x3\x2\x2\x2\x83\x84\a\x46");
		sb.Append("\x2\x2\x84\x11\x3\x2\x2\x2\x85\x86\a\"\x2\x2\x86\x8B\x5\f\a");
		sb.Append("\x2\x87\x88\a/\x2\x2\x88\x8A\x5\f\a\x2\x89\x87\x3\x2\x2\x2\x8A");
		sb.Append("\x8D\x3\x2\x2\x2\x8B\x89\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C");
		sb.Append("\x8E\x3\x2\x2\x2\x8D\x8B\x3\x2\x2\x2\x8E\x8F\a!\x2\x2\x8F\x13");
		sb.Append("\x3\x2\x2\x2\x90\x95\x5\f\a\x2\x91\x92\a/\x2\x2\x92\x94\x5\f");
		sb.Append("\a\x2\x93\x91\x3\x2\x2\x2\x94\x97\x3\x2\x2\x2\x95\x93\x3\x2");
		sb.Append("\x2\x2\x95\x96\x3\x2\x2\x2\x96\x15\x3\x2\x2\x2\x97\x95\x3\x2");
		sb.Append("\x2\x2\x98\x99\a\x4\x2\x2\x99\x9E\x5\b\x5\x2\x9A\x9B\a/\x2\x2");
		sb.Append("\x9B\x9D\x5\b\x5\x2\x9C\x9A\x3\x2\x2\x2\x9D\xA0\x3\x2\x2\x2");
		sb.Append("\x9E\x9C\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\x17\x3\x2\x2\x2");
		sb.Append("\xA0\x9E\x3\x2\x2\x2\xA1\xA2\a\x3\x2\x2\xA2\x19\x3\x2\x2\x2");
		sb.Append("\xA3\xA4\a\x5\x2\x2\xA4\xA5\x5\x1C\xF\x2\xA5\x1B\x3\x2\x2\x2");
		sb.Append("\xA6\xAC\x5.\x18\x2\xA7\xA8\x5(\x15\x2\xA8\xA9\x5.\x18\x2\xA9");
		sb.Append("\xAB\x3\x2\x2\x2\xAA\xA7\x3\x2\x2\x2\xAB\xAE\x3\x2\x2\x2\xAC");
		sb.Append("\xAA\x3\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD\x1D\x3\x2\x2\x2\xAE");
		sb.Append("\xAC\x3\x2\x2\x2\xAF\xB7\aJ\x2\x2\xB0\xB7\a\x46\x2\x2\xB1\xB2");
		sb.Append("\a\x19\x2\x2\xB2\xB3\a\x46\x2\x2\xB3\xB7\a\x19\x2\x2\xB4\xB7");
		sb.Append("\aG\x2\x2\xB5\xB7\x5\f\a\x2\xB6\xAF\x3\x2\x2\x2\xB6\xB0\x3\x2");
		sb.Append("\x2\x2\xB6\xB1\x3\x2\x2\x2\xB6\xB4\x3\x2\x2\x2\xB6\xB5\x3\x2");
		sb.Append("\x2\x2\xB7\x1F\x3\x2\x2\x2\xB8\xB9\x5\x1E\x10\x2\xB9!\x3\x2");
		sb.Append("\x2\x2\xBA\xBB\x5\x1E\x10\x2\xBB#\x3\x2\x2\x2\xBC\xBD\x5\x1E");
		sb.Append("\x10\x2\xBD%\x3\x2\x2\x2\xBE\xBF\t\x2\x2\x2\xBF\'\x3\x2\x2\x2");
		sb.Append("\xC0\xC1\t\x3\x2\x2\xC1)\x3\x2\x2\x2\xC2\xC3\a\x14\x2\x2\xC3");
		sb.Append("+\x3\x2\x2\x2\xC4\xC8\a\t\x2\x2\xC5\xC6\a\t\x2\x2\xC6\xC8\a");
		sb.Append("+\x2\x2\xC7\xC4\x3\x2\x2\x2\xC7\xC5\x3\x2\x2\x2\xC8-\x3\x2\x2");
		sb.Append("\x2\xC9\xCA\x5\"\x12\x2\xCA\xCB\x5&\x14\x2\xCB\xCC\x5 \x11\x2");
		sb.Append("\xCC\xD8\x3\x2\x2\x2\xCD\xCE\x5$\x13\x2\xCE\xCF\x5*\x16\x2\xCF");
		sb.Append("\xD0\x5\"\x12\x2\xD0\xD1\a\x6\x2\x2\xD1\xD2\x5 \x11\x2\xD2\xD8");
		sb.Append("\x3\x2\x2\x2\xD3\xD4\x5$\x13\x2\xD4\xD5\x5,\x17\x2\xD5\xD6\a");
		sb.Append("\n\x2\x2\xD6\xD8\x3\x2\x2\x2\xD7\xC9\x3\x2\x2\x2\xD7\xCD\x3");
		sb.Append("\x2\x2\x2\xD7\xD3\x3\x2\x2\x2\xD8/\x3\x2\x2\x2\xD9\xDF\x5\x32");
		sb.Append("\x1A\x2\xDA\xDB\a/\x2\x2\xDB\xDE\x5\x32\x1A\x2\xDC\xDE\x5> ");
		sb.Append("\x2\xDD\xDA\x3\x2\x2\x2\xDD\xDC\x3\x2\x2\x2\xDE\xE1\x3\x2\x2");
		sb.Append("\x2\xDF\xDD\x3\x2\x2\x2\xDF\xE0\x3\x2\x2\x2\xE0\x31\x3\x2\x2");
		sb.Append("\x2\xE1\xDF\x3\x2\x2\x2\xE2\xE5\x5\x34\x1B\x2\xE3\xE5\x5<\x1F");
		sb.Append("\x2\xE4\xE2\x3\x2\x2\x2\xE4\xE3\x3\x2\x2\x2\xE5\x33\x3\x2\x2");
		sb.Append("\x2\xE6\xEF\x5\x36\x1C\x2\xE7\xE9\t\x4\x2\x2\xE8\xE7\x3\x2\x2");
		sb.Append("\x2\xE8\xE9\x3\x2\x2\x2\xE9\xEA\x3\x2\x2\x2\xEA\xEB\a\x34\x2");
		sb.Append("\x2\xEB\xED\x5<\x1F\x2\xEC\xEE\x5@!\x2\xED\xEC\x3\x2\x2\x2\xED");
		sb.Append("\xEE\x3\x2\x2\x2\xEE\xF0\x3\x2\x2\x2\xEF\xE8\x3\x2\x2\x2\xEF");
		sb.Append("\xF0\x3\x2\x2\x2\xF0\x35\x3\x2\x2\x2\xF1\xF8\x5\x38\x1D\x2\xF2");
		sb.Append("\xF3\a@\x2\x2\xF3\xF6\x5<\x1F\x2\xF4\xF5\a\x45\x2\x2\xF5\xF7");
		sb.Append("\x5\x1C\xF\x2\xF6\xF4\x3\x2\x2\x2\xF6\xF7\x3\x2\x2\x2\xF7\xF9");
		sb.Append("\x3\x2\x2\x2\xF8\xF2\x3\x2\x2\x2\xF8\xF9\x3\x2\x2\x2\xF9\x37");
		sb.Append("\x3\x2\x2\x2\xFA\x103\x5:\x1E\x2\xFB\xFD\t\x5\x2\x2\xFC\xFE");
		sb.Append("\a\x33\x2\x2\xFD\xFC\x3\x2\x2\x2\xFD\xFE\x3\x2\x2\x2\xFE\xFF");
		sb.Append("\x3\x2\x2\x2\xFF\x100\a\x34\x2\x2\x100\x101\x5:\x1E\x2\x101");
		sb.Append("\x102\x5@!\x2\x102\x104\x3\x2\x2\x2\x103\xFB\x3\x2\x2\x2\x103");
		sb.Append("\x104\x3\x2\x2\x2\x104\x39\x3\x2\x2\x2\x105\x10F\x5<\x1F\x2");
		sb.Append("\x106\x10B\a\x41\x2\x2\x107\x109\t\x5\x2\x2\x108\x10A\a\x33");
		sb.Append("\x2\x2\x109\x108\x3\x2\x2\x2\x109\x10A\x3\x2\x2\x2\x10A\x10C");
		sb.Append("\x3\x2\x2\x2\x10B\x107\x3\x2\x2\x2\x10B\x10C\x3\x2\x2\x2\x10C");
		sb.Append("\x10D\x3\x2\x2\x2\x10D\x10E\a\x34\x2\x2\x10E\x110\x5<\x1F\x2");
		sb.Append("\x10F\x106\x3\x2\x2\x2\x10F\x110\x3\x2\x2\x2\x110;\x3\x2\x2");
		sb.Append("\x2\x111\x113\x5\b\x5\x2\x112\x114\x5J&\x2\x113\x112\x3\x2\x2");
		sb.Append("\x2\x113\x114\x3\x2\x2\x2\x114\x116\x3\x2\x2\x2\x115\x117\x5");
		sb.Append("\n\x6\x2\x116\x115\x3\x2\x2\x2\x116\x117\x3\x2\x2\x2\x117\x119");
		sb.Append("\x3\x2\x2\x2\x118\x11A\x5\x42\"\x2\x119\x118\x3\x2\x2\x2\x119");
		sb.Append("\x11A\x3\x2\x2\x2\x11A\x12C\x3\x2\x2\x2\x11B\x11C\x5R*\x2\x11C");
		sb.Append("\x11D\x5P)\x2\x11D\x12C\x3\x2\x2\x2\x11E\x11F\a\"\x2\x2\x11F");
		sb.Append("\x120\x5\x30\x19\x2\x120\x121\a!\x2\x2\x121\x12C\x3\x2\x2\x2");
		sb.Append("\x122\x123\a\x44\x2\x2\x123\x124\x5\x32\x1A\x2\x124\x125\a\x42");
		sb.Append("\x2\x2\x125\x126\a\x33\x2\x2\x126\x127\a\x34\x2\x2\x127\x128");
		sb.Append("\x5\x32\x1A\x2\x128\x129\a\x45\x2\x2\x129\x12A\x5\x1C\xF\x2");
		sb.Append("\x12A\x12C\x3\x2\x2\x2\x12B\x111\x3\x2\x2\x2\x12B\x11B\x3\x2");
		sb.Append("\x2\x2\x12B\x11E\x3\x2\x2\x2\x12B\x122\x3\x2\x2\x2\x12C=\x3");
		sb.Append("\x2\x2\x2\x12D\x12F\t\x4\x2\x2\x12E\x12D\x3\x2\x2\x2\x12E\x12F");
		sb.Append("\x3\x2\x2\x2\x12F\x130\x3\x2\x2\x2\x130\x131\a\x34\x2\x2\x131");
		sb.Append("\x133\x5<\x1F\x2\x132\x134\x5@!\x2\x133\x132\x3\x2\x2\x2\x133");
		sb.Append("\x134\x3\x2\x2\x2\x134\x14D\x3\x2\x2\x2\x135\x136\a@\x2\x2\x136");
		sb.Append("\x139\x5<\x1F\x2\x137\x138\a\x45\x2\x2\x138\x13A\x5\x1C\xF\x2");
		sb.Append("\x139\x137\x3\x2\x2\x2\x139\x13A\x3\x2\x2\x2\x13A\x14D\x3\x2");
		sb.Append("\x2\x2\x13B\x13D\t\x5\x2\x2\x13C\x13E\a\x33\x2\x2\x13D\x13C");
		sb.Append("\x3\x2\x2\x2\x13D\x13E\x3\x2\x2\x2\x13E\x13F\x3\x2\x2\x2\x13F");
		sb.Append("\x140\a\x34\x2\x2\x140\x141\x5:\x1E\x2\x141\x142\x5@!\x2\x142");
		sb.Append("\x14D\x3\x2\x2\x2\x143\x148\a\x41\x2\x2\x144\x146\t\x5\x2\x2");
		sb.Append("\x145\x147\a\x33\x2\x2\x146\x145\x3\x2\x2\x2\x146\x147\x3\x2");
		sb.Append("\x2\x2\x147\x149\x3\x2\x2\x2\x148\x144\x3\x2\x2\x2\x148\x149");
		sb.Append("\x3\x2\x2\x2\x149\x14A\x3\x2\x2\x2\x14A\x14B\a\x34\x2\x2\x14B");
		sb.Append("\x14D\x5<\x1F\x2\x14C\x12E\x3\x2\x2\x2\x14C\x135\x3\x2\x2\x2");
		sb.Append("\x14C\x13B\x3\x2\x2\x2\x14C\x143\x3\x2\x2\x2\x14D?\x3\x2\x2");
		sb.Append("\x2\x14E\x14F\a\x45\x2\x2\x14F\x155\x5\x1C\xF\x2\x150\x151\x5");
		sb.Append("(\x15\x2\x151\x152\x5\x1C\xF\x2\x152\x154\x3\x2\x2\x2\x153\x150");
		sb.Append("\x3\x2\x2\x2\x154\x157\x3\x2\x2\x2\x155\x153\x3\x2\x2\x2\x155");
		sb.Append("\x156\x3\x2\x2\x2\x156\x15B\x3\x2\x2\x2\x157\x155\x3\x2\x2\x2");
		sb.Append("\x158\x159\a\x36\x2\x2\x159\x15B\x5\x12\n\x2\x15A\x14E\x3\x2");
		sb.Append("\x2\x2\x15A\x158\x3\x2\x2\x2\x15B\x41\x3\x2\x2\x2\x15C\x161");
		sb.Append("\x5\x46$\x2\x15D\x15E\a/\x2\x2\x15E\x160\x5\x46$\x2\x15F\x15D");
		sb.Append("\x3\x2\x2\x2\x160\x163\x3\x2\x2\x2\x161\x15F\x3\x2\x2\x2\x161");
		sb.Append("\x162\x3\x2\x2\x2\x162\x43\x3\x2\x2\x2\x163\x161\x3\x2\x2\x2");
		sb.Append("\x164\x16D\t\x6\x2\x2\x165\x16B\a<\x2\x2\x166\x16C\a\x34\x2");
		sb.Append("\x2\x167\x168\a\x39\x2\x2\x168\x16C\a;\x2\x2\x169\x16A\a:\x2");
		sb.Append("\x2\x16A\x16C\a;\x2\x2\x16B\x166\x3\x2\x2\x2\x16B\x167\x3\x2");
		sb.Append("\x2\x2\x16B\x169\x3\x2\x2\x2\x16C\x16E\x3\x2\x2\x2\x16D\x165");
		sb.Append("\x3\x2\x2\x2\x16D\x16E\x3\x2\x2\x2\x16E\x45\x3\x2\x2\x2\x16F");
		sb.Append("\x170\a=\x2\x2\x170\x171\x5\x44#\x2\x171\x173\a\"\x2\x2\x172");
		sb.Append("\x174\x5H%\x2\x173\x172\x3\x2\x2\x2\x173\x174\x3\x2\x2\x2\x174");
		sb.Append("\x175\x3\x2\x2\x2\x175\x176\a!\x2\x2\x176\x17E\x3\x2\x2\x2\x177");
		sb.Append("\x178\a>\x2\x2\x178\x179\x5\x44#\x2\x179\x17A\a\"\x2\x2\x17A");
		sb.Append("\x17B\x5H%\x2\x17B\x17C\a!\x2\x2\x17C\x17E\x3\x2\x2\x2\x17D");
		sb.Append("\x16F\x3\x2\x2\x2\x17D\x177\x3\x2\x2\x2\x17EG\x3\x2\x2\x2\x17F");
		sb.Append("\x184\x5\x10\t\x2\x180\x181\a/\x2\x2\x181\x183\x5\x10\t\x2\x182");
		sb.Append("\x180\x3\x2\x2\x2\x183\x186\x3\x2\x2\x2\x184\x182\x3\x2\x2\x2");
		sb.Append("\x184\x185\x3\x2\x2\x2\x185I\x3\x2\x2\x2\x186\x184\x3\x2\x2");
		sb.Append("\x2\x187\x188\a?\x2\x2\x188\x189\a\"\x2\x2\x189\x18A\x5L\'\x2");
		sb.Append("\x18A\x18B\a!\x2\x2\x18BK\x3\x2\x2\x2\x18C\x191\x5N(\x2\x18D");
		sb.Append("\x18E\a/\x2\x2\x18E\x190\x5N(\x2\x18F\x18D\x3\x2\x2\x2\x190");
		sb.Append("\x193\x3\x2\x2\x2\x191\x18F\x3\x2\x2\x2\x191\x192\x3\x2\x2\x2");
		sb.Append("\x192M\x3\x2\x2\x2\x193\x191\x3\x2\x2\x2\x194\x195\a\x46\x2");
		sb.Append("\x2\x195O\x3\x2\x2\x2\x196\x197\a\x46\x2\x2\x197Q\x3\x2\x2\x2");
		sb.Append("\x198\x199\a\"\x2\x2\x199\x19A\x5\x6\x4\x2\x19A\x19B\a!\x2\x2");
		sb.Append("\x19BS\x3\x2\x2\x2\x33W_\x62kosx}\x7F\x8B\x95\x9E\xAC\xB6\xC7");
		sb.Append("\xD7\xDD\xDF\xE4\xE8\xED\xEF\xF6\xF8\xFD\x103\x109\x10B\x10F");
		sb.Append("\x113\x116\x119\x12B\x12E\x133\x139\x13D\x146\x148\x14C\x155");
		sb.Append("\x15A\x161\x16B\x16D\x173\x17D\x184\x191");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
