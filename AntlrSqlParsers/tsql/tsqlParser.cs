//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from grammars/tsql.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class tsqlParser : Parser {
	public const int
		HADR_options=1, ADD=2, ALL=3, ALTER=4, AND=5, ANY=6, AS=7, ASC=8, AUTHORIZATION=9, 
		BACKUP=10, BEGIN=11, BETWEEN=12, BREAK=13, BROWSE=14, BULK=15, BY=16, 
		CASCADE=17, CASE=18, CHANGETABLE=19, CHANGES=20, CHECK=21, CHECKPOINT=22, 
		CLOSE=23, CLUSTERED=24, COALESCE=25, COLLATE=26, COLUMN=27, COMMIT=28, 
		COMPUTE=29, CONSTRAINT=30, CONTAINMENT=31, CONTAINS=32, CONTAINSTABLE=33, 
		CONTINUE=34, CONVERT=35, CREATE=36, CROSS=37, CURRENT=38, CURRENT_DATE=39, 
		CURRENT_TIME=40, CURRENT_TIMESTAMP=41, CURRENT_USER=42, CURSOR=43, DATABASE=44, 
		DBCC=45, DEALLOCATE=46, DECLARE=47, DEFAULT=48, DELETE=49, DENY=50, DESC=51, 
		DISK=52, DISTINCT=53, DISTRIBUTED=54, DOUBLE=55, DROP=56, DUMP=57, ELSE=58, 
		END=59, ERRLVL=60, ESCAPE=61, EXCEPT=62, EXECUTE=63, EXISTS=64, EXIT=65, 
		EXTERNAL=66, FETCH=67, FILE=68, FILENAME=69, FILLFACTOR=70, FOR=71, FORCESEEK=72, 
		FOREIGN=73, FREETEXT=74, FREETEXTTABLE=75, FROM=76, FULL=77, FUNCTION=78, 
		GOTO=79, GRANT=80, GROUP=81, HAVING=82, IDENTITY=83, IDENTITYCOL=84, IDENTITY_INSERT=85, 
		IF=86, IN=87, INDEX=88, INNER=89, INSERT=90, INTERSECT=91, INTO=92, IS=93, 
		JOIN=94, KEY=95, KILL=96, LEFT=97, LIKE=98, LINENO=99, LOAD=100, LOG=101, 
		MERGE=102, NATIONAL=103, NOCHECK=104, NONCLUSTERED=105, NONE=106, NOT=107, 
		NULL=108, NULLIF=109, OF=110, OFF=111, OFFSETS=112, ON=113, OPEN=114, 
		OPENDATASOURCE=115, OPENQUERY=116, OPENROWSET=117, OPENXML=118, OPTION=119, 
		OR=120, ORDER=121, OUTER=122, OVER=123, PARTIAL=124, PERCENT=125, PIVOT=126, 
		PLAN=127, PRECISION=128, PRIMARY=129, PRINT=130, PROC=131, PROCEDURE=132, 
		PUBLIC=133, RAISERROR=134, READ=135, READTEXT=136, RECONFIGURE=137, REFERENCES=138, 
		REPLICATION=139, RESTORE=140, RESTRICT=141, RETURN=142, REVERT=143, REVOKE=144, 
		RIGHT=145, ROLLBACK=146, ROWCOUNT=147, ROWGUIDCOL=148, RULE=149, SAVE=150, 
		SCHEMA=151, SECURITYAUDIT=152, SELECT=153, SEMANTICKEYPHRASETABLE=154, 
		SEMANTICSIMILARITYDETAILSTABLE=155, SEMANTICSIMILARITYTABLE=156, SESSION_USER=157, 
		SET=158, SETUSER=159, SHUTDOWN=160, SOME=161, STATISTICS=162, SYSTEM_USER=163, 
		TABLE=164, TABLESAMPLE=165, TEXTSIZE=166, THEN=167, TO=168, TOP=169, TRAN=170, 
		TRANSACTION=171, TRIGGER=172, TRUNCATE=173, TRY_CONVERT=174, TSEQUAL=175, 
		UNION=176, UNIQUE=177, UNPIVOT=178, UPDATE=179, UPDATETEXT=180, USE=181, 
		USER=182, VALUES=183, VARYING=184, VIEW=185, WAITFOR=186, WHEN=187, WHERE=188, 
		WHILE=189, WITH=190, WITHIN=191, WRITETEXT=192, ABSOLUTE=193, AFTER=194, 
		ALLOWED=195, ALLOW_SNAPSHOT_ISOLATION=196, ANSI_NULLS=197, ANSI_NULL_DEFAULT=198, 
		ANSI_PADDING=199, ANSI_WARNINGS=200, APPLY=201, ARITHABORT=202, AUTO=203, 
		AUTO_CLEANUP=204, AUTO_CLOSE=205, AUTO_CREATE_STATISTICS=206, AUTO_SHRINK=207, 
		AUTO_UPDATE_STATISTICS=208, AUTO_UPDATE_STATISTICS_ASYNC=209, AVG=210, 
		BASE64=211, BINARY_CHECKSUM=212, BULK_LOGGED=213, CALLER=214, CAST=215, 
		CATCH=216, CHANGE_RETENTION=217, CHANGE_TRACKING=218, CHECKSUM=219, CHECKSUM_AGG=220, 
		COMMITTED=221, COMPATIBILITY_LEVEL=222, CONCAT=223, CONCAT_NULL_YIELDS_NULL=224, 
		CONTROL=225, COOKIE=226, COUNT=227, COUNT_BIG=228, CURSOR_CLOSE_ON_COMMIT=229, 
		CURSOR_DEFAULT=230, DATEADD=231, DATEDIFF=232, DATENAME=233, DATEPART=234, 
		DATE_CORRELATION_OPTIMIZATION=235, DAYS=236, DB_CHAINING=237, DEFAULT_FULLTEXT_LANGUAGE=238, 
		DEFAULT_LANGUAGE=239, DELAY=240, DELAYED_DURABILITY=241, DELETED=242, 
		DENSE_RANK=243, DIRECTORY_NAME=244, DISABLE=245, DISABLED=246, DISABLE_BROKER=247, 
		DYNAMIC=248, EMERGENCY=249, ENABLE_BROKER=250, ENCRYPTION=251, ERROR_BROKER_CONVERSATIONS=252, 
		EXPAND=253, FAST=254, FAST_FORWARD=255, FILEGROUP=256, FILEGROWTH=257, 
		FILESTREAM=258, FIRST=259, FOLLOWING=260, FORCE=261, FORCED=262, FORWARD_ONLY=263, 
		FULLSCAN=264, GB=265, GLOBAL=266, GO=267, GROUPING=268, GROUPING_ID=269, 
		HADR=270, HASH=271, HONOR_BROKER_PRIORITY=272, HOURS=273, IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=274, 
		IMMEDIATE=275, IMPERSONATE=276, INCREMENTAL=277, INSENSITIVE=278, INSERTED=279, 
		ISOLATION=280, KB=281, KEEP=282, KEEPFIXED=283, KEYSET=284, LAST=285, 
		LEVEL=286, LOCAL=287, LOCK_ESCALATION=288, LOGIN=289, LOOP=290, MARK=291, 
		MAX=292, MAXDOP=293, MAXRECURSION=294, MAXSIZE=295, MB=296, MEMORY_OPTIMIZED_DATA=297, 
		MIN=298, MINUTES=299, MIN_ACTIVE_ROWVERSION=300, MIXED_PAGE_ALLOCATION=301, 
		MODIFY=302, MULTI_USER=303, NAME=304, NESTED_TRIGGERS=305, NEW_BROKER=306, 
		NEXT=307, NOCOUNT=308, NOEXPAND=309, NON_TRANSACTED_ACCESS=310, NORECOMPUTE=311, 
		NO_WAIT=312, NTILE=313, NUMBER=314, NUMERIC_ROUNDABORT=315, OFFLINE=316, 
		OFFSET=317, ONLINE=318, ONLY=319, OPTIMISTIC=320, OPTIMIZE=321, OUT=322, 
		OUTPUT=323, OWNER=324, PAGE_VERIFY=325, PARAMETERIZATION=326, PARTITION=327, 
		PATH=328, PRECEDING=329, PRIOR=330, PRIVILEGES=331, QUOTED_IDENTIFIER=332, 
		RANGE=333, RANK=334, READONLY=335, READ_COMMITTED_SNAPSHOT=336, READ_ONLY=337, 
		READ_WRITE=338, RECOMPILE=339, RECOVERY=340, RECURSIVE_TRIGGERS=341, RELATIVE=342, 
		REMOTE=343, REPEATABLE=344, RESTRICTED_USER=345, ROBUST=346, ROOT=347, 
		ROW=348, ROWGUID=349, ROWS=350, ROW_NUMBER=351, SAMPLE=352, SCHEMABINDING=353, 
		SCROLL=354, SCROLL_LOCKS=355, SECONDS=356, SELF=357, SERIALIZABLE=358, 
		SHOWPLAN=359, SIMPLE=360, SINGLE_USER=361, SIZE=362, SNAPSHOT=363, SPATIAL_WINDOW_MAX_CELLS=364, 
		STATIC=365, STATS_STREAM=366, STDEV=367, STDEVP=368, SUM=369, TAKE=370, 
		TARGET_RECOVERY_TIME=371, TB=372, TEXTIMAGE_ON=373, THROW=374, TIES=375, 
		TIME=376, TORN_PAGE_DETECTION=377, TRANSFORM_NOISE_WORDS=378, TRUSTWORTHY=379, 
		TRY=380, TWO_DIGIT_YEAR_CUTOFF=381, TYPE=382, TYPE_WARNING=383, UNBOUNDED=384, 
		UNCOMMITTED=385, UNKNOWN=386, UNLIMITED=387, USING=388, VAR=389, VARP=390, 
		VIEWS=391, VIEW_METADATA=392, WORK=393, XML=394, XMLNAMESPACES=395, DOLLAR_ACTION=396, 
		SPACE=397, COMMENT=398, LINE_COMMENT=399, DOUBLE_QUOTE_ID=400, SQUARE_BRACKET_ID=401, 
		LOCAL_ID=402, DECIMAL=403, ID=404, STRING=405, BINARY=406, FLOAT=407, 
		REAL=408, EQUAL=409, GREATER=410, LESS=411, EXCLAMATION=412, PLUS_ASSIGN=413, 
		MINUS_ASSIGN=414, MULT_ASSIGN=415, DIV_ASSIGN=416, MOD_ASSIGN=417, AND_ASSIGN=418, 
		XOR_ASSIGN=419, OR_ASSIGN=420, DOT=421, UNDERLINE=422, AT=423, SHARP=424, 
		DOLLAR=425, LR_BRACKET=426, RR_BRACKET=427, COMMA=428, SEMI=429, COLON=430, 
		STAR=431, DIVIDE=432, MODULE=433, PLUS=434, MINUS=435, BIT_NOT=436, BIT_OR=437, 
		BIT_AND=438, BIT_XOR=439;
	public const int
		RULE_tsql_file = 0, RULE_batch = 1, RULE_sql_clauses = 2, RULE_sql_clause = 3, 
		RULE_dml_clause = 4, RULE_ddl_clause = 5, RULE_cfl_statement = 6, RULE_another_statement = 7, 
		RULE_delete_statement = 8, RULE_delete_statement_from = 9, RULE_insert_statement = 10, 
		RULE_insert_statement_value = 11, RULE_select_statement = 12, RULE_update_statement = 13, 
		RULE_output_clause = 14, RULE_output_dml_list_elem = 15, RULE_output_column_name = 16, 
		RULE_create_database = 17, RULE_create_index = 18, RULE_create_procedure = 19, 
		RULE_procedure_param = 20, RULE_procedure_option = 21, RULE_create_statistics = 22, 
		RULE_create_table = 23, RULE_create_view = 24, RULE_view_attribute = 25, 
		RULE_alter_table = 26, RULE_alter_database = 27, RULE_database_optionspec = 28, 
		RULE_auto_option = 29, RULE_change_tracking_option = 30, RULE_change_tracking_option_list = 31, 
		RULE_containment_option = 32, RULE_cursor_option = 33, RULE_date_correlation_optimization_option = 34, 
		RULE_db_encryption_option = 35, RULE_db_state_option = 36, RULE_db_update_option = 37, 
		RULE_db_user_access_option = 38, RULE_delayed_durability_option = 39, 
		RULE_external_access_option = 40, RULE_mixed_page_allocation_option = 41, 
		RULE_parameterization_option = 42, RULE_recovery_option = 43, RULE_service_broker_option = 44, 
		RULE_snapshot_option = 45, RULE_sql_option = 46, RULE_target_recovery_time_option = 47, 
		RULE_termination = 48, RULE_drop_index = 49, RULE_drop_procedure = 50, 
		RULE_drop_statistics = 51, RULE_drop_table = 52, RULE_drop_view = 53, 
		RULE_create_type = 54, RULE_drop_type = 55, RULE_rowset_function_limited = 56, 
		RULE_openquery = 57, RULE_opendatasource = 58, RULE_declare_statement = 59, 
		RULE_cursor_statement = 60, RULE_execute_statement = 61, RULE_execute_statement_arg = 62, 
		RULE_execute_var_string = 63, RULE_security_statement = 64, RULE_grant_permission = 65, 
		RULE_set_statement = 66, RULE_transaction_statement = 67, RULE_go_statement = 68, 
		RULE_use_statement = 69, RULE_execute_clause = 70, RULE_declare_local = 71, 
		RULE_table_type_definition = 72, RULE_column_def_table_constraints = 73, 
		RULE_column_def_table_constraint = 74, RULE_column_definition = 75, RULE_column_constraint = 76, 
		RULE_table_constraint = 77, RULE_index_options = 78, RULE_index_option = 79, 
		RULE_declare_cursor = 80, RULE_declare_set_cursor_common = 81, RULE_fetch_cursor = 82, 
		RULE_set_special = 83, RULE_constant_LOCAL_ID = 84, RULE_expression = 85, 
		RULE_constant_expression = 86, RULE_subquery = 87, RULE_with_expression = 88, 
		RULE_common_table_expression = 89, RULE_update_elem = 90, RULE_search_condition_list = 91, 
		RULE_search_condition = 92, RULE_search_condition_and = 93, RULE_search_condition_not = 94, 
		RULE_predicate = 95, RULE_query_expression = 96, RULE_union = 97, RULE_query_specification = 98, 
		RULE_order_by_clause = 99, RULE_for_clause = 100, RULE_xml_common_directives = 101, 
		RULE_order_by_expression = 102, RULE_group_by_item = 103, RULE_option_clause = 104, 
		RULE_option = 105, RULE_optimize_for_arg = 106, RULE_select_list = 107, 
		RULE_select_list_elem = 108, RULE_table_sources = 109, RULE_table_source = 110, 
		RULE_table_source_item_joined = 111, RULE_table_source_item = 112, RULE_change_table = 113, 
		RULE_join_part = 114, RULE_table_name_with_hint = 115, RULE_rowset_function = 116, 
		RULE_bulk_option = 117, RULE_derived_table = 118, RULE_function_call = 119, 
		RULE_switch_section = 120, RULE_switch_search_condition_section = 121, 
		RULE_as_table_alias = 122, RULE_table_alias = 123, RULE_with_table_hints = 124, 
		RULE_insert_with_table_hints = 125, RULE_table_hint = 126, RULE_index_value = 127, 
		RULE_column_alias_list = 128, RULE_column_alias = 129, RULE_table_value_constructor = 130, 
		RULE_expression_list = 131, RULE_ranking_windowed_function = 132, RULE_aggregate_windowed_function = 133, 
		RULE_all_distinct_expression = 134, RULE_over_clause = 135, RULE_row_or_range_clause = 136, 
		RULE_window_frame_extent = 137, RULE_window_frame_bound = 138, RULE_window_frame_preceding = 139, 
		RULE_window_frame_following = 140, RULE_create_database_option = 141, 
		RULE_database_filestream_option = 142, RULE_database_file_spec = 143, 
		RULE_file_group = 144, RULE_file_spec = 145, RULE_full_table_name = 146, 
		RULE_table_name = 147, RULE_simple_name = 148, RULE_func_proc_name = 149, 
		RULE_ddl_object = 150, RULE_full_column_name = 151, RULE_column_name_list = 152, 
		RULE_cursor_name = 153, RULE_on_off = 154, RULE_clustered = 155, RULE_null_notnull = 156, 
		RULE_scalar_function_name = 157, RULE_data_type = 158, RULE_default_value = 159, 
		RULE_constant = 160, RULE_sign = 161, RULE_id = 162, RULE_simple_id = 163, 
		RULE_comparison_operator = 164, RULE_assignment_operator = 165, RULE_file_size = 166;
	public static readonly string[] ruleNames = {
		"tsql_file", "batch", "sql_clauses", "sql_clause", "dml_clause", "ddl_clause", 
		"cfl_statement", "another_statement", "delete_statement", "delete_statement_from", 
		"insert_statement", "insert_statement_value", "select_statement", "update_statement", 
		"output_clause", "output_dml_list_elem", "output_column_name", "create_database", 
		"create_index", "create_procedure", "procedure_param", "procedure_option", 
		"create_statistics", "create_table", "create_view", "view_attribute", 
		"alter_table", "alter_database", "database_optionspec", "auto_option", 
		"change_tracking_option", "change_tracking_option_list", "containment_option", 
		"cursor_option", "date_correlation_optimization_option", "db_encryption_option", 
		"db_state_option", "db_update_option", "db_user_access_option", "delayed_durability_option", 
		"external_access_option", "mixed_page_allocation_option", "parameterization_option", 
		"recovery_option", "service_broker_option", "snapshot_option", "sql_option", 
		"target_recovery_time_option", "termination", "drop_index", "drop_procedure", 
		"drop_statistics", "drop_table", "drop_view", "create_type", "drop_type", 
		"rowset_function_limited", "openquery", "opendatasource", "declare_statement", 
		"cursor_statement", "execute_statement", "execute_statement_arg", "execute_var_string", 
		"security_statement", "grant_permission", "set_statement", "transaction_statement", 
		"go_statement", "use_statement", "execute_clause", "declare_local", "table_type_definition", 
		"column_def_table_constraints", "column_def_table_constraint", "column_definition", 
		"column_constraint", "table_constraint", "index_options", "index_option", 
		"declare_cursor", "declare_set_cursor_common", "fetch_cursor", "set_special", 
		"constant_LOCAL_ID", "expression", "constant_expression", "subquery", 
		"with_expression", "common_table_expression", "update_elem", "search_condition_list", 
		"search_condition", "search_condition_and", "search_condition_not", "predicate", 
		"query_expression", "union", "query_specification", "order_by_clause", 
		"for_clause", "xml_common_directives", "order_by_expression", "group_by_item", 
		"option_clause", "option", "optimize_for_arg", "select_list", "select_list_elem", 
		"table_sources", "table_source", "table_source_item_joined", "table_source_item", 
		"change_table", "join_part", "table_name_with_hint", "rowset_function", 
		"bulk_option", "derived_table", "function_call", "switch_section", "switch_search_condition_section", 
		"as_table_alias", "table_alias", "with_table_hints", "insert_with_table_hints", 
		"table_hint", "index_value", "column_alias_list", "column_alias", "table_value_constructor", 
		"expression_list", "ranking_windowed_function", "aggregate_windowed_function", 
		"all_distinct_expression", "over_clause", "row_or_range_clause", "window_frame_extent", 
		"window_frame_bound", "window_frame_preceding", "window_frame_following", 
		"create_database_option", "database_filestream_option", "database_file_spec", 
		"file_group", "file_spec", "full_table_name", "table_name", "simple_name", 
		"func_proc_name", "ddl_object", "full_column_name", "column_name_list", 
		"cursor_name", "on_off", "clustered", "null_notnull", "scalar_function_name", 
		"data_type", "default_value", "constant", "sign", "id", "simple_id", "comparison_operator", 
		"assignment_operator", "file_size"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "'='", "'>'", "'<'", "'!'", "'+='", "'-='", "'*='", "'/='", "'%='", 
		"'&='", "'^='", "'|='", "'.'", "'_'", "'@'", "'#'", "'$'", "'('", "')'", 
		"','", "';'", "':'", "'*'", "'/'", "'%'", "'+'", "'-'", "'~'", "'|'", 
		"'&'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "HADR_options", "ADD", "ALL", "ALTER", "AND", "ANY", "AS", "ASC", 
		"AUTHORIZATION", "BACKUP", "BEGIN", "BETWEEN", "BREAK", "BROWSE", "BULK", 
		"BY", "CASCADE", "CASE", "CHANGETABLE", "CHANGES", "CHECK", "CHECKPOINT", 
		"CLOSE", "CLUSTERED", "COALESCE", "COLLATE", "COLUMN", "COMMIT", "COMPUTE", 
		"CONSTRAINT", "CONTAINMENT", "CONTAINS", "CONTAINSTABLE", "CONTINUE", 
		"CONVERT", "CREATE", "CROSS", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", 
		"CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "DATABASE", "DBCC", "DEALLOCATE", 
		"DECLARE", "DEFAULT", "DELETE", "DENY", "DESC", "DISK", "DISTINCT", "DISTRIBUTED", 
		"DOUBLE", "DROP", "DUMP", "ELSE", "END", "ERRLVL", "ESCAPE", "EXCEPT", 
		"EXECUTE", "EXISTS", "EXIT", "EXTERNAL", "FETCH", "FILE", "FILENAME", 
		"FILLFACTOR", "FOR", "FORCESEEK", "FOREIGN", "FREETEXT", "FREETEXTTABLE", 
		"FROM", "FULL", "FUNCTION", "GOTO", "GRANT", "GROUP", "HAVING", "IDENTITY", 
		"IDENTITYCOL", "IDENTITY_INSERT", "IF", "IN", "INDEX", "INNER", "INSERT", 
		"INTERSECT", "INTO", "IS", "JOIN", "KEY", "KILL", "LEFT", "LIKE", "LINENO", 
		"LOAD", "LOG", "MERGE", "NATIONAL", "NOCHECK", "NONCLUSTERED", "NONE", 
		"NOT", "NULL", "NULLIF", "OF", "OFF", "OFFSETS", "ON", "OPEN", "OPENDATASOURCE", 
		"OPENQUERY", "OPENROWSET", "OPENXML", "OPTION", "OR", "ORDER", "OUTER", 
		"OVER", "PARTIAL", "PERCENT", "PIVOT", "PLAN", "PRECISION", "PRIMARY", 
		"PRINT", "PROC", "PROCEDURE", "PUBLIC", "RAISERROR", "READ", "READTEXT", 
		"RECONFIGURE", "REFERENCES", "REPLICATION", "RESTORE", "RESTRICT", "RETURN", 
		"REVERT", "REVOKE", "RIGHT", "ROLLBACK", "ROWCOUNT", "ROWGUIDCOL", "RULE", 
		"SAVE", "SCHEMA", "SECURITYAUDIT", "SELECT", "SEMANTICKEYPHRASETABLE", 
		"SEMANTICSIMILARITYDETAILSTABLE", "SEMANTICSIMILARITYTABLE", "SESSION_USER", 
		"SET", "SETUSER", "SHUTDOWN", "SOME", "STATISTICS", "SYSTEM_USER", "TABLE", 
		"TABLESAMPLE", "TEXTSIZE", "THEN", "TO", "TOP", "TRAN", "TRANSACTION", 
		"TRIGGER", "TRUNCATE", "TRY_CONVERT", "TSEQUAL", "UNION", "UNIQUE", "UNPIVOT", 
		"UPDATE", "UPDATETEXT", "USE", "USER", "VALUES", "VARYING", "VIEW", "WAITFOR", 
		"WHEN", "WHERE", "WHILE", "WITH", "WITHIN", "WRITETEXT", "ABSOLUTE", "AFTER", 
		"ALLOWED", "ALLOW_SNAPSHOT_ISOLATION", "ANSI_NULLS", "ANSI_NULL_DEFAULT", 
		"ANSI_PADDING", "ANSI_WARNINGS", "APPLY", "ARITHABORT", "AUTO", "AUTO_CLEANUP", 
		"AUTO_CLOSE", "AUTO_CREATE_STATISTICS", "AUTO_SHRINK", "AUTO_UPDATE_STATISTICS", 
		"AUTO_UPDATE_STATISTICS_ASYNC", "AVG", "BASE64", "BINARY_CHECKSUM", "BULK_LOGGED", 
		"CALLER", "CAST", "CATCH", "CHANGE_RETENTION", "CHANGE_TRACKING", "CHECKSUM", 
		"CHECKSUM_AGG", "COMMITTED", "COMPATIBILITY_LEVEL", "CONCAT", "CONCAT_NULL_YIELDS_NULL", 
		"CONTROL", "COOKIE", "COUNT", "COUNT_BIG", "CURSOR_CLOSE_ON_COMMIT", "CURSOR_DEFAULT", 
		"DATEADD", "DATEDIFF", "DATENAME", "DATEPART", "DATE_CORRELATION_OPTIMIZATION", 
		"DAYS", "DB_CHAINING", "DEFAULT_FULLTEXT_LANGUAGE", "DEFAULT_LANGUAGE", 
		"DELAY", "DELAYED_DURABILITY", "DELETED", "DENSE_RANK", "DIRECTORY_NAME", 
		"DISABLE", "DISABLED", "DISABLE_BROKER", "DYNAMIC", "EMERGENCY", "ENABLE_BROKER", 
		"ENCRYPTION", "ERROR_BROKER_CONVERSATIONS", "EXPAND", "FAST", "FAST_FORWARD", 
		"FILEGROUP", "FILEGROWTH", "FILESTREAM", "FIRST", "FOLLOWING", "FORCE", 
		"FORCED", "FORWARD_ONLY", "FULLSCAN", "GB", "GLOBAL", "GO", "GROUPING", 
		"GROUPING_ID", "HADR", "HASH", "HONOR_BROKER_PRIORITY", "HOURS", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", 
		"IMMEDIATE", "IMPERSONATE", "INCREMENTAL", "INSENSITIVE", "INSERTED", 
		"ISOLATION", "KB", "KEEP", "KEEPFIXED", "KEYSET", "LAST", "LEVEL", "LOCAL", 
		"LOCK_ESCALATION", "LOGIN", "LOOP", "MARK", "MAX", "MAXDOP", "MAXRECURSION", 
		"MAXSIZE", "MB", "MEMORY_OPTIMIZED_DATA", "MIN", "MINUTES", "MIN_ACTIVE_ROWVERSION", 
		"MIXED_PAGE_ALLOCATION", "MODIFY", "MULTI_USER", "NAME", "NESTED_TRIGGERS", 
		"NEW_BROKER", "NEXT", "NOCOUNT", "NOEXPAND", "NON_TRANSACTED_ACCESS", 
		"NORECOMPUTE", "NO_WAIT", "NTILE", "NUMBER", "NUMERIC_ROUNDABORT", "OFFLINE", 
		"OFFSET", "ONLINE", "ONLY", "OPTIMISTIC", "OPTIMIZE", "OUT", "OUTPUT", 
		"OWNER", "PAGE_VERIFY", "PARAMETERIZATION", "PARTITION", "PATH", "PRECEDING", 
		"PRIOR", "PRIVILEGES", "QUOTED_IDENTIFIER", "RANGE", "RANK", "READONLY", 
		"READ_COMMITTED_SNAPSHOT", "READ_ONLY", "READ_WRITE", "RECOMPILE", "RECOVERY", 
		"RECURSIVE_TRIGGERS", "RELATIVE", "REMOTE", "REPEATABLE", "RESTRICTED_USER", 
		"ROBUST", "ROOT", "ROW", "ROWGUID", "ROWS", "ROW_NUMBER", "SAMPLE", "SCHEMABINDING", 
		"SCROLL", "SCROLL_LOCKS", "SECONDS", "SELF", "SERIALIZABLE", "SHOWPLAN", 
		"SIMPLE", "SINGLE_USER", "SIZE", "SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", 
		"STATIC", "STATS_STREAM", "STDEV", "STDEVP", "SUM", "TAKE", "TARGET_RECOVERY_TIME", 
		"TB", "TEXTIMAGE_ON", "THROW", "TIES", "TIME", "TORN_PAGE_DETECTION", 
		"TRANSFORM_NOISE_WORDS", "TRUSTWORTHY", "TRY", "TWO_DIGIT_YEAR_CUTOFF", 
		"TYPE", "TYPE_WARNING", "UNBOUNDED", "UNCOMMITTED", "UNKNOWN", "UNLIMITED", 
		"USING", "VAR", "VARP", "VIEWS", "VIEW_METADATA", "WORK", "XML", "XMLNAMESPACES", 
		"DOLLAR_ACTION", "SPACE", "COMMENT", "LINE_COMMENT", "DOUBLE_QUOTE_ID", 
		"SQUARE_BRACKET_ID", "LOCAL_ID", "DECIMAL", "ID", "STRING", "BINARY", 
		"FLOAT", "REAL", "EQUAL", "GREATER", "LESS", "EXCLAMATION", "PLUS_ASSIGN", 
		"MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", 
		"XOR_ASSIGN", "OR_ASSIGN", "DOT", "UNDERLINE", "AT", "SHARP", "DOLLAR", 
		"LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "COLON", "STAR", "DIVIDE", 
		"MODULE", "PLUS", "MINUS", "BIT_NOT", "BIT_OR", "BIT_AND", "BIT_XOR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "tsql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public tsqlParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class Tsql_fileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(tsqlParser.Eof, 0); }
		public BatchContext[] batch() {
			return GetRuleContexts<BatchContext>();
		}
		public BatchContext batch(int i) {
			return GetRuleContext<BatchContext>(i);
		}
		public Tsql_fileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsql_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTsql_file(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTsql_file(this);
		}
	}

	[RuleVersion(0)]
	public Tsql_fileContext tsql_file() {
		Tsql_fileContext _localctx = new Tsql_fileContext(Context, State);
		EnterRule(_localctx, 0, RULE_tsql_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << BEGIN) | (1L << BREAK) | (1L << CLOSE) | (1L << COMMIT) | (1L << CONTINUE) | (1L << CREATE) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DELETE) | (1L << DROP) | (1L << EXECUTE))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (FETCH - 67)) | (1L << (FORCESEEK - 67)) | (1L << (GOTO - 67)) | (1L << (GRANT - 67)) | (1L << (IF - 67)) | (1L << (INSERT - 67)) | (1L << (OPEN - 67)) | (1L << (PRINT - 67)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (RAISERROR - 134)) | (1L << (RETURN - 134)) | (1L << (REVERT - 134)) | (1L << (ROLLBACK - 134)) | (1L << (SAVE - 134)) | (1L << (SELECT - 134)) | (1L << (SET - 134)) | (1L << (UPDATE - 134)) | (1L << (USE - 134)) | (1L << (WAITFOR - 134)) | (1L << (WHILE - 134)) | (1L << (WITH - 134)) | (1L << (ABSOLUTE - 134)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (APPLY - 201)) | (1L << (AUTO - 201)) | (1L << (AVG - 201)) | (1L << (BASE64 - 201)) | (1L << (CALLER - 201)) | (1L << (CAST - 201)) | (1L << (CATCH - 201)) | (1L << (CHECKSUM_AGG - 201)) | (1L << (COMMITTED - 201)) | (1L << (CONCAT - 201)) | (1L << (CONTROL - 201)) | (1L << (COOKIE - 201)) | (1L << (COUNT - 201)) | (1L << (COUNT_BIG - 201)) | (1L << (DELAY - 201)) | (1L << (DELETED - 201)) | (1L << (DENSE_RANK - 201)) | (1L << (DISABLE - 201)) | (1L << (DYNAMIC - 201)) | (1L << (ENCRYPTION - 201)) | (1L << (EXPAND - 201)) | (1L << (FAST - 201)) | (1L << (FAST_FORWARD - 201)) | (1L << (FIRST - 201)) | (1L << (FOLLOWING - 201)) | (1L << (FORCE - 201)) | (1L << (FORCED - 201)) | (1L << (FORWARD_ONLY - 201)) | (1L << (FULLSCAN - 201)))) != 0) || ((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & ((1L << (GLOBAL - 266)) | (1L << (GO - 266)) | (1L << (GROUPING - 266)) | (1L << (GROUPING_ID - 266)) | (1L << (HASH - 266)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 266)) | (1L << (IMPERSONATE - 266)) | (1L << (INSENSITIVE - 266)) | (1L << (INSERTED - 266)) | (1L << (ISOLATION - 266)) | (1L << (KEEP - 266)) | (1L << (KEEPFIXED - 266)) | (1L << (KEYSET - 266)) | (1L << (LAST - 266)) | (1L << (LEVEL - 266)) | (1L << (LOCAL - 266)) | (1L << (LOCK_ESCALATION - 266)) | (1L << (LOGIN - 266)) | (1L << (LOOP - 266)) | (1L << (MARK - 266)) | (1L << (MAX - 266)) | (1L << (MAXDOP - 266)) | (1L << (MAXRECURSION - 266)) | (1L << (MIN - 266)) | (1L << (MODIFY - 266)) | (1L << (NAME - 266)) | (1L << (NEXT - 266)) | (1L << (NOCOUNT - 266)) | (1L << (NOEXPAND - 266)) | (1L << (NORECOMPUTE - 266)) | (1L << (NTILE - 266)) | (1L << (NUMBER - 266)) | (1L << (OFFSET - 266)) | (1L << (ONLINE - 266)) | (1L << (ONLY - 266)) | (1L << (OPTIMISTIC - 266)) | (1L << (OPTIMIZE - 266)) | (1L << (OUT - 266)) | (1L << (OUTPUT - 266)) | (1L << (OWNER - 266)) | (1L << (PARAMETERIZATION - 266)) | (1L << (PARTITION - 266)) | (1L << (PATH - 266)) | (1L << (PRECEDING - 266)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (PRIOR - 330)) | (1L << (PRIVILEGES - 330)) | (1L << (RANGE - 330)) | (1L << (RANK - 330)) | (1L << (READONLY - 330)) | (1L << (READ_ONLY - 330)) | (1L << (RECOMPILE - 330)) | (1L << (RELATIVE - 330)) | (1L << (REMOTE - 330)) | (1L << (REPEATABLE - 330)) | (1L << (ROBUST - 330)) | (1L << (ROOT - 330)) | (1L << (ROW - 330)) | (1L << (ROWGUID - 330)) | (1L << (ROWS - 330)) | (1L << (ROW_NUMBER - 330)) | (1L << (SAMPLE - 330)) | (1L << (SCHEMABINDING - 330)) | (1L << (SCROLL - 330)) | (1L << (SCROLL_LOCKS - 330)) | (1L << (SELF - 330)) | (1L << (SERIALIZABLE - 330)) | (1L << (SIMPLE - 330)) | (1L << (SNAPSHOT - 330)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 330)) | (1L << (STATIC - 330)) | (1L << (STATS_STREAM - 330)) | (1L << (STDEV - 330)) | (1L << (STDEVP - 330)) | (1L << (SUM - 330)) | (1L << (TEXTIMAGE_ON - 330)) | (1L << (THROW - 330)) | (1L << (TIES - 330)) | (1L << (TIME - 330)) | (1L << (TRY - 330)) | (1L << (TYPE - 330)) | (1L << (TYPE_WARNING - 330)) | (1L << (UNBOUNDED - 330)) | (1L << (UNCOMMITTED - 330)) | (1L << (UNKNOWN - 330)) | (1L << (USING - 330)) | (1L << (VAR - 330)) | (1L << (VARP - 330)) | (1L << (VIEWS - 330)) | (1L << (VIEW_METADATA - 330)) | (1L << (WORK - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (XML - 394)) | (1L << (XMLNAMESPACES - 394)) | (1L << (DOUBLE_QUOTE_ID - 394)) | (1L << (SQUARE_BRACKET_ID - 394)) | (1L << (ID - 394)) | (1L << (LR_BRACKET - 394)))) != 0)) {
				{
				{
				State = 334; batch();
				}
				}
				State = 339;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 340; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BatchContext : ParserRuleContext {
		public Sql_clausesContext sql_clauses() {
			return GetRuleContext<Sql_clausesContext>(0);
		}
		public Go_statementContext go_statement() {
			return GetRuleContext<Go_statementContext>(0);
		}
		public BatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_batch; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterBatch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitBatch(this);
		}
	}

	[RuleVersion(0)]
	public BatchContext batch() {
		BatchContext _localctx = new BatchContext(Context, State);
		EnterRule(_localctx, 2, RULE_batch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342; sql_clauses();
			State = 344;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 343; go_statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_clausesContext : ParserRuleContext {
		public Sql_clauseContext[] sql_clause() {
			return GetRuleContexts<Sql_clauseContext>();
		}
		public Sql_clauseContext sql_clause(int i) {
			return GetRuleContext<Sql_clauseContext>(i);
		}
		public ITerminalNode[] SEMI() { return GetTokens(tsqlParser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(tsqlParser.SEMI, i);
		}
		public Sql_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_clauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSql_clauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSql_clauses(this);
		}
	}

	[RuleVersion(0)]
	public Sql_clausesContext sql_clauses() {
		Sql_clausesContext _localctx = new Sql_clausesContext(Context, State);
		EnterRule(_localctx, 4, RULE_sql_clauses);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 346; sql_clause();
					State = 348;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						State = 347; Match(SEMI);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 352;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_clauseContext : ParserRuleContext {
		public Dml_clauseContext dml_clause() {
			return GetRuleContext<Dml_clauseContext>(0);
		}
		public Ddl_clauseContext ddl_clause() {
			return GetRuleContext<Ddl_clauseContext>(0);
		}
		public Cfl_statementContext cfl_statement() {
			return GetRuleContext<Cfl_statementContext>(0);
		}
		public Another_statementContext another_statement() {
			return GetRuleContext<Another_statementContext>(0);
		}
		public Sql_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSql_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSql_clause(this);
		}
	}

	[RuleVersion(0)]
	public Sql_clauseContext sql_clause() {
		Sql_clauseContext _localctx = new Sql_clauseContext(Context, State);
		EnterRule(_localctx, 6, RULE_sql_clause);
		try {
			State = 358;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 354; dml_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 355; ddl_clause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 356; cfl_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 357; another_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_clauseContext : ParserRuleContext {
		public Delete_statementContext delete_statement() {
			return GetRuleContext<Delete_statementContext>(0);
		}
		public Insert_statementContext insert_statement() {
			return GetRuleContext<Insert_statementContext>(0);
		}
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Update_statementContext update_statement() {
			return GetRuleContext<Update_statementContext>(0);
		}
		public Dml_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDml_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDml_clause(this);
		}
	}

	[RuleVersion(0)]
	public Dml_clauseContext dml_clause() {
		Dml_clauseContext _localctx = new Dml_clauseContext(Context, State);
		EnterRule(_localctx, 8, RULE_dml_clause);
		try {
			State = 364;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 360; delete_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 361; insert_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 362; select_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 363; update_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_clauseContext : ParserRuleContext {
		public Create_databaseContext create_database() {
			return GetRuleContext<Create_databaseContext>(0);
		}
		public Create_indexContext create_index() {
			return GetRuleContext<Create_indexContext>(0);
		}
		public Create_procedureContext create_procedure() {
			return GetRuleContext<Create_procedureContext>(0);
		}
		public Create_statisticsContext create_statistics() {
			return GetRuleContext<Create_statisticsContext>(0);
		}
		public Create_tableContext create_table() {
			return GetRuleContext<Create_tableContext>(0);
		}
		public Create_typeContext create_type() {
			return GetRuleContext<Create_typeContext>(0);
		}
		public Create_viewContext create_view() {
			return GetRuleContext<Create_viewContext>(0);
		}
		public Alter_tableContext alter_table() {
			return GetRuleContext<Alter_tableContext>(0);
		}
		public Alter_databaseContext alter_database() {
			return GetRuleContext<Alter_databaseContext>(0);
		}
		public Drop_indexContext drop_index() {
			return GetRuleContext<Drop_indexContext>(0);
		}
		public Drop_procedureContext drop_procedure() {
			return GetRuleContext<Drop_procedureContext>(0);
		}
		public Drop_statisticsContext drop_statistics() {
			return GetRuleContext<Drop_statisticsContext>(0);
		}
		public Drop_tableContext drop_table() {
			return GetRuleContext<Drop_tableContext>(0);
		}
		public Drop_typeContext drop_type() {
			return GetRuleContext<Drop_typeContext>(0);
		}
		public Drop_viewContext drop_view() {
			return GetRuleContext<Drop_viewContext>(0);
		}
		public Ddl_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDdl_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDdl_clause(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_clauseContext ddl_clause() {
		Ddl_clauseContext _localctx = new Ddl_clauseContext(Context, State);
		EnterRule(_localctx, 10, RULE_ddl_clause);
		try {
			State = 381;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 366; create_database();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 367; create_index();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 368; create_procedure();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 369; create_statistics();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 370; create_table();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 371; create_type();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 372; create_view();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 373; alter_table();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 374; alter_database();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 375; drop_index();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 376; drop_procedure();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 377; drop_statistics();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 378; drop_table();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 379; drop_type();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 380; drop_view();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cfl_statementContext : ParserRuleContext {
		public Cfl_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cfl_statement; } }
	 
		public Cfl_statementContext() { }
		public virtual void CopyFrom(Cfl_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Waitfor_statementContext : Cfl_statementContext {
		public ITerminalNode WAITFOR() { return GetToken(tsqlParser.WAITFOR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DELAY() { return GetToken(tsqlParser.DELAY, 0); }
		public ITerminalNode TIME() { return GetToken(tsqlParser.TIME, 0); }
		public Waitfor_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterWaitfor_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitWaitfor_statement(this);
		}
	}
	public partial class Print_statementContext : Cfl_statementContext {
		public ITerminalNode PRINT() { return GetToken(tsqlParser.PRINT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Print_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterPrint_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitPrint_statement(this);
		}
	}
	public partial class Continue_statementContext : Cfl_statementContext {
		public ITerminalNode CONTINUE() { return GetToken(tsqlParser.CONTINUE, 0); }
		public Continue_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterContinue_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitContinue_statement(this);
		}
	}
	public partial class If_statementContext : Cfl_statementContext {
		public ITerminalNode IF() { return GetToken(tsqlParser.IF, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Sql_clauseContext[] sql_clause() {
			return GetRuleContexts<Sql_clauseContext>();
		}
		public Sql_clauseContext sql_clause(int i) {
			return GetRuleContext<Sql_clauseContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(tsqlParser.ELSE, 0); }
		public If_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}
	public partial class Raiseerror_statementContext : Cfl_statementContext {
		public IToken msg;
		public Constant_LOCAL_IDContext severity;
		public Constant_LOCAL_IDContext state;
		public ITerminalNode RAISERROR() { return GetToken(tsqlParser.RAISERROR, 0); }
		public Constant_LOCAL_IDContext[] constant_LOCAL_ID() {
			return GetRuleContexts<Constant_LOCAL_IDContext>();
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID(int i) {
			return GetRuleContext<Constant_LOCAL_IDContext>(i);
		}
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Raiseerror_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterRaiseerror_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitRaiseerror_statement(this);
		}
	}
	public partial class Throw_statementContext : Cfl_statementContext {
		public IToken error_number;
		public IToken message;
		public IToken state;
		public ITerminalNode THROW() { return GetToken(tsqlParser.THROW, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(tsqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(tsqlParser.DECIMAL, i);
		}
		public ITerminalNode[] LOCAL_ID() { return GetTokens(tsqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(tsqlParser.LOCAL_ID, i);
		}
		public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public Throw_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterThrow_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitThrow_statement(this);
		}
	}
	public partial class Try_catch_statementContext : Cfl_statementContext {
		public Sql_clausesContext try_clauses;
		public Sql_clausesContext catch_clauses;
		public ITerminalNode[] BEGIN() { return GetTokens(tsqlParser.BEGIN); }
		public ITerminalNode BEGIN(int i) {
			return GetToken(tsqlParser.BEGIN, i);
		}
		public ITerminalNode[] TRY() { return GetTokens(tsqlParser.TRY); }
		public ITerminalNode TRY(int i) {
			return GetToken(tsqlParser.TRY, i);
		}
		public ITerminalNode[] END() { return GetTokens(tsqlParser.END); }
		public ITerminalNode END(int i) {
			return GetToken(tsqlParser.END, i);
		}
		public ITerminalNode[] CATCH() { return GetTokens(tsqlParser.CATCH); }
		public ITerminalNode CATCH(int i) {
			return GetToken(tsqlParser.CATCH, i);
		}
		public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public Try_catch_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTry_catch_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTry_catch_statement(this);
		}
	}
	public partial class While_statementContext : Cfl_statementContext {
		public ITerminalNode WHILE() { return GetToken(tsqlParser.WHILE, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Sql_clauseContext sql_clause() {
			return GetRuleContext<Sql_clauseContext>(0);
		}
		public ITerminalNode BREAK() { return GetToken(tsqlParser.BREAK, 0); }
		public ITerminalNode CONTINUE() { return GetToken(tsqlParser.CONTINUE, 0); }
		public While_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
	}
	public partial class Block_statementContext : Cfl_statementContext {
		public ITerminalNode BEGIN() { return GetToken(tsqlParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(tsqlParser.END, 0); }
		public Sql_clausesContext sql_clauses() {
			return GetRuleContext<Sql_clausesContext>(0);
		}
		public Block_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterBlock_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitBlock_statement(this);
		}
	}
	public partial class Break_statementContext : Cfl_statementContext {
		public ITerminalNode BREAK() { return GetToken(tsqlParser.BREAK, 0); }
		public Break_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterBreak_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitBreak_statement(this);
		}
	}
	public partial class Goto_statementContext : Cfl_statementContext {
		public ITerminalNode GOTO() { return GetToken(tsqlParser.GOTO, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Goto_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterGoto_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitGoto_statement(this);
		}
	}
	public partial class Return_statementContext : Cfl_statementContext {
		public ITerminalNode RETURN() { return GetToken(tsqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
	}

	[RuleVersion(0)]
	public Cfl_statementContext cfl_statement() {
		Cfl_statementContext _localctx = new Cfl_statementContext(Context, State);
		EnterRule(_localctx, 12, RULE_cfl_statement);
		int _la;
		try {
			State = 508;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				_localctx = new Block_statementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 383; Match(BEGIN);
				State = 385;
				_la = TokenStream.La(1);
				if (_la==SEMI) {
					{
					State = 384; Match(SEMI);
					}
				}

				State = 388;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << BEGIN) | (1L << BREAK) | (1L << CLOSE) | (1L << COMMIT) | (1L << CONTINUE) | (1L << CREATE) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DELETE) | (1L << DROP) | (1L << EXECUTE))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (FETCH - 67)) | (1L << (FORCESEEK - 67)) | (1L << (GOTO - 67)) | (1L << (GRANT - 67)) | (1L << (IF - 67)) | (1L << (INSERT - 67)) | (1L << (OPEN - 67)) | (1L << (PRINT - 67)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (RAISERROR - 134)) | (1L << (RETURN - 134)) | (1L << (REVERT - 134)) | (1L << (ROLLBACK - 134)) | (1L << (SAVE - 134)) | (1L << (SELECT - 134)) | (1L << (SET - 134)) | (1L << (UPDATE - 134)) | (1L << (USE - 134)) | (1L << (WAITFOR - 134)) | (1L << (WHILE - 134)) | (1L << (WITH - 134)) | (1L << (ABSOLUTE - 134)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (APPLY - 201)) | (1L << (AUTO - 201)) | (1L << (AVG - 201)) | (1L << (BASE64 - 201)) | (1L << (CALLER - 201)) | (1L << (CAST - 201)) | (1L << (CATCH - 201)) | (1L << (CHECKSUM_AGG - 201)) | (1L << (COMMITTED - 201)) | (1L << (CONCAT - 201)) | (1L << (CONTROL - 201)) | (1L << (COOKIE - 201)) | (1L << (COUNT - 201)) | (1L << (COUNT_BIG - 201)) | (1L << (DELAY - 201)) | (1L << (DELETED - 201)) | (1L << (DENSE_RANK - 201)) | (1L << (DISABLE - 201)) | (1L << (DYNAMIC - 201)) | (1L << (ENCRYPTION - 201)) | (1L << (EXPAND - 201)) | (1L << (FAST - 201)) | (1L << (FAST_FORWARD - 201)) | (1L << (FIRST - 201)) | (1L << (FOLLOWING - 201)) | (1L << (FORCE - 201)) | (1L << (FORCED - 201)) | (1L << (FORWARD_ONLY - 201)) | (1L << (FULLSCAN - 201)))) != 0) || ((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & ((1L << (GLOBAL - 266)) | (1L << (GO - 266)) | (1L << (GROUPING - 266)) | (1L << (GROUPING_ID - 266)) | (1L << (HASH - 266)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 266)) | (1L << (IMPERSONATE - 266)) | (1L << (INSENSITIVE - 266)) | (1L << (INSERTED - 266)) | (1L << (ISOLATION - 266)) | (1L << (KEEP - 266)) | (1L << (KEEPFIXED - 266)) | (1L << (KEYSET - 266)) | (1L << (LAST - 266)) | (1L << (LEVEL - 266)) | (1L << (LOCAL - 266)) | (1L << (LOCK_ESCALATION - 266)) | (1L << (LOGIN - 266)) | (1L << (LOOP - 266)) | (1L << (MARK - 266)) | (1L << (MAX - 266)) | (1L << (MAXDOP - 266)) | (1L << (MAXRECURSION - 266)) | (1L << (MIN - 266)) | (1L << (MODIFY - 266)) | (1L << (NAME - 266)) | (1L << (NEXT - 266)) | (1L << (NOCOUNT - 266)) | (1L << (NOEXPAND - 266)) | (1L << (NORECOMPUTE - 266)) | (1L << (NTILE - 266)) | (1L << (NUMBER - 266)) | (1L << (OFFSET - 266)) | (1L << (ONLINE - 266)) | (1L << (ONLY - 266)) | (1L << (OPTIMISTIC - 266)) | (1L << (OPTIMIZE - 266)) | (1L << (OUT - 266)) | (1L << (OUTPUT - 266)) | (1L << (OWNER - 266)) | (1L << (PARAMETERIZATION - 266)) | (1L << (PARTITION - 266)) | (1L << (PATH - 266)) | (1L << (PRECEDING - 266)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (PRIOR - 330)) | (1L << (PRIVILEGES - 330)) | (1L << (RANGE - 330)) | (1L << (RANK - 330)) | (1L << (READONLY - 330)) | (1L << (READ_ONLY - 330)) | (1L << (RECOMPILE - 330)) | (1L << (RELATIVE - 330)) | (1L << (REMOTE - 330)) | (1L << (REPEATABLE - 330)) | (1L << (ROBUST - 330)) | (1L << (ROOT - 330)) | (1L << (ROW - 330)) | (1L << (ROWGUID - 330)) | (1L << (ROWS - 330)) | (1L << (ROW_NUMBER - 330)) | (1L << (SAMPLE - 330)) | (1L << (SCHEMABINDING - 330)) | (1L << (SCROLL - 330)) | (1L << (SCROLL_LOCKS - 330)) | (1L << (SELF - 330)) | (1L << (SERIALIZABLE - 330)) | (1L << (SIMPLE - 330)) | (1L << (SNAPSHOT - 330)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 330)) | (1L << (STATIC - 330)) | (1L << (STATS_STREAM - 330)) | (1L << (STDEV - 330)) | (1L << (STDEVP - 330)) | (1L << (SUM - 330)) | (1L << (TEXTIMAGE_ON - 330)) | (1L << (THROW - 330)) | (1L << (TIES - 330)) | (1L << (TIME - 330)) | (1L << (TRY - 330)) | (1L << (TYPE - 330)) | (1L << (TYPE_WARNING - 330)) | (1L << (UNBOUNDED - 330)) | (1L << (UNCOMMITTED - 330)) | (1L << (UNKNOWN - 330)) | (1L << (USING - 330)) | (1L << (VAR - 330)) | (1L << (VARP - 330)) | (1L << (VIEWS - 330)) | (1L << (VIEW_METADATA - 330)) | (1L << (WORK - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (XML - 394)) | (1L << (XMLNAMESPACES - 394)) | (1L << (DOUBLE_QUOTE_ID - 394)) | (1L << (SQUARE_BRACKET_ID - 394)) | (1L << (ID - 394)) | (1L << (LR_BRACKET - 394)))) != 0)) {
					{
					State = 387; sql_clauses();
					}
				}

				State = 390; Match(END);
				State = 392;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 391; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new Break_statementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 394; Match(BREAK);
				State = 396;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 395; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new Continue_statementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 398; Match(CONTINUE);
				State = 400;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 399; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new Goto_statementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 402; Match(GOTO);
				State = 403; id();
				State = 405;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 404; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new Goto_statementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 407; id();
				State = 408; Match(COLON);
				State = 410;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 409; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 6:
				_localctx = new If_statementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 412; Match(IF);
				State = 413; search_condition();
				State = 414; sql_clause();
				State = 417;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 415; Match(ELSE);
					State = 416; sql_clause();
					}
					break;
				}
				State = 420;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 419; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 7:
				_localctx = new Return_statementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 422; Match(RETURN);
				State = 424;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 423; expression(0);
					}
					break;
				}
				State = 427;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 426; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 8:
				_localctx = new Throw_statementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 429; Match(THROW);
				State = 435;
				_la = TokenStream.La(1);
				if (_la==LOCAL_ID || _la==DECIMAL) {
					{
					State = 430;
					((Throw_statementContext)_localctx).error_number = TokenStream.Lt(1);
					_la = TokenStream.La(1);
					if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
						((Throw_statementContext)_localctx).error_number = ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					State = 431; Match(COMMA);
					State = 432;
					((Throw_statementContext)_localctx).message = TokenStream.Lt(1);
					_la = TokenStream.La(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						((Throw_statementContext)_localctx).message = ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					State = 433; Match(COMMA);
					State = 434;
					((Throw_statementContext)_localctx).state = TokenStream.Lt(1);
					_la = TokenStream.La(1);
					if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
						((Throw_statementContext)_localctx).state = ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
				}

				State = 438;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 437; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 9:
				_localctx = new Try_catch_statementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 440; Match(BEGIN);
				State = 441; Match(TRY);
				State = 443;
				_la = TokenStream.La(1);
				if (_la==SEMI) {
					{
					State = 442; Match(SEMI);
					}
				}

				State = 446;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << BEGIN) | (1L << BREAK) | (1L << CLOSE) | (1L << COMMIT) | (1L << CONTINUE) | (1L << CREATE) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DELETE) | (1L << DROP) | (1L << EXECUTE))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (FETCH - 67)) | (1L << (FORCESEEK - 67)) | (1L << (GOTO - 67)) | (1L << (GRANT - 67)) | (1L << (IF - 67)) | (1L << (INSERT - 67)) | (1L << (OPEN - 67)) | (1L << (PRINT - 67)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (RAISERROR - 134)) | (1L << (RETURN - 134)) | (1L << (REVERT - 134)) | (1L << (ROLLBACK - 134)) | (1L << (SAVE - 134)) | (1L << (SELECT - 134)) | (1L << (SET - 134)) | (1L << (UPDATE - 134)) | (1L << (USE - 134)) | (1L << (WAITFOR - 134)) | (1L << (WHILE - 134)) | (1L << (WITH - 134)) | (1L << (ABSOLUTE - 134)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (APPLY - 201)) | (1L << (AUTO - 201)) | (1L << (AVG - 201)) | (1L << (BASE64 - 201)) | (1L << (CALLER - 201)) | (1L << (CAST - 201)) | (1L << (CATCH - 201)) | (1L << (CHECKSUM_AGG - 201)) | (1L << (COMMITTED - 201)) | (1L << (CONCAT - 201)) | (1L << (CONTROL - 201)) | (1L << (COOKIE - 201)) | (1L << (COUNT - 201)) | (1L << (COUNT_BIG - 201)) | (1L << (DELAY - 201)) | (1L << (DELETED - 201)) | (1L << (DENSE_RANK - 201)) | (1L << (DISABLE - 201)) | (1L << (DYNAMIC - 201)) | (1L << (ENCRYPTION - 201)) | (1L << (EXPAND - 201)) | (1L << (FAST - 201)) | (1L << (FAST_FORWARD - 201)) | (1L << (FIRST - 201)) | (1L << (FOLLOWING - 201)) | (1L << (FORCE - 201)) | (1L << (FORCED - 201)) | (1L << (FORWARD_ONLY - 201)) | (1L << (FULLSCAN - 201)))) != 0) || ((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & ((1L << (GLOBAL - 266)) | (1L << (GO - 266)) | (1L << (GROUPING - 266)) | (1L << (GROUPING_ID - 266)) | (1L << (HASH - 266)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 266)) | (1L << (IMPERSONATE - 266)) | (1L << (INSENSITIVE - 266)) | (1L << (INSERTED - 266)) | (1L << (ISOLATION - 266)) | (1L << (KEEP - 266)) | (1L << (KEEPFIXED - 266)) | (1L << (KEYSET - 266)) | (1L << (LAST - 266)) | (1L << (LEVEL - 266)) | (1L << (LOCAL - 266)) | (1L << (LOCK_ESCALATION - 266)) | (1L << (LOGIN - 266)) | (1L << (LOOP - 266)) | (1L << (MARK - 266)) | (1L << (MAX - 266)) | (1L << (MAXDOP - 266)) | (1L << (MAXRECURSION - 266)) | (1L << (MIN - 266)) | (1L << (MODIFY - 266)) | (1L << (NAME - 266)) | (1L << (NEXT - 266)) | (1L << (NOCOUNT - 266)) | (1L << (NOEXPAND - 266)) | (1L << (NORECOMPUTE - 266)) | (1L << (NTILE - 266)) | (1L << (NUMBER - 266)) | (1L << (OFFSET - 266)) | (1L << (ONLINE - 266)) | (1L << (ONLY - 266)) | (1L << (OPTIMISTIC - 266)) | (1L << (OPTIMIZE - 266)) | (1L << (OUT - 266)) | (1L << (OUTPUT - 266)) | (1L << (OWNER - 266)) | (1L << (PARAMETERIZATION - 266)) | (1L << (PARTITION - 266)) | (1L << (PATH - 266)) | (1L << (PRECEDING - 266)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (PRIOR - 330)) | (1L << (PRIVILEGES - 330)) | (1L << (RANGE - 330)) | (1L << (RANK - 330)) | (1L << (READONLY - 330)) | (1L << (READ_ONLY - 330)) | (1L << (RECOMPILE - 330)) | (1L << (RELATIVE - 330)) | (1L << (REMOTE - 330)) | (1L << (REPEATABLE - 330)) | (1L << (ROBUST - 330)) | (1L << (ROOT - 330)) | (1L << (ROW - 330)) | (1L << (ROWGUID - 330)) | (1L << (ROWS - 330)) | (1L << (ROW_NUMBER - 330)) | (1L << (SAMPLE - 330)) | (1L << (SCHEMABINDING - 330)) | (1L << (SCROLL - 330)) | (1L << (SCROLL_LOCKS - 330)) | (1L << (SELF - 330)) | (1L << (SERIALIZABLE - 330)) | (1L << (SIMPLE - 330)) | (1L << (SNAPSHOT - 330)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 330)) | (1L << (STATIC - 330)) | (1L << (STATS_STREAM - 330)) | (1L << (STDEV - 330)) | (1L << (STDEVP - 330)) | (1L << (SUM - 330)) | (1L << (TEXTIMAGE_ON - 330)) | (1L << (THROW - 330)) | (1L << (TIES - 330)) | (1L << (TIME - 330)) | (1L << (TRY - 330)) | (1L << (TYPE - 330)) | (1L << (TYPE_WARNING - 330)) | (1L << (UNBOUNDED - 330)) | (1L << (UNCOMMITTED - 330)) | (1L << (UNKNOWN - 330)) | (1L << (USING - 330)) | (1L << (VAR - 330)) | (1L << (VARP - 330)) | (1L << (VIEWS - 330)) | (1L << (VIEW_METADATA - 330)) | (1L << (WORK - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (XML - 394)) | (1L << (XMLNAMESPACES - 394)) | (1L << (DOUBLE_QUOTE_ID - 394)) | (1L << (SQUARE_BRACKET_ID - 394)) | (1L << (ID - 394)) | (1L << (LR_BRACKET - 394)))) != 0)) {
					{
					State = 445; ((Try_catch_statementContext)_localctx).try_clauses = sql_clauses();
					}
				}

				State = 448; Match(END);
				State = 449; Match(TRY);
				State = 451;
				_la = TokenStream.La(1);
				if (_la==SEMI) {
					{
					State = 450; Match(SEMI);
					}
				}

				State = 453; Match(BEGIN);
				State = 454; Match(CATCH);
				State = 456;
				_la = TokenStream.La(1);
				if (_la==SEMI) {
					{
					State = 455; Match(SEMI);
					}
				}

				State = 459;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << BEGIN) | (1L << BREAK) | (1L << CLOSE) | (1L << COMMIT) | (1L << CONTINUE) | (1L << CREATE) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DELETE) | (1L << DROP) | (1L << EXECUTE))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (FETCH - 67)) | (1L << (FORCESEEK - 67)) | (1L << (GOTO - 67)) | (1L << (GRANT - 67)) | (1L << (IF - 67)) | (1L << (INSERT - 67)) | (1L << (OPEN - 67)) | (1L << (PRINT - 67)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (RAISERROR - 134)) | (1L << (RETURN - 134)) | (1L << (REVERT - 134)) | (1L << (ROLLBACK - 134)) | (1L << (SAVE - 134)) | (1L << (SELECT - 134)) | (1L << (SET - 134)) | (1L << (UPDATE - 134)) | (1L << (USE - 134)) | (1L << (WAITFOR - 134)) | (1L << (WHILE - 134)) | (1L << (WITH - 134)) | (1L << (ABSOLUTE - 134)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (APPLY - 201)) | (1L << (AUTO - 201)) | (1L << (AVG - 201)) | (1L << (BASE64 - 201)) | (1L << (CALLER - 201)) | (1L << (CAST - 201)) | (1L << (CATCH - 201)) | (1L << (CHECKSUM_AGG - 201)) | (1L << (COMMITTED - 201)) | (1L << (CONCAT - 201)) | (1L << (CONTROL - 201)) | (1L << (COOKIE - 201)) | (1L << (COUNT - 201)) | (1L << (COUNT_BIG - 201)) | (1L << (DELAY - 201)) | (1L << (DELETED - 201)) | (1L << (DENSE_RANK - 201)) | (1L << (DISABLE - 201)) | (1L << (DYNAMIC - 201)) | (1L << (ENCRYPTION - 201)) | (1L << (EXPAND - 201)) | (1L << (FAST - 201)) | (1L << (FAST_FORWARD - 201)) | (1L << (FIRST - 201)) | (1L << (FOLLOWING - 201)) | (1L << (FORCE - 201)) | (1L << (FORCED - 201)) | (1L << (FORWARD_ONLY - 201)) | (1L << (FULLSCAN - 201)))) != 0) || ((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & ((1L << (GLOBAL - 266)) | (1L << (GO - 266)) | (1L << (GROUPING - 266)) | (1L << (GROUPING_ID - 266)) | (1L << (HASH - 266)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 266)) | (1L << (IMPERSONATE - 266)) | (1L << (INSENSITIVE - 266)) | (1L << (INSERTED - 266)) | (1L << (ISOLATION - 266)) | (1L << (KEEP - 266)) | (1L << (KEEPFIXED - 266)) | (1L << (KEYSET - 266)) | (1L << (LAST - 266)) | (1L << (LEVEL - 266)) | (1L << (LOCAL - 266)) | (1L << (LOCK_ESCALATION - 266)) | (1L << (LOGIN - 266)) | (1L << (LOOP - 266)) | (1L << (MARK - 266)) | (1L << (MAX - 266)) | (1L << (MAXDOP - 266)) | (1L << (MAXRECURSION - 266)) | (1L << (MIN - 266)) | (1L << (MODIFY - 266)) | (1L << (NAME - 266)) | (1L << (NEXT - 266)) | (1L << (NOCOUNT - 266)) | (1L << (NOEXPAND - 266)) | (1L << (NORECOMPUTE - 266)) | (1L << (NTILE - 266)) | (1L << (NUMBER - 266)) | (1L << (OFFSET - 266)) | (1L << (ONLINE - 266)) | (1L << (ONLY - 266)) | (1L << (OPTIMISTIC - 266)) | (1L << (OPTIMIZE - 266)) | (1L << (OUT - 266)) | (1L << (OUTPUT - 266)) | (1L << (OWNER - 266)) | (1L << (PARAMETERIZATION - 266)) | (1L << (PARTITION - 266)) | (1L << (PATH - 266)) | (1L << (PRECEDING - 266)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (PRIOR - 330)) | (1L << (PRIVILEGES - 330)) | (1L << (RANGE - 330)) | (1L << (RANK - 330)) | (1L << (READONLY - 330)) | (1L << (READ_ONLY - 330)) | (1L << (RECOMPILE - 330)) | (1L << (RELATIVE - 330)) | (1L << (REMOTE - 330)) | (1L << (REPEATABLE - 330)) | (1L << (ROBUST - 330)) | (1L << (ROOT - 330)) | (1L << (ROW - 330)) | (1L << (ROWGUID - 330)) | (1L << (ROWS - 330)) | (1L << (ROW_NUMBER - 330)) | (1L << (SAMPLE - 330)) | (1L << (SCHEMABINDING - 330)) | (1L << (SCROLL - 330)) | (1L << (SCROLL_LOCKS - 330)) | (1L << (SELF - 330)) | (1L << (SERIALIZABLE - 330)) | (1L << (SIMPLE - 330)) | (1L << (SNAPSHOT - 330)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 330)) | (1L << (STATIC - 330)) | (1L << (STATS_STREAM - 330)) | (1L << (STDEV - 330)) | (1L << (STDEVP - 330)) | (1L << (SUM - 330)) | (1L << (TEXTIMAGE_ON - 330)) | (1L << (THROW - 330)) | (1L << (TIES - 330)) | (1L << (TIME - 330)) | (1L << (TRY - 330)) | (1L << (TYPE - 330)) | (1L << (TYPE_WARNING - 330)) | (1L << (UNBOUNDED - 330)) | (1L << (UNCOMMITTED - 330)) | (1L << (UNKNOWN - 330)) | (1L << (USING - 330)) | (1L << (VAR - 330)) | (1L << (VARP - 330)) | (1L << (VIEWS - 330)) | (1L << (VIEW_METADATA - 330)) | (1L << (WORK - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (XML - 394)) | (1L << (XMLNAMESPACES - 394)) | (1L << (DOUBLE_QUOTE_ID - 394)) | (1L << (SQUARE_BRACKET_ID - 394)) | (1L << (ID - 394)) | (1L << (LR_BRACKET - 394)))) != 0)) {
					{
					State = 458; ((Try_catch_statementContext)_localctx).catch_clauses = sql_clauses();
					}
				}

				State = 461; Match(END);
				State = 462; Match(CATCH);
				State = 464;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 463; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 10:
				_localctx = new Waitfor_statementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 466; Match(WAITFOR);
				State = 467;
				_la = TokenStream.La(1);
				if ( !(_la==DELAY || _la==TIME) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 468; expression(0);
				State = 470;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
				case 1:
					{
					State = 469; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 11:
				_localctx = new While_statementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 472; Match(WHILE);
				State = 473; search_condition();
				State = 483;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 474; sql_clause();
					}
					break;
				case 2:
					{
					State = 475; Match(BREAK);
					State = 477;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
					case 1:
						{
						State = 476; Match(SEMI);
						}
						break;
					}
					}
					break;
				case 3:
					{
					State = 479; Match(CONTINUE);
					State = 481;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						State = 480; Match(SEMI);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 12:
				_localctx = new Print_statementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 485; Match(PRINT);
				State = 486; expression(0);
				State = 488;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 487; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 13:
				_localctx = new Raiseerror_statementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 490; Match(RAISERROR);
				State = 491; Match(LR_BRACKET);
				State = 492;
				((Raiseerror_statementContext)_localctx).msg = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(((((_la - 402)) & ~0x3f) == 0 && ((1L << (_la - 402)) & ((1L << (LOCAL_ID - 402)) | (1L << (DECIMAL - 402)) | (1L << (STRING - 402)))) != 0)) ) {
					((Raiseerror_statementContext)_localctx).msg = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 493; Match(COMMA);
				State = 494; ((Raiseerror_statementContext)_localctx).severity = constant_LOCAL_ID();
				State = 495; Match(COMMA);
				State = 496; ((Raiseerror_statementContext)_localctx).state = constant_LOCAL_ID();
				State = 501;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 497; Match(COMMA);
					State = 498; constant_LOCAL_ID();
					}
					}
					State = 503;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 504; Match(RR_BRACKET);
				State = 506;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 505; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Another_statementContext : ParserRuleContext {
		public Declare_statementContext declare_statement() {
			return GetRuleContext<Declare_statementContext>(0);
		}
		public Cursor_statementContext cursor_statement() {
			return GetRuleContext<Cursor_statementContext>(0);
		}
		public Execute_statementContext execute_statement() {
			return GetRuleContext<Execute_statementContext>(0);
		}
		public Security_statementContext security_statement() {
			return GetRuleContext<Security_statementContext>(0);
		}
		public Set_statementContext set_statement() {
			return GetRuleContext<Set_statementContext>(0);
		}
		public Transaction_statementContext transaction_statement() {
			return GetRuleContext<Transaction_statementContext>(0);
		}
		public Use_statementContext use_statement() {
			return GetRuleContext<Use_statementContext>(0);
		}
		public Another_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_another_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterAnother_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitAnother_statement(this);
		}
	}

	[RuleVersion(0)]
	public Another_statementContext another_statement() {
		Another_statementContext _localctx = new Another_statementContext(Context, State);
		EnterRule(_localctx, 14, RULE_another_statement);
		try {
			State = 517;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 510; declare_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 511; cursor_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 512; execute_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 513; security_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 514; set_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 515; transaction_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 516; use_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_statementContext : ParserRuleContext {
		public IToken cursor_var;
		public ITerminalNode DELETE() { return GetToken(tsqlParser.DELETE, 0); }
		public Delete_statement_fromContext delete_statement_from() {
			return GetRuleContext<Delete_statement_fromContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(tsqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode[] FROM() { return GetTokens(tsqlParser.FROM); }
		public ITerminalNode FROM(int i) {
			return GetToken(tsqlParser.FROM, i);
		}
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return GetRuleContext<Insert_with_table_hintsContext>(0);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(tsqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode CURRENT() { return GetToken(tsqlParser.CURRENT, 0); }
		public ITerminalNode OF() { return GetToken(tsqlParser.OF, 0); }
		public ITerminalNode PERCENT() { return GetToken(tsqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public ITerminalNode GLOBAL() { return GetToken(tsqlParser.GLOBAL, 0); }
		public Delete_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDelete_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDelete_statement(this);
		}
	}

	[RuleVersion(0)]
	public Delete_statementContext delete_statement() {
		Delete_statementContext _localctx = new Delete_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_delete_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 520;
			_la = TokenStream.La(1);
			if (_la==WITH) {
				{
				State = 519; with_expression();
				}
			}

			State = 522; Match(DELETE);
			State = 530;
			_la = TokenStream.La(1);
			if (_la==TOP) {
				{
				State = 523; Match(TOP);
				State = 524; Match(LR_BRACKET);
				State = 525; expression(0);
				State = 526; Match(RR_BRACKET);
				State = 528;
				_la = TokenStream.La(1);
				if (_la==PERCENT) {
					{
					State = 527; Match(PERCENT);
					}
				}

				}
			}

			State = 533;
			_la = TokenStream.La(1);
			if (_la==FROM) {
				{
				State = 532; Match(FROM);
				}
			}

			State = 535; delete_statement_from();
			State = 537;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 536; insert_with_table_hints();
				}
				break;
			}
			State = 540;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 539; output_clause();
				}
				break;
			}
			State = 544;
			_la = TokenStream.La(1);
			if (_la==FROM) {
				{
				State = 542; Match(FROM);
				State = 543; table_sources();
				}
			}

			State = 559;
			_la = TokenStream.La(1);
			if (_la==WHERE) {
				{
				State = 546; Match(WHERE);
				State = 557;
				switch (TokenStream.La(1)) {
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case EXISTS:
				case FORCESEEK:
				case IDENTITY:
				case LEFT:
				case NOT:
				case NULL:
				case NULLIF:
				case OVER:
				case RIGHT:
				case SESSION_USER:
				case SYSTEM_USER:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case BINARY_CHECKSUM:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					State = 547; search_condition();
					}
					break;
				case CURRENT:
					{
					State = 548; Match(CURRENT);
					State = 549; Match(OF);
					State = 555;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
					case 1:
						{
						State = 551;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
						case 1:
							{
							State = 550; Match(GLOBAL);
							}
							break;
						}
						State = 553; cursor_name();
						}
						break;
					case 2:
						{
						State = 554; _localctx.cursor_var = Match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 562;
			_la = TokenStream.La(1);
			if (_la==FOR) {
				{
				State = 561; for_clause();
				}
			}

			State = 565;
			_la = TokenStream.La(1);
			if (_la==OPTION) {
				{
				State = 564; option_clause();
				}
			}

			State = 568;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 567; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_statement_fromContext : ParserRuleContext {
		public IToken table_var;
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Delete_statement_fromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_statement_from; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDelete_statement_from(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDelete_statement_from(this);
		}
	}

	[RuleVersion(0)]
	public Delete_statement_fromContext delete_statement_from() {
		Delete_statement_fromContext _localctx = new Delete_statement_fromContext(Context, State);
		EnterRule(_localctx, 18, RULE_delete_statement_from);
		try {
			State = 574;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 570; table_alias();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 571; ddl_object();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 572; rowset_function_limited();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 573; _localctx.table_var = Match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_statementContext : ParserRuleContext {
		public ITerminalNode INSERT() { return GetToken(tsqlParser.INSERT, 0); }
		public Insert_statement_valueContext insert_statement_value() {
			return GetRuleContext<Insert_statement_valueContext>(0);
		}
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(tsqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(tsqlParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return GetRuleContext<Insert_with_table_hintsContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public ITerminalNode PERCENT() { return GetToken(tsqlParser.PERCENT, 0); }
		public Insert_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterInsert_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitInsert_statement(this);
		}
	}

	[RuleVersion(0)]
	public Insert_statementContext insert_statement() {
		Insert_statementContext _localctx = new Insert_statementContext(Context, State);
		EnterRule(_localctx, 20, RULE_insert_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			_la = TokenStream.La(1);
			if (_la==WITH) {
				{
				State = 576; with_expression();
				}
			}

			State = 579; Match(INSERT);
			State = 587;
			_la = TokenStream.La(1);
			if (_la==TOP) {
				{
				State = 580; Match(TOP);
				State = 581; Match(LR_BRACKET);
				State = 582; expression(0);
				State = 583; Match(RR_BRACKET);
				State = 585;
				_la = TokenStream.La(1);
				if (_la==PERCENT) {
					{
					State = 584; Match(PERCENT);
					}
				}

				}
			}

			State = 590;
			_la = TokenStream.La(1);
			if (_la==INTO) {
				{
				State = 589; Match(INTO);
				}
			}

			State = 594;
			switch (TokenStream.La(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
				{
				State = 592; ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				State = 593; rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 597;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 596; insert_with_table_hints();
				}
				break;
			}
			State = 603;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 599; Match(LR_BRACKET);
				State = 600; column_name_list();
				State = 601; Match(RR_BRACKET);
				}
				break;
			}
			State = 606;
			_la = TokenStream.La(1);
			if (_la==OUTPUT) {
				{
				State = 605; output_clause();
				}
			}

			State = 608; insert_statement_value();
			State = 610;
			_la = TokenStream.La(1);
			if (_la==FOR) {
				{
				State = 609; for_clause();
				}
			}

			State = 613;
			_la = TokenStream.La(1);
			if (_la==OPTION) {
				{
				State = 612; option_clause();
				}
			}

			State = 616;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 615; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_statement_valueContext : ParserRuleContext {
		public Table_value_constructorContext table_value_constructor() {
			return GetRuleContext<Table_value_constructorContext>(0);
		}
		public Derived_tableContext derived_table() {
			return GetRuleContext<Derived_tableContext>(0);
		}
		public Execute_statementContext execute_statement() {
			return GetRuleContext<Execute_statementContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(tsqlParser.DEFAULT, 0); }
		public ITerminalNode VALUES() { return GetToken(tsqlParser.VALUES, 0); }
		public Insert_statement_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_statement_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterInsert_statement_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitInsert_statement_value(this);
		}
	}

	[RuleVersion(0)]
	public Insert_statement_valueContext insert_statement_value() {
		Insert_statement_valueContext _localctx = new Insert_statement_valueContext(Context, State);
		EnterRule(_localctx, 22, RULE_insert_statement_value);
		try {
			State = 623;
			switch (TokenStream.La(1)) {
			case VALUES:
				EnterOuterAlt(_localctx, 1);
				{
				State = 618; table_value_constructor();
				}
				break;
			case SELECT:
			case WITH:
			case LR_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 619; derived_table();
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 620; execute_statement();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 621; Match(DEFAULT);
				State = 622; Match(VALUES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_statementContext : ParserRuleContext {
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSelect_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSelect_statement(this);
		}
	}

	[RuleVersion(0)]
	public Select_statementContext select_statement() {
		Select_statementContext _localctx = new Select_statementContext(Context, State);
		EnterRule(_localctx, 24, RULE_select_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 626;
			_la = TokenStream.La(1);
			if (_la==WITH) {
				{
				State = 625; with_expression();
				}
			}

			State = 628; query_expression();
			State = 630;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 629; order_by_clause();
				}
				break;
			}
			State = 633;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				{
				State = 632; for_clause();
				}
				break;
			}
			State = 636;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				State = 635; option_clause();
				}
				break;
			}
			State = 639;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				{
				State = 638; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_statementContext : ParserRuleContext {
		public IToken cursor_var;
		public ITerminalNode UPDATE() { return GetToken(tsqlParser.UPDATE, 0); }
		public ITerminalNode SET() { return GetToken(tsqlParser.SET, 0); }
		public Update_elemContext[] update_elem() {
			return GetRuleContexts<Update_elemContext>();
		}
		public Update_elemContext update_elem(int i) {
			return GetRuleContext<Update_elemContext>(i);
		}
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(tsqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(tsqlParser.FROM, 0); }
		public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(tsqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public Search_condition_listContext search_condition_list() {
			return GetRuleContext<Search_condition_listContext>(0);
		}
		public ITerminalNode CURRENT() { return GetToken(tsqlParser.CURRENT, 0); }
		public ITerminalNode OF() { return GetToken(tsqlParser.OF, 0); }
		public ITerminalNode PERCENT() { return GetToken(tsqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public ITerminalNode GLOBAL() { return GetToken(tsqlParser.GLOBAL, 0); }
		public Update_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterUpdate_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitUpdate_statement(this);
		}
	}

	[RuleVersion(0)]
	public Update_statementContext update_statement() {
		Update_statementContext _localctx = new Update_statementContext(Context, State);
		EnterRule(_localctx, 26, RULE_update_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 642;
			_la = TokenStream.La(1);
			if (_la==WITH) {
				{
				State = 641; with_expression();
				}
			}

			State = 644; Match(UPDATE);
			State = 652;
			_la = TokenStream.La(1);
			if (_la==TOP) {
				{
				State = 645; Match(TOP);
				State = 646; Match(LR_BRACKET);
				State = 647; expression(0);
				State = 648; Match(RR_BRACKET);
				State = 650;
				_la = TokenStream.La(1);
				if (_la==PERCENT) {
					{
					State = 649; Match(PERCENT);
					}
				}

				}
			}

			State = 656;
			switch (TokenStream.La(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
				{
				State = 654; ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				State = 655; rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 659;
			_la = TokenStream.La(1);
			if (_la==WITH || _la==LR_BRACKET) {
				{
				State = 658; with_table_hints();
				}
			}

			State = 661; Match(SET);
			State = 662; update_elem();
			State = 667;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 663; Match(COMMA);
				State = 664; update_elem();
				}
				}
				State = 669;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 671;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 670; output_clause();
				}
				break;
			}
			State = 675;
			_la = TokenStream.La(1);
			if (_la==FROM) {
				{
				State = 673; Match(FROM);
				State = 674; table_sources();
				}
			}

			State = 690;
			_la = TokenStream.La(1);
			if (_la==WHERE) {
				{
				State = 677; Match(WHERE);
				State = 688;
				switch (TokenStream.La(1)) {
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case EXISTS:
				case FORCESEEK:
				case IDENTITY:
				case LEFT:
				case NOT:
				case NULL:
				case NULLIF:
				case OVER:
				case RIGHT:
				case SESSION_USER:
				case SYSTEM_USER:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case BINARY_CHECKSUM:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					State = 678; search_condition_list();
					}
					break;
				case CURRENT:
					{
					State = 679; Match(CURRENT);
					State = 680; Match(OF);
					State = 686;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
					case 1:
						{
						State = 682;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
						case 1:
							{
							State = 681; Match(GLOBAL);
							}
							break;
						}
						State = 684; cursor_name();
						}
						break;
					case 2:
						{
						State = 685; _localctx.cursor_var = Match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 693;
			_la = TokenStream.La(1);
			if (_la==FOR) {
				{
				State = 692; for_clause();
				}
			}

			State = 696;
			_la = TokenStream.La(1);
			if (_la==OPTION) {
				{
				State = 695; option_clause();
				}
			}

			State = 699;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				{
				State = 698; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_clauseContext : ParserRuleContext {
		public ITerminalNode OUTPUT() { return GetToken(tsqlParser.OUTPUT, 0); }
		public Output_dml_list_elemContext[] output_dml_list_elem() {
			return GetRuleContexts<Output_dml_list_elemContext>();
		}
		public Output_dml_list_elemContext output_dml_list_elem(int i) {
			return GetRuleContext<Output_dml_list_elemContext>(i);
		}
		public ITerminalNode INTO() { return GetToken(tsqlParser.INTO, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Output_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOutput_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOutput_clause(this);
		}
	}

	[RuleVersion(0)]
	public Output_clauseContext output_clause() {
		Output_clauseContext _localctx = new Output_clauseContext(Context, State);
		EnterRule(_localctx, 28, RULE_output_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 701; Match(OUTPUT);
			State = 702; output_dml_list_elem();
			State = 707;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 703; Match(COMMA);
				State = 704; output_dml_list_elem();
				}
				}
				State = 709;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 721;
			_la = TokenStream.La(1);
			if (_la==INTO) {
				{
				State = 710; Match(INTO);
				State = 713;
				switch (TokenStream.La(1)) {
				case LOCAL_ID:
					{
					State = 711; Match(LOCAL_ID);
					}
					break;
				case FORCESEEK:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 712; table_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 719;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
				case 1:
					{
					State = 715; Match(LR_BRACKET);
					State = 716; column_name_list();
					State = 717; Match(RR_BRACKET);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_dml_list_elemContext : ParserRuleContext {
		public Output_column_nameContext output_column_name() {
			return GetRuleContext<Output_column_nameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public Output_dml_list_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_dml_list_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOutput_dml_list_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOutput_dml_list_elem(this);
		}
	}

	[RuleVersion(0)]
	public Output_dml_list_elemContext output_dml_list_elem() {
		Output_dml_list_elemContext _localctx = new Output_dml_list_elemContext(Context, State);
		EnterRule(_localctx, 30, RULE_output_dml_list_elem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 725;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				{
				State = 723; output_column_name();
				}
				break;
			case 2:
				{
				State = 724; expression(0);
				}
				break;
			}
			State = 731;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				{
				State = 728;
				_la = TokenStream.La(1);
				if (_la==AS) {
					{
					State = 727; Match(AS);
					}
				}

				State = 730; column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_column_nameContext : ParserRuleContext {
		public ITerminalNode DELETED() { return GetToken(tsqlParser.DELETED, 0); }
		public ITerminalNode INSERTED() { return GetToken(tsqlParser.INSERTED, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode DOLLAR_ACTION() { return GetToken(tsqlParser.DOLLAR_ACTION, 0); }
		public Output_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_column_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOutput_column_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOutput_column_name(this);
		}
	}

	[RuleVersion(0)]
	public Output_column_nameContext output_column_name() {
		Output_column_nameContext _localctx = new Output_column_nameContext(Context, State);
		EnterRule(_localctx, 32, RULE_output_column_name);
		try {
			State = 744;
			switch (TokenStream.La(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 736;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
				case 1:
					{
					State = 733; Match(DELETED);
					}
					break;
				case 2:
					{
					State = 734; Match(INSERTED);
					}
					break;
				case 3:
					{
					State = 735; table_name();
					}
					break;
				}
				State = 738; Match(DOT);
				State = 741;
				switch (TokenStream.La(1)) {
				case STAR:
					{
					State = 739; Match(STAR);
					}
					break;
				case FORCESEEK:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 740; id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DOLLAR_ACTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 743; Match(DOLLAR_ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_databaseContext : ParserRuleContext {
		public IdContext database;
		public IdContext collation_name;
		public ITerminalNode CREATE() { return GetToken(tsqlParser.CREATE, 0); }
		public ITerminalNode DATABASE() { return GetToken(tsqlParser.DATABASE, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode CONTAINMENT() { return GetToken(tsqlParser.CONTAINMENT, 0); }
		public ITerminalNode[] ON() { return GetTokens(tsqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(tsqlParser.ON, i);
		}
		public Database_file_specContext[] database_file_spec() {
			return GetRuleContexts<Database_file_specContext>();
		}
		public Database_file_specContext database_file_spec(int i) {
			return GetRuleContext<Database_file_specContext>(i);
		}
		public ITerminalNode LOG() { return GetToken(tsqlParser.LOG, 0); }
		public ITerminalNode COLLATE() { return GetToken(tsqlParser.COLLATE, 0); }
		public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		public Create_database_optionContext[] create_database_option() {
			return GetRuleContexts<Create_database_optionContext>();
		}
		public Create_database_optionContext create_database_option(int i) {
			return GetRuleContext<Create_database_optionContext>(i);
		}
		public ITerminalNode NONE() { return GetToken(tsqlParser.NONE, 0); }
		public ITerminalNode PARTIAL() { return GetToken(tsqlParser.PARTIAL, 0); }
		public ITerminalNode PRIMARY() { return GetToken(tsqlParser.PRIMARY, 0); }
		public Create_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCreate_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCreate_database(this);
		}
	}

	[RuleVersion(0)]
	public Create_databaseContext create_database() {
		Create_databaseContext _localctx = new Create_databaseContext(Context, State);
		EnterRule(_localctx, 34, RULE_create_database);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 746; Match(CREATE);
			State = 747; Match(DATABASE);
			{
			State = 748; _localctx.database = id();
			}
			State = 752;
			_la = TokenStream.La(1);
			if (_la==CONTAINMENT) {
				{
				State = 749; Match(CONTAINMENT);
				State = 750; Match(EQUAL);
				State = 751;
				_la = TokenStream.La(1);
				if ( !(_la==NONE || _la==PARTIAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
			}

			State = 766;
			_la = TokenStream.La(1);
			if (_la==ON) {
				{
				State = 754; Match(ON);
				State = 756;
				_la = TokenStream.La(1);
				if (_la==PRIMARY) {
					{
					State = 755; Match(PRIMARY);
					}
				}

				State = 758; database_file_spec();
				State = 763;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 759; Match(COMMA);
					State = 760; database_file_spec();
					}
					}
					State = 765;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 778;
			_la = TokenStream.La(1);
			if (_la==LOG) {
				{
				State = 768; Match(LOG);
				State = 769; Match(ON);
				State = 770; database_file_spec();
				State = 775;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 771; Match(COMMA);
					State = 772; database_file_spec();
					}
					}
					State = 777;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 782;
			_la = TokenStream.La(1);
			if (_la==COLLATE) {
				{
				State = 780; Match(COLLATE);
				State = 781; _localctx.collation_name = id();
				}
			}

			State = 793;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				{
				State = 784; Match(WITH);
				State = 785; create_database_option();
				State = 790;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 786; Match(COMMA);
					State = 787; create_database_option();
					}
					}
					State = 792;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_indexContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(tsqlParser.CREATE, 0); }
		public ITerminalNode INDEX() { return GetToken(tsqlParser.INDEX, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] ON() { return GetTokens(tsqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(tsqlParser.ON, i);
		}
		public Table_name_with_hintContext table_name_with_hint() {
			return GetRuleContext<Table_name_with_hintContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode UNIQUE() { return GetToken(tsqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public ITerminalNode ASC() { return GetToken(tsqlParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(tsqlParser.DESC, 0); }
		public Create_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCreate_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCreate_index(this);
		}
	}

	[RuleVersion(0)]
	public Create_indexContext create_index() {
		Create_indexContext _localctx = new Create_indexContext(Context, State);
		EnterRule(_localctx, 36, RULE_create_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 795; Match(CREATE);
			State = 797;
			_la = TokenStream.La(1);
			if (_la==UNIQUE) {
				{
				State = 796; Match(UNIQUE);
				}
			}

			State = 800;
			_la = TokenStream.La(1);
			if (_la==CLUSTERED || _la==NONCLUSTERED) {
				{
				State = 799; clustered();
				}
			}

			State = 802; Match(INDEX);
			State = 803; id();
			State = 804; Match(ON);
			State = 805; table_name_with_hint();
			State = 806; Match(LR_BRACKET);
			State = 807; column_name_list();
			State = 809;
			_la = TokenStream.La(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 808;
				_la = TokenStream.La(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
			}

			State = 811; Match(RR_BRACKET);
			State = 813;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				{
				State = 812; index_options();
				}
				break;
			}
			State = 817;
			_la = TokenStream.La(1);
			if (_la==ON) {
				{
				State = 815; Match(ON);
				State = 816; id();
				}
			}

			State = 820;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				{
				State = 819; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_procedureContext : ParserRuleContext {
		public IToken proc;
		public ITerminalNode CREATE() { return GetToken(tsqlParser.CREATE, 0); }
		public Func_proc_nameContext func_proc_name() {
			return GetRuleContext<Func_proc_nameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public Sql_clausesContext sql_clauses() {
			return GetRuleContext<Sql_clausesContext>(0);
		}
		public ITerminalNode PROC() { return GetToken(tsqlParser.PROC, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(tsqlParser.PROCEDURE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public Procedure_paramContext[] procedure_param() {
			return GetRuleContexts<Procedure_paramContext>();
		}
		public Procedure_paramContext procedure_param(int i) {
			return GetRuleContext<Procedure_paramContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		public Procedure_optionContext[] procedure_option() {
			return GetRuleContexts<Procedure_optionContext>();
		}
		public Procedure_optionContext procedure_option(int i) {
			return GetRuleContext<Procedure_optionContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(tsqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(tsqlParser.REPLICATION, 0); }
		public Create_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_procedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCreate_procedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCreate_procedure(this);
		}
	}

	[RuleVersion(0)]
	public Create_procedureContext create_procedure() {
		Create_procedureContext _localctx = new Create_procedureContext(Context, State);
		EnterRule(_localctx, 38, RULE_create_procedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 822; Match(CREATE);
			State = 823;
			_localctx.proc = TokenStream.Lt(1);
			_la = TokenStream.La(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				_localctx.proc = ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 824; func_proc_name();
			State = 827;
			_la = TokenStream.La(1);
			if (_la==SEMI) {
				{
				State = 825; Match(SEMI);
				State = 826; Match(DECIMAL);
				}
			}

			State = 843;
			_la = TokenStream.La(1);
			if (_la==LOCAL_ID || _la==LR_BRACKET) {
				{
				State = 830;
				_la = TokenStream.La(1);
				if (_la==LR_BRACKET) {
					{
					State = 829; Match(LR_BRACKET);
					}
				}

				State = 832; procedure_param();
				State = 837;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 833; Match(COMMA);
					State = 834; procedure_param();
					}
					}
					State = 839;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 841;
				_la = TokenStream.La(1);
				if (_la==RR_BRACKET) {
					{
					State = 840; Match(RR_BRACKET);
					}
				}

				}
			}

			State = 854;
			_la = TokenStream.La(1);
			if (_la==WITH) {
				{
				State = 845; Match(WITH);
				State = 846; procedure_option();
				State = 851;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 847; Match(COMMA);
					State = 848; procedure_option();
					}
					}
					State = 853;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 858;
			_la = TokenStream.La(1);
			if (_la==FOR) {
				{
				State = 856; Match(FOR);
				State = 857; Match(REPLICATION);
				}
			}

			State = 860; Match(AS);
			State = 861; sql_clauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_paramContext : ParserRuleContext {
		public Default_valueContext default_val;
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public ITerminalNode VARYING() { return GetToken(tsqlParser.VARYING, 0); }
		public Default_valueContext default_value() {
			return GetRuleContext<Default_valueContext>(0);
		}
		public ITerminalNode OUT() { return GetToken(tsqlParser.OUT, 0); }
		public ITerminalNode OUTPUT() { return GetToken(tsqlParser.OUTPUT, 0); }
		public ITerminalNode READONLY() { return GetToken(tsqlParser.READONLY, 0); }
		public Procedure_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterProcedure_param(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitProcedure_param(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_paramContext procedure_param() {
		Procedure_paramContext _localctx = new Procedure_paramContext(Context, State);
		EnterRule(_localctx, 40, RULE_procedure_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 863; Match(LOCAL_ID);
			State = 867;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				{
				State = 864; id();
				State = 865; Match(DOT);
				}
				break;
			}
			State = 870;
			_la = TokenStream.La(1);
			if (_la==AS) {
				{
				State = 869; Match(AS);
				}
			}

			State = 872; data_type();
			State = 874;
			_la = TokenStream.La(1);
			if (_la==VARYING) {
				{
				State = 873; Match(VARYING);
				}
			}

			State = 878;
			_la = TokenStream.La(1);
			if (_la==EQUAL) {
				{
				State = 876; Match(EQUAL);
				State = 877; _localctx.default_val = default_value();
				}
			}

			State = 881;
			_la = TokenStream.La(1);
			if (((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (OUT - 322)) | (1L << (OUTPUT - 322)) | (1L << (READONLY - 322)))) != 0)) {
				{
				State = 880;
				_la = TokenStream.La(1);
				if ( !(((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (OUT - 322)) | (1L << (OUTPUT - 322)) | (1L << (READONLY - 322)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_optionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(tsqlParser.ENCRYPTION, 0); }
		public ITerminalNode RECOMPILE() { return GetToken(tsqlParser.RECOMPILE, 0); }
		public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public Procedure_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterProcedure_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitProcedure_option(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_optionContext procedure_option() {
		Procedure_optionContext _localctx = new Procedure_optionContext(Context, State);
		EnterRule(_localctx, 42, RULE_procedure_option);
		try {
			State = 886;
			switch (TokenStream.La(1)) {
			case ENCRYPTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 883; Match(ENCRYPTION);
				}
				break;
			case RECOMPILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 884; Match(RECOMPILE);
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 885; execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_statisticsContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(tsqlParser.CREATE, 0); }
		public ITerminalNode STATISTICS() { return GetToken(tsqlParser.STATISTICS, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		public Table_name_with_hintContext table_name_with_hint() {
			return GetRuleContext<Table_name_with_hintContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		public ITerminalNode FULLSCAN() { return GetToken(tsqlParser.FULLSCAN, 0); }
		public ITerminalNode SAMPLE() { return GetToken(tsqlParser.SAMPLE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public ITerminalNode STATS_STREAM() { return GetToken(tsqlParser.STATS_STREAM, 0); }
		public ITerminalNode PERCENT() { return GetToken(tsqlParser.PERCENT, 0); }
		public ITerminalNode ROWS() { return GetToken(tsqlParser.ROWS, 0); }
		public ITerminalNode NORECOMPUTE() { return GetToken(tsqlParser.NORECOMPUTE, 0); }
		public ITerminalNode INCREMENTAL() { return GetToken(tsqlParser.INCREMENTAL, 0); }
		public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Create_statisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_statistics; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCreate_statistics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCreate_statistics(this);
		}
	}

	[RuleVersion(0)]
	public Create_statisticsContext create_statistics() {
		Create_statisticsContext _localctx = new Create_statisticsContext(Context, State);
		EnterRule(_localctx, 44, RULE_create_statistics);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 888; Match(CREATE);
			State = 889; Match(STATISTICS);
			State = 890; id();
			State = 891; Match(ON);
			State = 892; table_name_with_hint();
			State = 893; Match(LR_BRACKET);
			State = 894; column_name_list();
			State = 895; Match(RR_BRACKET);
			State = 914;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				{
				State = 896; Match(WITH);
				State = 902;
				switch (TokenStream.La(1)) {
				case FULLSCAN:
					{
					State = 897; Match(FULLSCAN);
					}
					break;
				case SAMPLE:
					{
					State = 898; Match(SAMPLE);
					State = 899; Match(DECIMAL);
					State = 900;
					_la = TokenStream.La(1);
					if ( !(_la==PERCENT || _la==ROWS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
					break;
				case STATS_STREAM:
					{
					State = 901; Match(STATS_STREAM);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 906;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
				case 1:
					{
					State = 904; Match(COMMA);
					State = 905; Match(NORECOMPUTE);
					}
					break;
				}
				State = 912;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 908; Match(COMMA);
					State = 909; Match(INCREMENTAL);
					State = 910; Match(EQUAL);
					State = 911; on_off();
					}
				}

				}
				break;
			}
			State = 917;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
			case 1:
				{
				State = 916; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_tableContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(tsqlParser.CREATE, 0); }
		public ITerminalNode TABLE() { return GetToken(tsqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] DEFAULT() { return GetTokens(tsqlParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(tsqlParser.DEFAULT, i);
		}
		public ITerminalNode TEXTIMAGE_ON() { return GetToken(tsqlParser.TEXTIMAGE_ON, 0); }
		public Create_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCreate_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCreate_table(this);
		}
	}

	[RuleVersion(0)]
	public Create_tableContext create_table() {
		Create_tableContext _localctx = new Create_tableContext(Context, State);
		EnterRule(_localctx, 46, RULE_create_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 919; Match(CREATE);
			State = 920; Match(TABLE);
			State = 921; table_name();
			State = 922; Match(LR_BRACKET);
			State = 923; column_def_table_constraints();
			State = 925;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 924; Match(COMMA);
				}
			}

			State = 927; Match(RR_BRACKET);
			State = 931;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				{
				State = 928; Match(ON);
				State = 929; id();
				}
				break;
			case 2:
				{
				State = 930; Match(DEFAULT);
				}
				break;
			}
			State = 936;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
			case 1:
				{
				State = 933; Match(TEXTIMAGE_ON);
				State = 934; id();
				}
				break;
			case 2:
				{
				State = 935; Match(DEFAULT);
				}
				break;
			}
			State = 939;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
			case 1:
				{
				State = 938; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_viewContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(tsqlParser.CREATE, 0); }
		public ITerminalNode VIEW() { return GetToken(tsqlParser.VIEW, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode[] WITH() { return GetTokens(tsqlParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(tsqlParser.WITH, i);
		}
		public View_attributeContext[] view_attribute() {
			return GetRuleContexts<View_attributeContext>();
		}
		public View_attributeContext view_attribute(int i) {
			return GetRuleContext<View_attributeContext>(i);
		}
		public ITerminalNode CHECK() { return GetToken(tsqlParser.CHECK, 0); }
		public ITerminalNode OPTION() { return GetToken(tsqlParser.OPTION, 0); }
		public Create_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCreate_view(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCreate_view(this);
		}
	}

	[RuleVersion(0)]
	public Create_viewContext create_view() {
		Create_viewContext _localctx = new Create_viewContext(Context, State);
		EnterRule(_localctx, 48, RULE_create_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 941; Match(CREATE);
			State = 942; Match(VIEW);
			State = 943; simple_name();
			State = 948;
			_la = TokenStream.La(1);
			if (_la==LR_BRACKET) {
				{
				State = 944; Match(LR_BRACKET);
				State = 945; column_name_list();
				State = 946; Match(RR_BRACKET);
				}
			}

			State = 959;
			_la = TokenStream.La(1);
			if (_la==WITH) {
				{
				State = 950; Match(WITH);
				State = 951; view_attribute();
				State = 956;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 952; Match(COMMA);
					State = 953; view_attribute();
					}
					}
					State = 958;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 961; Match(AS);
			State = 962; select_statement();
			State = 966;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
			case 1:
				{
				State = 963; Match(WITH);
				State = 964; Match(CHECK);
				State = 965; Match(OPTION);
				}
				break;
			}
			State = 969;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,134,Context) ) {
			case 1:
				{
				State = 968; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_attributeContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(tsqlParser.ENCRYPTION, 0); }
		public ITerminalNode SCHEMABINDING() { return GetToken(tsqlParser.SCHEMABINDING, 0); }
		public ITerminalNode VIEW_METADATA() { return GetToken(tsqlParser.VIEW_METADATA, 0); }
		public View_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterView_attribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitView_attribute(this);
		}
	}

	[RuleVersion(0)]
	public View_attributeContext view_attribute() {
		View_attributeContext _localctx = new View_attributeContext(Context, State);
		EnterRule(_localctx, 50, RULE_view_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 971;
			_la = TokenStream.La(1);
			if ( !(_la==ENCRYPTION || _la==SCHEMABINDING || _la==VIEW_METADATA) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_tableContext : ParserRuleContext {
		public IdContext constraint;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public ITerminalNode ALTER() { return GetToken(tsqlParser.ALTER, 0); }
		public ITerminalNode[] TABLE() { return GetTokens(tsqlParser.TABLE); }
		public ITerminalNode TABLE(int i) {
			return GetToken(tsqlParser.TABLE, i);
		}
		public Table_nameContext[] table_name() {
			return GetRuleContexts<Table_nameContext>();
		}
		public Table_nameContext table_name(int i) {
			return GetRuleContext<Table_nameContext>(i);
		}
		public ITerminalNode SET() { return GetToken(tsqlParser.SET, 0); }
		public ITerminalNode LOCK_ESCALATION() { return GetToken(tsqlParser.LOCK_ESCALATION, 0); }
		public ITerminalNode ADD() { return GetToken(tsqlParser.ADD, 0); }
		public Column_def_table_constraintContext column_def_table_constraint() {
			return GetRuleContext<Column_def_table_constraintContext>(0);
		}
		public ITerminalNode DROP() { return GetToken(tsqlParser.DROP, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(tsqlParser.CONSTRAINT, 0); }
		public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		public ITerminalNode CHECK() { return GetToken(tsqlParser.CHECK, 0); }
		public ITerminalNode FOREIGN() { return GetToken(tsqlParser.FOREIGN, 0); }
		public ITerminalNode KEY() { return GetToken(tsqlParser.KEY, 0); }
		public ITerminalNode REFERENCES() { return GetToken(tsqlParser.REFERENCES, 0); }
		public ITerminalNode AUTO() { return GetToken(tsqlParser.AUTO, 0); }
		public ITerminalNode DISABLE() { return GetToken(tsqlParser.DISABLE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Column_name_listContext[] column_name_list() {
			return GetRuleContexts<Column_name_listContext>();
		}
		public Column_name_listContext column_name_list(int i) {
			return GetRuleContext<Column_name_listContext>(i);
		}
		public Alter_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterAlter_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitAlter_table(this);
		}
	}

	[RuleVersion(0)]
	public Alter_tableContext alter_table() {
		Alter_tableContext _localctx = new Alter_tableContext(Context, State);
		EnterRule(_localctx, 52, RULE_alter_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 973; Match(ALTER);
			State = 974; Match(TABLE);
			State = 975; table_name();
			State = 1006;
			switch (TokenStream.La(1)) {
			case SET:
				{
				State = 976; Match(SET);
				State = 977; Match(LR_BRACKET);
				State = 978; Match(LOCK_ESCALATION);
				State = 979; Match(EQUAL);
				State = 980;
				_la = TokenStream.La(1);
				if ( !(_la==TABLE || _la==AUTO || _la==DISABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 981; Match(RR_BRACKET);
				}
				break;
			case ADD:
				{
				State = 982; Match(ADD);
				State = 983; column_def_table_constraint();
				}
				break;
			case DROP:
				{
				State = 984; Match(DROP);
				State = 985; Match(CONSTRAINT);
				State = 986; _localctx.constraint = id();
				}
				break;
			case WITH:
				{
				State = 987; Match(WITH);
				State = 988; Match(CHECK);
				State = 989; Match(ADD);
				State = 990; Match(CONSTRAINT);
				State = 991; _localctx.constraint = id();
				State = 992; Match(FOREIGN);
				State = 993; Match(KEY);
				State = 994; Match(LR_BRACKET);
				State = 995; _localctx.fk = column_name_list();
				State = 996; Match(RR_BRACKET);
				State = 997; Match(REFERENCES);
				State = 998; table_name();
				State = 999; Match(LR_BRACKET);
				State = 1000; _localctx.pk = column_name_list();
				State = 1001; Match(RR_BRACKET);
				}
				break;
			case CHECK:
				{
				State = 1003; Match(CHECK);
				State = 1004; Match(CONSTRAINT);
				State = 1005; _localctx.constraint = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1009;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
			case 1:
				{
				State = 1008; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_databaseContext : ParserRuleContext {
		public IdContext database;
		public IdContext new_name;
		public IdContext collation;
		public ITerminalNode ALTER() { return GetToken(tsqlParser.ALTER, 0); }
		public ITerminalNode DATABASE() { return GetToken(tsqlParser.DATABASE, 0); }
		public ITerminalNode CURRENT() { return GetToken(tsqlParser.CURRENT, 0); }
		public ITerminalNode MODIFY() { return GetToken(tsqlParser.MODIFY, 0); }
		public ITerminalNode NAME() { return GetToken(tsqlParser.NAME, 0); }
		public ITerminalNode COLLATE() { return GetToken(tsqlParser.COLLATE, 0); }
		public ITerminalNode SET() { return GetToken(tsqlParser.SET, 0); }
		public Database_optionspecContext database_optionspec() {
			return GetRuleContext<Database_optionspecContext>(0);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		public TerminationContext termination() {
			return GetRuleContext<TerminationContext>(0);
		}
		public Alter_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterAlter_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitAlter_database(this);
		}
	}

	[RuleVersion(0)]
	public Alter_databaseContext alter_database() {
		Alter_databaseContext _localctx = new Alter_databaseContext(Context, State);
		EnterRule(_localctx, 54, RULE_alter_database);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1011; Match(ALTER);
			State = 1012; Match(DATABASE);
			State = 1015;
			switch (TokenStream.La(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				State = 1013; _localctx.database = id();
				}
				break;
			case CURRENT:
				{
				State = 1014; Match(CURRENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1029;
			switch (TokenStream.La(1)) {
			case MODIFY:
				{
				State = 1017; Match(MODIFY);
				State = 1018; Match(NAME);
				State = 1019; Match(EQUAL);
				State = 1020; _localctx.new_name = id();
				}
				break;
			case COLLATE:
				{
				State = 1021; Match(COLLATE);
				State = 1022; _localctx.collation = id();
				}
				break;
			case SET:
				{
				State = 1023; Match(SET);
				State = 1024; database_optionspec();
				State = 1027;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,138,Context) ) {
				case 1:
					{
					State = 1025; Match(WITH);
					State = 1026; termination();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1032;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
			case 1:
				{
				State = 1031; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_optionspecContext : ParserRuleContext {
		public Auto_optionContext auto_option() {
			return GetRuleContext<Auto_optionContext>(0);
		}
		public Change_tracking_optionContext change_tracking_option() {
			return GetRuleContext<Change_tracking_optionContext>(0);
		}
		public Containment_optionContext containment_option() {
			return GetRuleContext<Containment_optionContext>(0);
		}
		public Cursor_optionContext cursor_option() {
			return GetRuleContext<Cursor_optionContext>(0);
		}
		public Date_correlation_optimization_optionContext date_correlation_optimization_option() {
			return GetRuleContext<Date_correlation_optimization_optionContext>(0);
		}
		public Db_encryption_optionContext db_encryption_option() {
			return GetRuleContext<Db_encryption_optionContext>(0);
		}
		public Db_state_optionContext db_state_option() {
			return GetRuleContext<Db_state_optionContext>(0);
		}
		public Db_update_optionContext db_update_option() {
			return GetRuleContext<Db_update_optionContext>(0);
		}
		public Db_user_access_optionContext db_user_access_option() {
			return GetRuleContext<Db_user_access_optionContext>(0);
		}
		public Delayed_durability_optionContext delayed_durability_option() {
			return GetRuleContext<Delayed_durability_optionContext>(0);
		}
		public External_access_optionContext external_access_option() {
			return GetRuleContext<External_access_optionContext>(0);
		}
		public ITerminalNode FILESTREAM() { return GetToken(tsqlParser.FILESTREAM, 0); }
		public Database_filestream_optionContext database_filestream_option() {
			return GetRuleContext<Database_filestream_optionContext>(0);
		}
		public ITerminalNode HADR_options() { return GetToken(tsqlParser.HADR_options, 0); }
		public Mixed_page_allocation_optionContext mixed_page_allocation_option() {
			return GetRuleContext<Mixed_page_allocation_optionContext>(0);
		}
		public Parameterization_optionContext parameterization_option() {
			return GetRuleContext<Parameterization_optionContext>(0);
		}
		public Recovery_optionContext recovery_option() {
			return GetRuleContext<Recovery_optionContext>(0);
		}
		public Service_broker_optionContext service_broker_option() {
			return GetRuleContext<Service_broker_optionContext>(0);
		}
		public Snapshot_optionContext snapshot_option() {
			return GetRuleContext<Snapshot_optionContext>(0);
		}
		public Sql_optionContext sql_option() {
			return GetRuleContext<Sql_optionContext>(0);
		}
		public Target_recovery_time_optionContext target_recovery_time_option() {
			return GetRuleContext<Target_recovery_time_optionContext>(0);
		}
		public TerminationContext termination() {
			return GetRuleContext<TerminationContext>(0);
		}
		public Database_optionspecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_optionspec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDatabase_optionspec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDatabase_optionspec(this);
		}
	}

	[RuleVersion(0)]
	public Database_optionspecContext database_optionspec() {
		Database_optionspecContext _localctx = new Database_optionspecContext(Context, State);
		EnterRule(_localctx, 56, RULE_database_optionspec);
		try {
			State = 1056;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1034; auto_option();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1035; change_tracking_option();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1036; containment_option();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1037; cursor_option();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1038; date_correlation_optimization_option();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1039; db_encryption_option();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1040; db_state_option();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1041; db_update_option();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1042; db_user_access_option();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1043; delayed_durability_option();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1044; external_access_option();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1045; Match(FILESTREAM);
				State = 1046; database_filestream_option();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1047; Match(HADR_options);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1048; mixed_page_allocation_option();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1049; parameterization_option();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1050; recovery_option();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1051; service_broker_option();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1052; snapshot_option();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1053; sql_option();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1054; target_recovery_time_option();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1055; termination();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Auto_optionContext : ParserRuleContext {
		public ITerminalNode AUTO_CLOSE() { return GetToken(tsqlParser.AUTO_CLOSE, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode AUTO_CREATE_STATISTICS() { return GetToken(tsqlParser.AUTO_CREATE_STATISTICS, 0); }
		public ITerminalNode OFF() { return GetToken(tsqlParser.OFF, 0); }
		public ITerminalNode[] ON() { return GetTokens(tsqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(tsqlParser.ON, i);
		}
		public ITerminalNode INCREMENTAL() { return GetToken(tsqlParser.INCREMENTAL, 0); }
		public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		public ITerminalNode AUTO_SHRINK() { return GetToken(tsqlParser.AUTO_SHRINK, 0); }
		public ITerminalNode AUTO_UPDATE_STATISTICS() { return GetToken(tsqlParser.AUTO_UPDATE_STATISTICS, 0); }
		public ITerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return GetToken(tsqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public Auto_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_auto_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterAuto_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitAuto_option(this);
		}
	}

	[RuleVersion(0)]
	public Auto_optionContext auto_option() {
		Auto_optionContext _localctx = new Auto_optionContext(Context, State);
		EnterRule(_localctx, 58, RULE_auto_option);
		int _la;
		try {
			State = 1075;
			switch (TokenStream.La(1)) {
			case AUTO_CLOSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1058; Match(AUTO_CLOSE);
				State = 1059; on_off();
				}
				break;
			case AUTO_CREATE_STATISTICS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1060; Match(AUTO_CREATE_STATISTICS);
				State = 1061; Match(OFF);
				}
				break;
			case ON:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1062; Match(ON);
				State = 1067;
				switch (TokenStream.La(1)) {
				case INCREMENTAL:
					{
					State = 1063; Match(INCREMENTAL);
					State = 1064; Match(EQUAL);
					State = 1065; Match(ON);
					}
					break;
				case OFF:
					{
					State = 1066; Match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case AUTO_SHRINK:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1069; Match(AUTO_SHRINK);
				State = 1070; on_off();
				}
				break;
			case AUTO_UPDATE_STATISTICS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1071; Match(AUTO_UPDATE_STATISTICS);
				State = 1072; on_off();
				}
				break;
			case AUTO_UPDATE_STATISTICS_ASYNC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1073; Match(AUTO_UPDATE_STATISTICS_ASYNC);
				State = 1074;
				_la = TokenStream.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_tracking_optionContext : ParserRuleContext {
		public ITerminalNode CHANGE_TRACKING() { return GetToken(tsqlParser.CHANGE_TRACKING, 0); }
		public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		public ITerminalNode OFF() { return GetToken(tsqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		public Change_tracking_option_listContext[] change_tracking_option_list() {
			return GetRuleContexts<Change_tracking_option_listContext>();
		}
		public Change_tracking_option_listContext change_tracking_option_list(int i) {
			return GetRuleContext<Change_tracking_option_listContext>(i);
		}
		public Change_tracking_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_tracking_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterChange_tracking_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitChange_tracking_option(this);
		}
	}

	[RuleVersion(0)]
	public Change_tracking_optionContext change_tracking_option() {
		Change_tracking_optionContext _localctx = new Change_tracking_optionContext(Context, State);
		EnterRule(_localctx, 60, RULE_change_tracking_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1077; Match(CHANGE_TRACKING);
			State = 1078; Match(EQUAL);
			State = 1094;
			switch (TokenStream.La(1)) {
			case OFF:
				{
				State = 1079; Match(OFF);
				}
				break;
			case ON:
				{
				State = 1080; Match(ON);
				State = 1091;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==AUTO_CLEANUP || _la==CHANGE_RETENTION) {
					{
					{
					State = 1081; change_tracking_option_list();
					State = 1086;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1082; Match(COMMA);
						State = 1083; change_tracking_option_list();
						}
						}
						State = 1088;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					}
					}
					State = 1093;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_tracking_option_listContext : ParserRuleContext {
		public ITerminalNode AUTO_CLEANUP() { return GetToken(tsqlParser.AUTO_CLEANUP, 0); }
		public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode CHANGE_RETENTION() { return GetToken(tsqlParser.CHANGE_RETENTION, 0); }
		public ITerminalNode DAYS() { return GetToken(tsqlParser.DAYS, 0); }
		public ITerminalNode HOURS() { return GetToken(tsqlParser.HOURS, 0); }
		public ITerminalNode MINUTES() { return GetToken(tsqlParser.MINUTES, 0); }
		public Change_tracking_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_tracking_option_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterChange_tracking_option_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitChange_tracking_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Change_tracking_option_listContext change_tracking_option_list() {
		Change_tracking_option_listContext _localctx = new Change_tracking_option_listContext(Context, State);
		EnterRule(_localctx, 62, RULE_change_tracking_option_list);
		int _la;
		try {
			State = 1102;
			switch (TokenStream.La(1)) {
			case AUTO_CLEANUP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1096; Match(AUTO_CLEANUP);
				State = 1097; Match(EQUAL);
				State = 1098; on_off();
				}
				break;
			case CHANGE_RETENTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1099; Match(CHANGE_RETENTION);
				State = 1100; Match(EQUAL);
				State = 1101;
				_la = TokenStream.La(1);
				if ( !(((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (DAYS - 236)) | (1L << (HOURS - 236)) | (1L << (MINUTES - 236)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Containment_optionContext : ParserRuleContext {
		public ITerminalNode CONTAINMENT() { return GetToken(tsqlParser.CONTAINMENT, 0); }
		public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		public ITerminalNode NONE() { return GetToken(tsqlParser.NONE, 0); }
		public ITerminalNode PARTIAL() { return GetToken(tsqlParser.PARTIAL, 0); }
		public Containment_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_containment_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterContainment_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitContainment_option(this);
		}
	}

	[RuleVersion(0)]
	public Containment_optionContext containment_option() {
		Containment_optionContext _localctx = new Containment_optionContext(Context, State);
		EnterRule(_localctx, 64, RULE_containment_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1104; Match(CONTAINMENT);
			State = 1105; Match(EQUAL);
			State = 1106;
			_la = TokenStream.La(1);
			if ( !(_la==NONE || _la==PARTIAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_optionContext : ParserRuleContext {
		public ITerminalNode CURSOR_CLOSE_ON_COMMIT() { return GetToken(tsqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode CURSOR_DEFAULT() { return GetToken(tsqlParser.CURSOR_DEFAULT, 0); }
		public ITerminalNode LOCAL() { return GetToken(tsqlParser.LOCAL, 0); }
		public ITerminalNode GLOBAL() { return GetToken(tsqlParser.GLOBAL, 0); }
		public Cursor_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCursor_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCursor_option(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_optionContext cursor_option() {
		Cursor_optionContext _localctx = new Cursor_optionContext(Context, State);
		EnterRule(_localctx, 66, RULE_cursor_option);
		int _la;
		try {
			State = 1112;
			switch (TokenStream.La(1)) {
			case CURSOR_CLOSE_ON_COMMIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1108; Match(CURSOR_CLOSE_ON_COMMIT);
				State = 1109; on_off();
				}
				break;
			case CURSOR_DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1110; Match(CURSOR_DEFAULT);
				State = 1111;
				_la = TokenStream.La(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_correlation_optimization_optionContext : ParserRuleContext {
		public ITerminalNode DATE_CORRELATION_OPTIMIZATION() { return GetToken(tsqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Date_correlation_optimization_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_correlation_optimization_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDate_correlation_optimization_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDate_correlation_optimization_option(this);
		}
	}

	[RuleVersion(0)]
	public Date_correlation_optimization_optionContext date_correlation_optimization_option() {
		Date_correlation_optimization_optionContext _localctx = new Date_correlation_optimization_optionContext(Context, State);
		EnterRule(_localctx, 68, RULE_date_correlation_optimization_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1114; Match(DATE_CORRELATION_OPTIMIZATION);
			State = 1115; on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_encryption_optionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(tsqlParser.ENCRYPTION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Db_encryption_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_encryption_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDb_encryption_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDb_encryption_option(this);
		}
	}

	[RuleVersion(0)]
	public Db_encryption_optionContext db_encryption_option() {
		Db_encryption_optionContext _localctx = new Db_encryption_optionContext(Context, State);
		EnterRule(_localctx, 70, RULE_db_encryption_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1117; Match(ENCRYPTION);
			State = 1118; on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_state_optionContext : ParserRuleContext {
		public ITerminalNode ONLINE() { return GetToken(tsqlParser.ONLINE, 0); }
		public ITerminalNode OFFLINE() { return GetToken(tsqlParser.OFFLINE, 0); }
		public ITerminalNode EMERGENCY() { return GetToken(tsqlParser.EMERGENCY, 0); }
		public Db_state_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_state_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDb_state_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDb_state_option(this);
		}
	}

	[RuleVersion(0)]
	public Db_state_optionContext db_state_option() {
		Db_state_optionContext _localctx = new Db_state_optionContext(Context, State);
		EnterRule(_localctx, 72, RULE_db_state_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1120;
			_la = TokenStream.La(1);
			if ( !(_la==EMERGENCY || _la==OFFLINE || _la==ONLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_update_optionContext : ParserRuleContext {
		public ITerminalNode READ_ONLY() { return GetToken(tsqlParser.READ_ONLY, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(tsqlParser.READ_WRITE, 0); }
		public Db_update_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_update_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDb_update_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDb_update_option(this);
		}
	}

	[RuleVersion(0)]
	public Db_update_optionContext db_update_option() {
		Db_update_optionContext _localctx = new Db_update_optionContext(Context, State);
		EnterRule(_localctx, 74, RULE_db_update_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1122;
			_la = TokenStream.La(1);
			if ( !(_la==READ_ONLY || _la==READ_WRITE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_user_access_optionContext : ParserRuleContext {
		public ITerminalNode SINGLE_USER() { return GetToken(tsqlParser.SINGLE_USER, 0); }
		public ITerminalNode RESTRICTED_USER() { return GetToken(tsqlParser.RESTRICTED_USER, 0); }
		public ITerminalNode MULTI_USER() { return GetToken(tsqlParser.MULTI_USER, 0); }
		public Db_user_access_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_user_access_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDb_user_access_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDb_user_access_option(this);
		}
	}

	[RuleVersion(0)]
	public Db_user_access_optionContext db_user_access_option() {
		Db_user_access_optionContext _localctx = new Db_user_access_optionContext(Context, State);
		EnterRule(_localctx, 76, RULE_db_user_access_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1124;
			_la = TokenStream.La(1);
			if ( !(((((_la - 303)) & ~0x3f) == 0 && ((1L << (_la - 303)) & ((1L << (MULTI_USER - 303)) | (1L << (RESTRICTED_USER - 303)) | (1L << (SINGLE_USER - 303)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delayed_durability_optionContext : ParserRuleContext {
		public ITerminalNode DELAYED_DURABILITY() { return GetToken(tsqlParser.DELAYED_DURABILITY, 0); }
		public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		public ITerminalNode DISABLED() { return GetToken(tsqlParser.DISABLED, 0); }
		public ITerminalNode ALLOWED() { return GetToken(tsqlParser.ALLOWED, 0); }
		public ITerminalNode FORCED() { return GetToken(tsqlParser.FORCED, 0); }
		public Delayed_durability_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delayed_durability_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDelayed_durability_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDelayed_durability_option(this);
		}
	}

	[RuleVersion(0)]
	public Delayed_durability_optionContext delayed_durability_option() {
		Delayed_durability_optionContext _localctx = new Delayed_durability_optionContext(Context, State);
		EnterRule(_localctx, 78, RULE_delayed_durability_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1126; Match(DELAYED_DURABILITY);
			State = 1127; Match(EQUAL);
			State = 1128;
			_la = TokenStream.La(1);
			if ( !(_la==ALLOWED || _la==DISABLED || _la==FORCED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_access_optionContext : ParserRuleContext {
		public ITerminalNode DB_CHAINING() { return GetToken(tsqlParser.DB_CHAINING, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode TRUSTWORTHY() { return GetToken(tsqlParser.TRUSTWORTHY, 0); }
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(tsqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public ITerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return GetToken(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public ITerminalNode NESTED_TRIGGERS() { return GetToken(tsqlParser.NESTED_TRIGGERS, 0); }
		public ITerminalNode OFF() { return GetToken(tsqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		public ITerminalNode TRANSFORM_NOISE_WORDS() { return GetToken(tsqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public ITerminalNode TWO_DIGIT_YEAR_CUTOFF() { return GetToken(tsqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public External_access_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_access_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterExternal_access_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitExternal_access_option(this);
		}
	}

	[RuleVersion(0)]
	public External_access_optionContext external_access_option() {
		External_access_optionContext _localctx = new External_access_optionContext(Context, State);
		EnterRule(_localctx, 80, RULE_external_access_option);
		int _la;
		try {
			State = 1155;
			switch (TokenStream.La(1)) {
			case DB_CHAINING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1130; Match(DB_CHAINING);
				State = 1131; on_off();
				}
				break;
			case TRUSTWORTHY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1132; Match(TRUSTWORTHY);
				State = 1133; on_off();
				}
				break;
			case DEFAULT_LANGUAGE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1134; Match(DEFAULT_LANGUAGE);
				State = 1135; Match(EQUAL);
				State = 1138;
				switch (TokenStream.La(1)) {
				case FORCESEEK:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 1136; id();
					}
					break;
				case STRING:
					{
					State = 1137; Match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DEFAULT_FULLTEXT_LANGUAGE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1140; Match(DEFAULT_FULLTEXT_LANGUAGE);
				State = 1141; Match(EQUAL);
				State = 1144;
				switch (TokenStream.La(1)) {
				case FORCESEEK:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 1142; id();
					}
					break;
				case STRING:
					{
					State = 1143; Match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NESTED_TRIGGERS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1146; Match(NESTED_TRIGGERS);
				State = 1147; Match(EQUAL);
				State = 1148;
				_la = TokenStream.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				break;
			case TRANSFORM_NOISE_WORDS:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1149; Match(TRANSFORM_NOISE_WORDS);
				State = 1150; Match(EQUAL);
				State = 1151;
				_la = TokenStream.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				break;
			case TWO_DIGIT_YEAR_CUTOFF:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1152; Match(TWO_DIGIT_YEAR_CUTOFF);
				State = 1153; Match(EQUAL);
				State = 1154; Match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mixed_page_allocation_optionContext : ParserRuleContext {
		public ITerminalNode MIXED_PAGE_ALLOCATION() { return GetToken(tsqlParser.MIXED_PAGE_ALLOCATION, 0); }
		public ITerminalNode OFF() { return GetToken(tsqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		public Mixed_page_allocation_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mixed_page_allocation_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterMixed_page_allocation_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitMixed_page_allocation_option(this);
		}
	}

	[RuleVersion(0)]
	public Mixed_page_allocation_optionContext mixed_page_allocation_option() {
		Mixed_page_allocation_optionContext _localctx = new Mixed_page_allocation_optionContext(Context, State);
		EnterRule(_localctx, 82, RULE_mixed_page_allocation_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1157; Match(MIXED_PAGE_ALLOCATION);
			State = 1158;
			_la = TokenStream.La(1);
			if ( !(_la==OFF || _la==ON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameterization_optionContext : ParserRuleContext {
		public ITerminalNode PARAMETERIZATION() { return GetToken(tsqlParser.PARAMETERIZATION, 0); }
		public ITerminalNode SIMPLE() { return GetToken(tsqlParser.SIMPLE, 0); }
		public ITerminalNode FORCED() { return GetToken(tsqlParser.FORCED, 0); }
		public Parameterization_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterization_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterParameterization_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitParameterization_option(this);
		}
	}

	[RuleVersion(0)]
	public Parameterization_optionContext parameterization_option() {
		Parameterization_optionContext _localctx = new Parameterization_optionContext(Context, State);
		EnterRule(_localctx, 84, RULE_parameterization_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1160; Match(PARAMETERIZATION);
			State = 1161;
			_la = TokenStream.La(1);
			if ( !(_la==FORCED || _la==SIMPLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recovery_optionContext : ParserRuleContext {
		public ITerminalNode RECOVERY() { return GetToken(tsqlParser.RECOVERY, 0); }
		public ITerminalNode FULL() { return GetToken(tsqlParser.FULL, 0); }
		public ITerminalNode BULK_LOGGED() { return GetToken(tsqlParser.BULK_LOGGED, 0); }
		public ITerminalNode SIMPLE() { return GetToken(tsqlParser.SIMPLE, 0); }
		public ITerminalNode TORN_PAGE_DETECTION() { return GetToken(tsqlParser.TORN_PAGE_DETECTION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode PAGE_VERIFY() { return GetToken(tsqlParser.PAGE_VERIFY, 0); }
		public ITerminalNode CHECKSUM() { return GetToken(tsqlParser.CHECKSUM, 0); }
		public ITerminalNode NONE() { return GetToken(tsqlParser.NONE, 0); }
		public Recovery_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recovery_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterRecovery_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitRecovery_option(this);
		}
	}

	[RuleVersion(0)]
	public Recovery_optionContext recovery_option() {
		Recovery_optionContext _localctx = new Recovery_optionContext(Context, State);
		EnterRule(_localctx, 86, RULE_recovery_option);
		int _la;
		try {
			State = 1169;
			switch (TokenStream.La(1)) {
			case RECOVERY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1163; Match(RECOVERY);
				State = 1164;
				_la = TokenStream.La(1);
				if ( !(_la==FULL || _la==BULK_LOGGED || _la==SIMPLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				break;
			case TORN_PAGE_DETECTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1165; Match(TORN_PAGE_DETECTION);
				State = 1166; on_off();
				}
				break;
			case PAGE_VERIFY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1167; Match(PAGE_VERIFY);
				State = 1168;
				_la = TokenStream.La(1);
				if ( !(_la==NONE || _la==CHECKSUM || _la==TORN_PAGE_DETECTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Service_broker_optionContext : ParserRuleContext {
		public ITerminalNode ENABLE_BROKER() { return GetToken(tsqlParser.ENABLE_BROKER, 0); }
		public ITerminalNode DISABLE_BROKER() { return GetToken(tsqlParser.DISABLE_BROKER, 0); }
		public ITerminalNode NEW_BROKER() { return GetToken(tsqlParser.NEW_BROKER, 0); }
		public ITerminalNode ERROR_BROKER_CONVERSATIONS() { return GetToken(tsqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public ITerminalNode HONOR_BROKER_PRIORITY() { return GetToken(tsqlParser.HONOR_BROKER_PRIORITY, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Service_broker_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_service_broker_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterService_broker_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitService_broker_option(this);
		}
	}

	[RuleVersion(0)]
	public Service_broker_optionContext service_broker_option() {
		Service_broker_optionContext _localctx = new Service_broker_optionContext(Context, State);
		EnterRule(_localctx, 88, RULE_service_broker_option);
		try {
			State = 1177;
			switch (TokenStream.La(1)) {
			case ENABLE_BROKER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1171; Match(ENABLE_BROKER);
				}
				break;
			case DISABLE_BROKER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1172; Match(DISABLE_BROKER);
				}
				break;
			case NEW_BROKER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1173; Match(NEW_BROKER);
				}
				break;
			case ERROR_BROKER_CONVERSATIONS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1174; Match(ERROR_BROKER_CONVERSATIONS);
				}
				break;
			case HONOR_BROKER_PRIORITY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1175; Match(HONOR_BROKER_PRIORITY);
				State = 1176; on_off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Snapshot_optionContext : ParserRuleContext {
		public IToken MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT;
		public ITerminalNode ALLOW_SNAPSHOT_ISOLATION() { return GetToken(tsqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode READ_COMMITTED_SNAPSHOT() { return GetToken(tsqlParser.READ_COMMITTED_SNAPSHOT, 0); }
		public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(tsqlParser.OFF, 0); }
		public Snapshot_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_snapshot_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSnapshot_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSnapshot_option(this);
		}
	}

	[RuleVersion(0)]
	public Snapshot_optionContext snapshot_option() {
		Snapshot_optionContext _localctx = new Snapshot_optionContext(Context, State);
		EnterRule(_localctx, 90, RULE_snapshot_option);
		int _la;
		try {
			State = 1184;
			switch (TokenStream.La(1)) {
			case ALLOW_SNAPSHOT_ISOLATION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1179; Match(ALLOW_SNAPSHOT_ISOLATION);
				State = 1180; on_off();
				}
				break;
			case READ_COMMITTED_SNAPSHOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1181; Match(READ_COMMITTED_SNAPSHOT);
				State = 1182;
				_la = TokenStream.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				break;
			case OFF:
			case ON:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1183;
				_localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==OFF || _la==ON) ) {
					_localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_optionContext : ParserRuleContext {
		public ITerminalNode ANSI_NULL_DEFAULT() { return GetToken(tsqlParser.ANSI_NULL_DEFAULT, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode ANSI_NULLS() { return GetToken(tsqlParser.ANSI_NULLS, 0); }
		public ITerminalNode ANSI_PADDING() { return GetToken(tsqlParser.ANSI_PADDING, 0); }
		public ITerminalNode ANSI_WARNINGS() { return GetToken(tsqlParser.ANSI_WARNINGS, 0); }
		public ITerminalNode ARITHABORT() { return GetToken(tsqlParser.ARITHABORT, 0); }
		public ITerminalNode COMPATIBILITY_LEVEL() { return GetToken(tsqlParser.COMPATIBILITY_LEVEL, 0); }
		public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public ITerminalNode CONCAT_NULL_YIELDS_NULL() { return GetToken(tsqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public ITerminalNode NUMERIC_ROUNDABORT() { return GetToken(tsqlParser.NUMERIC_ROUNDABORT, 0); }
		public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(tsqlParser.QUOTED_IDENTIFIER, 0); }
		public ITerminalNode RECURSIVE_TRIGGERS() { return GetToken(tsqlParser.RECURSIVE_TRIGGERS, 0); }
		public Sql_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSql_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSql_option(this);
		}
	}

	[RuleVersion(0)]
	public Sql_optionContext sql_option() {
		Sql_optionContext _localctx = new Sql_optionContext(Context, State);
		EnterRule(_localctx, 92, RULE_sql_option);
		try {
			State = 1207;
			switch (TokenStream.La(1)) {
			case ANSI_NULL_DEFAULT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1186; Match(ANSI_NULL_DEFAULT);
				State = 1187; on_off();
				}
				break;
			case ANSI_NULLS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1188; Match(ANSI_NULLS);
				State = 1189; on_off();
				}
				break;
			case ANSI_PADDING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1190; Match(ANSI_PADDING);
				State = 1191; on_off();
				}
				break;
			case ANSI_WARNINGS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1192; Match(ANSI_WARNINGS);
				State = 1193; on_off();
				}
				break;
			case ARITHABORT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1194; Match(ARITHABORT);
				State = 1195; on_off();
				}
				break;
			case COMPATIBILITY_LEVEL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1196; Match(COMPATIBILITY_LEVEL);
				State = 1197; Match(EQUAL);
				State = 1198; Match(DECIMAL);
				}
				break;
			case CONCAT_NULL_YIELDS_NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1199; Match(CONCAT_NULL_YIELDS_NULL);
				State = 1200; on_off();
				}
				break;
			case NUMERIC_ROUNDABORT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1201; Match(NUMERIC_ROUNDABORT);
				State = 1202; on_off();
				}
				break;
			case QUOTED_IDENTIFIER:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1203; Match(QUOTED_IDENTIFIER);
				State = 1204; on_off();
				}
				break;
			case RECURSIVE_TRIGGERS:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1205; Match(RECURSIVE_TRIGGERS);
				State = 1206; on_off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target_recovery_time_optionContext : ParserRuleContext {
		public ITerminalNode TARGET_RECOVERY_TIME() { return GetToken(tsqlParser.TARGET_RECOVERY_TIME, 0); }
		public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public ITerminalNode SECONDS() { return GetToken(tsqlParser.SECONDS, 0); }
		public ITerminalNode MINUTES() { return GetToken(tsqlParser.MINUTES, 0); }
		public Target_recovery_time_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target_recovery_time_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTarget_recovery_time_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTarget_recovery_time_option(this);
		}
	}

	[RuleVersion(0)]
	public Target_recovery_time_optionContext target_recovery_time_option() {
		Target_recovery_time_optionContext _localctx = new Target_recovery_time_optionContext(Context, State);
		EnterRule(_localctx, 94, RULE_target_recovery_time_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1209; Match(TARGET_RECOVERY_TIME);
			State = 1210; Match(EQUAL);
			State = 1211; Match(DECIMAL);
			State = 1212;
			_la = TokenStream.La(1);
			if ( !(_la==MINUTES || _la==SECONDS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminationContext : ParserRuleContext {
		public IToken seconds;
		public ITerminalNode ROLLBACK() { return GetToken(tsqlParser.ROLLBACK, 0); }
		public ITerminalNode AFTER() { return GetToken(tsqlParser.AFTER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(tsqlParser.IMMEDIATE, 0); }
		public ITerminalNode NO_WAIT() { return GetToken(tsqlParser.NO_WAIT, 0); }
		public TerminationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termination; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTermination(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTermination(this);
		}
	}

	[RuleVersion(0)]
	public TerminationContext termination() {
		TerminationContext _localctx = new TerminationContext(Context, State);
		EnterRule(_localctx, 96, RULE_termination);
		try {
			State = 1220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1214; Match(ROLLBACK);
				State = 1215; Match(AFTER);
				State = 1216; _localctx.seconds = Match(DECIMAL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1217; Match(ROLLBACK);
				State = 1218; Match(IMMEDIATE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1219; Match(NO_WAIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_indexContext : ParserRuleContext {
		public IdContext name;
		public ITerminalNode DROP() { return GetToken(tsqlParser.DROP, 0); }
		public ITerminalNode INDEX() { return GetToken(tsqlParser.INDEX, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode IF() { return GetToken(tsqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(tsqlParser.EXISTS, 0); }
		public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Drop_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDrop_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDrop_index(this);
		}
	}

	[RuleVersion(0)]
	public Drop_indexContext drop_index() {
		Drop_indexContext _localctx = new Drop_indexContext(Context, State);
		EnterRule(_localctx, 98, RULE_drop_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1222; Match(DROP);
			State = 1223; Match(INDEX);
			State = 1226;
			_la = TokenStream.La(1);
			if (_la==IF) {
				{
				State = 1224; Match(IF);
				State = 1225; Match(EXISTS);
				}
			}

			State = 1228; _localctx.name = id();
			State = 1231;
			_la = TokenStream.La(1);
			if (_la==ON) {
				{
				State = 1229; Match(ON);
				State = 1230; table_name();
				}
			}

			State = 1234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
			case 1:
				{
				State = 1233; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_procedureContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(tsqlParser.DROP, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(tsqlParser.PROCEDURE, 0); }
		public Func_proc_nameContext func_proc_name() {
			return GetRuleContext<Func_proc_nameContext>(0);
		}
		public ITerminalNode IF() { return GetToken(tsqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(tsqlParser.EXISTS, 0); }
		public Drop_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_procedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDrop_procedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDrop_procedure(this);
		}
	}

	[RuleVersion(0)]
	public Drop_procedureContext drop_procedure() {
		Drop_procedureContext _localctx = new Drop_procedureContext(Context, State);
		EnterRule(_localctx, 100, RULE_drop_procedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1236; Match(DROP);
			State = 1237; Match(PROCEDURE);
			State = 1240;
			_la = TokenStream.La(1);
			if (_la==IF) {
				{
				State = 1238; Match(IF);
				State = 1239; Match(EXISTS);
				}
			}

			State = 1242; func_proc_name();
			State = 1244;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
			case 1:
				{
				State = 1243; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_statisticsContext : ParserRuleContext {
		public IdContext name;
		public ITerminalNode DROP() { return GetToken(tsqlParser.DROP, 0); }
		public ITerminalNode STATISTICS() { return GetToken(tsqlParser.STATISTICS, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Drop_statisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_statistics; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDrop_statistics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDrop_statistics(this);
		}
	}

	[RuleVersion(0)]
	public Drop_statisticsContext drop_statistics() {
		Drop_statisticsContext _localctx = new Drop_statisticsContext(Context, State);
		EnterRule(_localctx, 102, RULE_drop_statistics);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1246; Match(DROP);
			State = 1247; Match(STATISTICS);
			State = 1251;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,162,Context) ) {
			case 1:
				{
				State = 1248; table_name();
				State = 1249; Match(DOT);
				}
				break;
			}
			State = 1253; _localctx.name = id();
			State = 1254; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_tableContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(tsqlParser.DROP, 0); }
		public ITerminalNode TABLE() { return GetToken(tsqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode IF() { return GetToken(tsqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(tsqlParser.EXISTS, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDrop_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDrop_table(this);
		}
	}

	[RuleVersion(0)]
	public Drop_tableContext drop_table() {
		Drop_tableContext _localctx = new Drop_tableContext(Context, State);
		EnterRule(_localctx, 104, RULE_drop_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1256; Match(DROP);
			State = 1257; Match(TABLE);
			State = 1260;
			_la = TokenStream.La(1);
			if (_la==IF) {
				{
				State = 1258; Match(IF);
				State = 1259; Match(EXISTS);
				}
			}

			State = 1262; table_name();
			State = 1264;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,164,Context) ) {
			case 1:
				{
				State = 1263; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_viewContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(tsqlParser.DROP, 0); }
		public ITerminalNode VIEW() { return GetToken(tsqlParser.VIEW, 0); }
		public Simple_nameContext[] simple_name() {
			return GetRuleContexts<Simple_nameContext>();
		}
		public Simple_nameContext simple_name(int i) {
			return GetRuleContext<Simple_nameContext>(i);
		}
		public ITerminalNode IF() { return GetToken(tsqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(tsqlParser.EXISTS, 0); }
		public Drop_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_view; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDrop_view(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDrop_view(this);
		}
	}

	[RuleVersion(0)]
	public Drop_viewContext drop_view() {
		Drop_viewContext _localctx = new Drop_viewContext(Context, State);
		EnterRule(_localctx, 106, RULE_drop_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1266; Match(DROP);
			State = 1267; Match(VIEW);
			State = 1270;
			_la = TokenStream.La(1);
			if (_la==IF) {
				{
				State = 1268; Match(IF);
				State = 1269; Match(EXISTS);
				}
			}

			State = 1272; simple_name();
			State = 1277;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1273; Match(COMMA);
				State = 1274; simple_name();
				}
				}
				State = 1279;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 1281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
			case 1:
				{
				State = 1280; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_typeContext : ParserRuleContext {
		public Simple_nameContext name;
		public ITerminalNode CREATE() { return GetToken(tsqlParser.CREATE, 0); }
		public ITerminalNode TYPE() { return GetToken(tsqlParser.TYPE, 0); }
		public ITerminalNode FROM() { return GetToken(tsqlParser.FROM, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public Default_valueContext default_value() {
			return GetRuleContext<Default_valueContext>(0);
		}
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public Create_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCreate_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCreate_type(this);
		}
	}

	[RuleVersion(0)]
	public Create_typeContext create_type() {
		Create_typeContext _localctx = new Create_typeContext(Context, State);
		EnterRule(_localctx, 108, RULE_create_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1283; Match(CREATE);
			State = 1284; Match(TYPE);
			State = 1285; _localctx.name = simple_name();
			State = 1286; Match(FROM);
			State = 1287; data_type();
			State = 1288; default_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_typeContext : ParserRuleContext {
		public Simple_nameContext name;
		public ITerminalNode DROP() { return GetToken(tsqlParser.DROP, 0); }
		public ITerminalNode TYPE() { return GetToken(tsqlParser.TYPE, 0); }
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public ITerminalNode IF() { return GetToken(tsqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(tsqlParser.EXISTS, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDrop_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDrop_type(this);
		}
	}

	[RuleVersion(0)]
	public Drop_typeContext drop_type() {
		Drop_typeContext _localctx = new Drop_typeContext(Context, State);
		EnterRule(_localctx, 110, RULE_drop_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1290; Match(DROP);
			State = 1291; Match(TYPE);
			State = 1294;
			_la = TokenStream.La(1);
			if (_la==IF) {
				{
				State = 1292; Match(IF);
				State = 1293; Match(EXISTS);
				}
			}

			State = 1296; _localctx.name = simple_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rowset_function_limitedContext : ParserRuleContext {
		public OpenqueryContext openquery() {
			return GetRuleContext<OpenqueryContext>(0);
		}
		public OpendatasourceContext opendatasource() {
			return GetRuleContext<OpendatasourceContext>(0);
		}
		public Rowset_function_limitedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowset_function_limited; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterRowset_function_limited(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitRowset_function_limited(this);
		}
	}

	[RuleVersion(0)]
	public Rowset_function_limitedContext rowset_function_limited() {
		Rowset_function_limitedContext _localctx = new Rowset_function_limitedContext(Context, State);
		EnterRule(_localctx, 112, RULE_rowset_function_limited);
		try {
			State = 1300;
			switch (TokenStream.La(1)) {
			case OPENQUERY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1298; openquery();
				}
				break;
			case OPENDATASOURCE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1299; opendatasource();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenqueryContext : ParserRuleContext {
		public IdContext linked_server;
		public IToken query;
		public ITerminalNode OPENQUERY() { return GetToken(tsqlParser.OPENQUERY, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public OpenqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOpenquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOpenquery(this);
		}
	}

	[RuleVersion(0)]
	public OpenqueryContext openquery() {
		OpenqueryContext _localctx = new OpenqueryContext(Context, State);
		EnterRule(_localctx, 114, RULE_openquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1302; Match(OPENQUERY);
			State = 1303; Match(LR_BRACKET);
			State = 1304; _localctx.linked_server = id();
			State = 1305; Match(COMMA);
			State = 1306; _localctx.query = Match(STRING);
			State = 1307; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpendatasourceContext : ParserRuleContext {
		public IToken provider;
		public IToken init;
		public IdContext database;
		public IdContext scheme;
		public IdContext table;
		public ITerminalNode OPENDATASOURCE() { return GetToken(tsqlParser.OPENDATASOURCE, 0); }
		public ITerminalNode[] STRING() { return GetTokens(tsqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(tsqlParser.STRING, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public OpendatasourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opendatasource; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOpendatasource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOpendatasource(this);
		}
	}

	[RuleVersion(0)]
	public OpendatasourceContext opendatasource() {
		OpendatasourceContext _localctx = new OpendatasourceContext(Context, State);
		EnterRule(_localctx, 116, RULE_opendatasource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1309; Match(OPENDATASOURCE);
			State = 1310; Match(LR_BRACKET);
			State = 1311; _localctx.provider = Match(STRING);
			State = 1312; Match(COMMA);
			State = 1313; _localctx.init = Match(STRING);
			State = 1314; Match(RR_BRACKET);
			State = 1315; Match(DOT);
			State = 1317;
			_la = TokenStream.La(1);
			if (_la==FORCESEEK || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ABSOLUTE - 193)) | (1L << (APPLY - 193)) | (1L << (AUTO - 193)) | (1L << (AVG - 193)) | (1L << (BASE64 - 193)) | (1L << (CALLER - 193)) | (1L << (CAST - 193)) | (1L << (CATCH - 193)) | (1L << (CHECKSUM_AGG - 193)) | (1L << (COMMITTED - 193)) | (1L << (CONCAT - 193)) | (1L << (CONTROL - 193)) | (1L << (COOKIE - 193)) | (1L << (COUNT - 193)) | (1L << (COUNT_BIG - 193)) | (1L << (DELAY - 193)) | (1L << (DELETED - 193)) | (1L << (DENSE_RANK - 193)) | (1L << (DISABLE - 193)) | (1L << (DYNAMIC - 193)) | (1L << (ENCRYPTION - 193)) | (1L << (EXPAND - 193)) | (1L << (FAST - 193)) | (1L << (FAST_FORWARD - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (FIRST - 259)) | (1L << (FOLLOWING - 259)) | (1L << (FORCE - 259)) | (1L << (FORCED - 259)) | (1L << (FORWARD_ONLY - 259)) | (1L << (FULLSCAN - 259)) | (1L << (GLOBAL - 259)) | (1L << (GO - 259)) | (1L << (GROUPING - 259)) | (1L << (GROUPING_ID - 259)) | (1L << (HASH - 259)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 259)) | (1L << (IMPERSONATE - 259)) | (1L << (INSENSITIVE - 259)) | (1L << (INSERTED - 259)) | (1L << (ISOLATION - 259)) | (1L << (KEEP - 259)) | (1L << (KEEPFIXED - 259)) | (1L << (KEYSET - 259)) | (1L << (LAST - 259)) | (1L << (LEVEL - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCK_ESCALATION - 259)) | (1L << (LOGIN - 259)) | (1L << (LOOP - 259)) | (1L << (MARK - 259)) | (1L << (MAX - 259)) | (1L << (MAXDOP - 259)) | (1L << (MAXRECURSION - 259)) | (1L << (MIN - 259)) | (1L << (MODIFY - 259)) | (1L << (NAME - 259)) | (1L << (NEXT - 259)) | (1L << (NOCOUNT - 259)) | (1L << (NOEXPAND - 259)) | (1L << (NORECOMPUTE - 259)) | (1L << (NTILE - 259)) | (1L << (NUMBER - 259)) | (1L << (OFFSET - 259)) | (1L << (ONLINE - 259)) | (1L << (ONLY - 259)) | (1L << (OPTIMISTIC - 259)) | (1L << (OPTIMIZE - 259)) | (1L << (OUT - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (OUTPUT - 323)) | (1L << (OWNER - 323)) | (1L << (PARAMETERIZATION - 323)) | (1L << (PARTITION - 323)) | (1L << (PATH - 323)) | (1L << (PRECEDING - 323)) | (1L << (PRIOR - 323)) | (1L << (PRIVILEGES - 323)) | (1L << (RANGE - 323)) | (1L << (RANK - 323)) | (1L << (READONLY - 323)) | (1L << (READ_ONLY - 323)) | (1L << (RECOMPILE - 323)) | (1L << (RELATIVE - 323)) | (1L << (REMOTE - 323)) | (1L << (REPEATABLE - 323)) | (1L << (ROBUST - 323)) | (1L << (ROOT - 323)) | (1L << (ROW - 323)) | (1L << (ROWGUID - 323)) | (1L << (ROWS - 323)) | (1L << (ROW_NUMBER - 323)) | (1L << (SAMPLE - 323)) | (1L << (SCHEMABINDING - 323)) | (1L << (SCROLL - 323)) | (1L << (SCROLL_LOCKS - 323)) | (1L << (SELF - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SIMPLE - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 323)) | (1L << (STATIC - 323)) | (1L << (STATS_STREAM - 323)) | (1L << (STDEV - 323)) | (1L << (STDEVP - 323)) | (1L << (SUM - 323)) | (1L << (TEXTIMAGE_ON - 323)) | (1L << (THROW - 323)) | (1L << (TIES - 323)) | (1L << (TIME - 323)) | (1L << (TRY - 323)) | (1L << (TYPE - 323)) | (1L << (TYPE_WARNING - 323)) | (1L << (UNBOUNDED - 323)) | (1L << (UNCOMMITTED - 323)) | (1L << (UNKNOWN - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (USING - 388)) | (1L << (VAR - 388)) | (1L << (VARP - 388)) | (1L << (VIEWS - 388)) | (1L << (VIEW_METADATA - 388)) | (1L << (WORK - 388)) | (1L << (XML - 388)) | (1L << (XMLNAMESPACES - 388)) | (1L << (DOUBLE_QUOTE_ID - 388)) | (1L << (SQUARE_BRACKET_ID - 388)) | (1L << (ID - 388)))) != 0)) {
				{
				State = 1316; _localctx.database = id();
				}
			}

			State = 1319; Match(DOT);
			State = 1321;
			_la = TokenStream.La(1);
			if (_la==FORCESEEK || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ABSOLUTE - 193)) | (1L << (APPLY - 193)) | (1L << (AUTO - 193)) | (1L << (AVG - 193)) | (1L << (BASE64 - 193)) | (1L << (CALLER - 193)) | (1L << (CAST - 193)) | (1L << (CATCH - 193)) | (1L << (CHECKSUM_AGG - 193)) | (1L << (COMMITTED - 193)) | (1L << (CONCAT - 193)) | (1L << (CONTROL - 193)) | (1L << (COOKIE - 193)) | (1L << (COUNT - 193)) | (1L << (COUNT_BIG - 193)) | (1L << (DELAY - 193)) | (1L << (DELETED - 193)) | (1L << (DENSE_RANK - 193)) | (1L << (DISABLE - 193)) | (1L << (DYNAMIC - 193)) | (1L << (ENCRYPTION - 193)) | (1L << (EXPAND - 193)) | (1L << (FAST - 193)) | (1L << (FAST_FORWARD - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (FIRST - 259)) | (1L << (FOLLOWING - 259)) | (1L << (FORCE - 259)) | (1L << (FORCED - 259)) | (1L << (FORWARD_ONLY - 259)) | (1L << (FULLSCAN - 259)) | (1L << (GLOBAL - 259)) | (1L << (GO - 259)) | (1L << (GROUPING - 259)) | (1L << (GROUPING_ID - 259)) | (1L << (HASH - 259)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 259)) | (1L << (IMPERSONATE - 259)) | (1L << (INSENSITIVE - 259)) | (1L << (INSERTED - 259)) | (1L << (ISOLATION - 259)) | (1L << (KEEP - 259)) | (1L << (KEEPFIXED - 259)) | (1L << (KEYSET - 259)) | (1L << (LAST - 259)) | (1L << (LEVEL - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCK_ESCALATION - 259)) | (1L << (LOGIN - 259)) | (1L << (LOOP - 259)) | (1L << (MARK - 259)) | (1L << (MAX - 259)) | (1L << (MAXDOP - 259)) | (1L << (MAXRECURSION - 259)) | (1L << (MIN - 259)) | (1L << (MODIFY - 259)) | (1L << (NAME - 259)) | (1L << (NEXT - 259)) | (1L << (NOCOUNT - 259)) | (1L << (NOEXPAND - 259)) | (1L << (NORECOMPUTE - 259)) | (1L << (NTILE - 259)) | (1L << (NUMBER - 259)) | (1L << (OFFSET - 259)) | (1L << (ONLINE - 259)) | (1L << (ONLY - 259)) | (1L << (OPTIMISTIC - 259)) | (1L << (OPTIMIZE - 259)) | (1L << (OUT - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (OUTPUT - 323)) | (1L << (OWNER - 323)) | (1L << (PARAMETERIZATION - 323)) | (1L << (PARTITION - 323)) | (1L << (PATH - 323)) | (1L << (PRECEDING - 323)) | (1L << (PRIOR - 323)) | (1L << (PRIVILEGES - 323)) | (1L << (RANGE - 323)) | (1L << (RANK - 323)) | (1L << (READONLY - 323)) | (1L << (READ_ONLY - 323)) | (1L << (RECOMPILE - 323)) | (1L << (RELATIVE - 323)) | (1L << (REMOTE - 323)) | (1L << (REPEATABLE - 323)) | (1L << (ROBUST - 323)) | (1L << (ROOT - 323)) | (1L << (ROW - 323)) | (1L << (ROWGUID - 323)) | (1L << (ROWS - 323)) | (1L << (ROW_NUMBER - 323)) | (1L << (SAMPLE - 323)) | (1L << (SCHEMABINDING - 323)) | (1L << (SCROLL - 323)) | (1L << (SCROLL_LOCKS - 323)) | (1L << (SELF - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SIMPLE - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 323)) | (1L << (STATIC - 323)) | (1L << (STATS_STREAM - 323)) | (1L << (STDEV - 323)) | (1L << (STDEVP - 323)) | (1L << (SUM - 323)) | (1L << (TEXTIMAGE_ON - 323)) | (1L << (THROW - 323)) | (1L << (TIES - 323)) | (1L << (TIME - 323)) | (1L << (TRY - 323)) | (1L << (TYPE - 323)) | (1L << (TYPE_WARNING - 323)) | (1L << (UNBOUNDED - 323)) | (1L << (UNCOMMITTED - 323)) | (1L << (UNKNOWN - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (USING - 388)) | (1L << (VAR - 388)) | (1L << (VARP - 388)) | (1L << (VIEWS - 388)) | (1L << (VIEW_METADATA - 388)) | (1L << (WORK - 388)) | (1L << (XML - 388)) | (1L << (XMLNAMESPACES - 388)) | (1L << (DOUBLE_QUOTE_ID - 388)) | (1L << (SQUARE_BRACKET_ID - 388)) | (1L << (ID - 388)))) != 0)) {
				{
				State = 1320; _localctx.scheme = id();
				}
			}

			State = 1323; Match(DOT);
			{
			State = 1324; _localctx.table = id();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_statementContext : ParserRuleContext {
		public ITerminalNode DECLARE() { return GetToken(tsqlParser.DECLARE, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Table_type_definitionContext table_type_definition() {
			return GetRuleContext<Table_type_definitionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public Declare_localContext[] declare_local() {
			return GetRuleContexts<Declare_localContext>();
		}
		public Declare_localContext declare_local(int i) {
			return GetRuleContext<Declare_localContext>(i);
		}
		public Declare_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDeclare_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDeclare_statement(this);
		}
	}

	[RuleVersion(0)]
	public Declare_statementContext declare_statement() {
		Declare_statementContext _localctx = new Declare_statementContext(Context, State);
		EnterRule(_localctx, 118, RULE_declare_statement);
		int _la;
		try {
			State = 1347;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,176,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1326; Match(DECLARE);
				State = 1327; Match(LOCAL_ID);
				State = 1329;
				_la = TokenStream.La(1);
				if (_la==AS) {
					{
					State = 1328; Match(AS);
					}
				}

				State = 1331; table_type_definition();
				State = 1333;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
				case 1:
					{
					State = 1332; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1335; Match(DECLARE);
				State = 1336; declare_local();
				State = 1341;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1337; Match(COMMA);
					State = 1338; declare_local();
					}
					}
					State = 1343;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 1345;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,175,Context) ) {
				case 1:
					{
					State = 1344; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_statementContext : ParserRuleContext {
		public ITerminalNode CLOSE() { return GetToken(tsqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode GLOBAL() { return GetToken(tsqlParser.GLOBAL, 0); }
		public ITerminalNode DEALLOCATE() { return GetToken(tsqlParser.DEALLOCATE, 0); }
		public Declare_cursorContext declare_cursor() {
			return GetRuleContext<Declare_cursorContext>(0);
		}
		public Fetch_cursorContext fetch_cursor() {
			return GetRuleContext<Fetch_cursorContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(tsqlParser.OPEN, 0); }
		public Cursor_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCursor_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCursor_statement(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_statementContext cursor_statement() {
		Cursor_statementContext _localctx = new Cursor_statementContext(Context, State);
		EnterRule(_localctx, 120, RULE_cursor_statement);
		try {
			State = 1375;
			switch (TokenStream.La(1)) {
			case CLOSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1349; Match(CLOSE);
				State = 1351;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,177,Context) ) {
				case 1:
					{
					State = 1350; Match(GLOBAL);
					}
					break;
				}
				State = 1353; cursor_name();
				State = 1355;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,178,Context) ) {
				case 1:
					{
					State = 1354; Match(SEMI);
					}
					break;
				}
				}
				break;
			case DEALLOCATE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1357; Match(DEALLOCATE);
				State = 1359;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
				case 1:
					{
					State = 1358; Match(GLOBAL);
					}
					break;
				}
				State = 1361; cursor_name();
				State = 1363;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
				case 1:
					{
					State = 1362; Match(SEMI);
					}
					break;
				}
				}
				break;
			case DECLARE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1365; declare_cursor();
				}
				break;
			case FETCH:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1366; fetch_cursor();
				}
				break;
			case OPEN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1367; Match(OPEN);
				State = 1369;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,181,Context) ) {
				case 1:
					{
					State = 1368; Match(GLOBAL);
					}
					break;
				}
				State = 1371; cursor_name();
				State = 1373;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
				case 1:
					{
					State = 1372; Match(SEMI);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statementContext : ParserRuleContext {
		public IToken return_status;
		public ITerminalNode EXECUTE() { return GetToken(tsqlParser.EXECUTE, 0); }
		public Func_proc_nameContext func_proc_name() {
			return GetRuleContext<Func_proc_nameContext>(0);
		}
		public Execute_statement_argContext[] execute_statement_arg() {
			return GetRuleContexts<Execute_statement_argContext>();
		}
		public Execute_statement_argContext execute_statement_arg(int i) {
			return GetRuleContext<Execute_statement_argContext>(i);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Execute_var_stringContext[] execute_var_string() {
			return GetRuleContexts<Execute_var_stringContext>();
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return GetRuleContext<Execute_var_stringContext>(i);
		}
		public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public ITerminalNode LOGIN() { return GetToken(tsqlParser.LOGIN, 0); }
		public ITerminalNode USER() { return GetToken(tsqlParser.USER, 0); }
		public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public Execute_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterExecute_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitExecute_statement(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statementContext execute_statement() {
		Execute_statementContext _localctx = new Execute_statementContext(Context, State);
		EnterRule(_localctx, 122, RULE_execute_statement);
		int _la;
		try {
			State = 1418;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1377; Match(EXECUTE);
				State = 1380;
				_la = TokenStream.La(1);
				if (_la==LOCAL_ID) {
					{
					State = 1378; _localctx.return_status = Match(LOCAL_ID);
					State = 1379; Match(EQUAL);
					}
				}

				State = 1382; func_proc_name();
				State = 1391;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,186,Context) ) {
				case 1:
					{
					State = 1383; execute_statement_arg();
					State = 1388;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1384; Match(COMMA);
						State = 1385; execute_statement_arg();
						}
						}
						State = 1390;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					}
					break;
				}
				State = 1394;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
				case 1:
					{
					State = 1393; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1396; Match(EXECUTE);
				State = 1397; Match(LR_BRACKET);
				State = 1398; execute_var_string();
				State = 1403;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==PLUS) {
					{
					{
					State = 1399; Match(PLUS);
					State = 1400; execute_var_string();
					}
					}
					State = 1405;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 1406; Match(RR_BRACKET);
				State = 1413;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
				case 1:
					{
					State = 1408;
					_la = TokenStream.La(1);
					if (_la==AS) {
						{
						State = 1407; Match(AS);
						}
					}

					State = 1410;
					_la = TokenStream.La(1);
					if ( !(_la==USER || _la==LOGIN) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					State = 1411; Match(EQUAL);
					State = 1412; Match(STRING);
					}
					break;
				}
				State = 1416;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,191,Context) ) {
				case 1:
					{
					State = 1415; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statement_argContext : ParserRuleContext {
		public IToken parameter;
		public ITerminalNode DEFAULT() { return GetToken(tsqlParser.DEFAULT, 0); }
		public ITerminalNode NULL() { return GetToken(tsqlParser.NULL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Constant_LOCAL_IDContext constant_LOCAL_ID() {
			return GetRuleContext<Constant_LOCAL_IDContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode OUTPUT() { return GetToken(tsqlParser.OUTPUT, 0); }
		public ITerminalNode OUT() { return GetToken(tsqlParser.OUT, 0); }
		public Execute_statement_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterExecute_statement_arg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitExecute_statement_arg(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statement_argContext execute_statement_arg() {
		Execute_statement_argContext _localctx = new Execute_statement_argContext(Context, State);
		EnterRule(_localctx, 124, RULE_execute_statement_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1422;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
			case 1:
				{
				State = 1420; _localctx.parameter = Match(LOCAL_ID);
				State = 1421; Match(EQUAL);
				}
				break;
			}
			State = 1433;
			switch (TokenStream.La(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case DECIMAL:
			case ID:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				{
				State = 1426;
				switch (TokenStream.La(1)) {
				case LOCAL_ID:
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					State = 1424; constant_LOCAL_ID();
					}
					break;
				case FORCESEEK:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 1425; id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1429;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
				case 1:
					{
					State = 1428;
					_la = TokenStream.La(1);
					if ( !(_la==OUT || _la==OUTPUT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case DEFAULT:
				{
				State = 1431; Match(DEFAULT);
				}
				break;
			case NULL:
				{
				State = 1432; Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_var_stringContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public Execute_var_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_var_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterExecute_var_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitExecute_var_string(this);
		}
	}

	[RuleVersion(0)]
	public Execute_var_stringContext execute_var_string() {
		Execute_var_stringContext _localctx = new Execute_var_stringContext(Context, State);
		EnterRule(_localctx, 126, RULE_execute_var_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1435;
			_la = TokenStream.La(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Security_statementContext : ParserRuleContext {
		public Table_nameContext on_id;
		public IdContext to_principal;
		public IdContext as_principal;
		public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public ITerminalNode[] GRANT() { return GetTokens(tsqlParser.GRANT); }
		public ITerminalNode GRANT(int i) {
			return GetToken(tsqlParser.GRANT, i);
		}
		public ITerminalNode TO() { return GetToken(tsqlParser.TO, 0); }
		public ITerminalNode ALL() { return GetToken(tsqlParser.ALL, 0); }
		public Grant_permissionContext grant_permission() {
			return GetRuleContext<Grant_permissionContext>(0);
		}
		public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		public ITerminalNode OPTION() { return GetToken(tsqlParser.OPTION, 0); }
		public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode PRIVILEGES() { return GetToken(tsqlParser.PRIVILEGES, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode REVERT() { return GetToken(tsqlParser.REVERT, 0); }
		public ITerminalNode COOKIE() { return GetToken(tsqlParser.COOKIE, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Security_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_security_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSecurity_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSecurity_statement(this);
		}
	}

	[RuleVersion(0)]
	public Security_statementContext security_statement() {
		Security_statementContext _localctx = new Security_statementContext(Context, State);
		EnterRule(_localctx, 128, RULE_security_statement);
		int _la;
		try {
			State = 1485;
			switch (TokenStream.La(1)) {
			case EXECUTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1437; execute_clause();
				State = 1439;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,197,Context) ) {
				case 1:
					{
					State = 1438; Match(SEMI);
					}
					break;
				}
				}
				break;
			case GRANT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1441; Match(GRANT);
				State = 1453;
				switch (TokenStream.La(1)) {
				case ALL:
					{
					State = 1442; Match(ALL);
					State = 1444;
					_la = TokenStream.La(1);
					if (_la==PRIVILEGES) {
						{
						State = 1443; Match(PRIVILEGES);
						}
					}

					}
					break;
				case ALTER:
				case CREATE:
				case EXECUTE:
				case INSERT:
				case REFERENCES:
				case SELECT:
				case VIEW:
				case CONTROL:
				case IMPERSONATE:
				case SHOWPLAN:
				case TAKE:
					{
					State = 1446; grant_permission();
					State = 1451;
					_la = TokenStream.La(1);
					if (_la==LR_BRACKET) {
						{
						State = 1447; Match(LR_BRACKET);
						State = 1448; column_name_list();
						State = 1449; Match(RR_BRACKET);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1457;
				_la = TokenStream.La(1);
				if (_la==ON) {
					{
					State = 1455; Match(ON);
					State = 1456; _localctx.on_id = table_name();
					}
				}

				State = 1459; Match(TO);
				{
				State = 1460; _localctx.to_principal = id();
				}
				State = 1464;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,202,Context) ) {
				case 1:
					{
					State = 1461; Match(WITH);
					State = 1462; Match(GRANT);
					State = 1463; Match(OPTION);
					}
					break;
				}
				State = 1468;
				_la = TokenStream.La(1);
				if (_la==AS) {
					{
					State = 1466; Match(AS);
					State = 1467; _localctx.as_principal = id();
					}
				}

				State = 1471;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,204,Context) ) {
				case 1:
					{
					State = 1470; Match(SEMI);
					}
					break;
				}
				}
				break;
			case REVERT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1473; Match(REVERT);
				State = 1480;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
				case 1:
					{
					State = 1474; Match(LR_BRACKET);
					State = 1475; Match(WITH);
					State = 1476; Match(COOKIE);
					State = 1477; Match(EQUAL);
					State = 1478; Match(LOCAL_ID);
					State = 1479; Match(RR_BRACKET);
					}
					break;
				}
				State = 1483;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
				case 1:
					{
					State = 1482; Match(SEMI);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grant_permissionContext : ParserRuleContext {
		public ITerminalNode EXECUTE() { return GetToken(tsqlParser.EXECUTE, 0); }
		public ITerminalNode VIEW() { return GetToken(tsqlParser.VIEW, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode TAKE() { return GetToken(tsqlParser.TAKE, 0); }
		public ITerminalNode CONTROL() { return GetToken(tsqlParser.CONTROL, 0); }
		public ITerminalNode CREATE() { return GetToken(tsqlParser.CREATE, 0); }
		public ITerminalNode TABLE() { return GetToken(tsqlParser.TABLE, 0); }
		public ITerminalNode SHOWPLAN() { return GetToken(tsqlParser.SHOWPLAN, 0); }
		public ITerminalNode IMPERSONATE() { return GetToken(tsqlParser.IMPERSONATE, 0); }
		public ITerminalNode SELECT() { return GetToken(tsqlParser.SELECT, 0); }
		public ITerminalNode REFERENCES() { return GetToken(tsqlParser.REFERENCES, 0); }
		public ITerminalNode INSERT() { return GetToken(tsqlParser.INSERT, 0); }
		public ITerminalNode ALTER() { return GetToken(tsqlParser.ALTER, 0); }
		public ITerminalNode DATABASE() { return GetToken(tsqlParser.DATABASE, 0); }
		public ITerminalNode ANY() { return GetToken(tsqlParser.ANY, 0); }
		public Grant_permissionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grant_permission; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterGrant_permission(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitGrant_permission(this);
		}
	}

	[RuleVersion(0)]
	public Grant_permissionContext grant_permission() {
		Grant_permissionContext _localctx = new Grant_permissionContext(Context, State);
		EnterRule(_localctx, 130, RULE_grant_permission);
		int _la;
		try {
			State = 1513;
			switch (TokenStream.La(1)) {
			case EXECUTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1487; Match(EXECUTE);
				}
				break;
			case VIEW:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1488; Match(VIEW);
				State = 1489; id();
				}
				break;
			case TAKE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1490; Match(TAKE);
				State = 1491; id();
				}
				break;
			case CONTROL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1492; Match(CONTROL);
				State = 1494;
				_la = TokenStream.La(1);
				if (_la==FORCESEEK || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ABSOLUTE - 193)) | (1L << (APPLY - 193)) | (1L << (AUTO - 193)) | (1L << (AVG - 193)) | (1L << (BASE64 - 193)) | (1L << (CALLER - 193)) | (1L << (CAST - 193)) | (1L << (CATCH - 193)) | (1L << (CHECKSUM_AGG - 193)) | (1L << (COMMITTED - 193)) | (1L << (CONCAT - 193)) | (1L << (CONTROL - 193)) | (1L << (COOKIE - 193)) | (1L << (COUNT - 193)) | (1L << (COUNT_BIG - 193)) | (1L << (DELAY - 193)) | (1L << (DELETED - 193)) | (1L << (DENSE_RANK - 193)) | (1L << (DISABLE - 193)) | (1L << (DYNAMIC - 193)) | (1L << (ENCRYPTION - 193)) | (1L << (EXPAND - 193)) | (1L << (FAST - 193)) | (1L << (FAST_FORWARD - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (FIRST - 259)) | (1L << (FOLLOWING - 259)) | (1L << (FORCE - 259)) | (1L << (FORCED - 259)) | (1L << (FORWARD_ONLY - 259)) | (1L << (FULLSCAN - 259)) | (1L << (GLOBAL - 259)) | (1L << (GO - 259)) | (1L << (GROUPING - 259)) | (1L << (GROUPING_ID - 259)) | (1L << (HASH - 259)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 259)) | (1L << (IMPERSONATE - 259)) | (1L << (INSENSITIVE - 259)) | (1L << (INSERTED - 259)) | (1L << (ISOLATION - 259)) | (1L << (KEEP - 259)) | (1L << (KEEPFIXED - 259)) | (1L << (KEYSET - 259)) | (1L << (LAST - 259)) | (1L << (LEVEL - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCK_ESCALATION - 259)) | (1L << (LOGIN - 259)) | (1L << (LOOP - 259)) | (1L << (MARK - 259)) | (1L << (MAX - 259)) | (1L << (MAXDOP - 259)) | (1L << (MAXRECURSION - 259)) | (1L << (MIN - 259)) | (1L << (MODIFY - 259)) | (1L << (NAME - 259)) | (1L << (NEXT - 259)) | (1L << (NOCOUNT - 259)) | (1L << (NOEXPAND - 259)) | (1L << (NORECOMPUTE - 259)) | (1L << (NTILE - 259)) | (1L << (NUMBER - 259)) | (1L << (OFFSET - 259)) | (1L << (ONLINE - 259)) | (1L << (ONLY - 259)) | (1L << (OPTIMISTIC - 259)) | (1L << (OPTIMIZE - 259)) | (1L << (OUT - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (OUTPUT - 323)) | (1L << (OWNER - 323)) | (1L << (PARAMETERIZATION - 323)) | (1L << (PARTITION - 323)) | (1L << (PATH - 323)) | (1L << (PRECEDING - 323)) | (1L << (PRIOR - 323)) | (1L << (PRIVILEGES - 323)) | (1L << (RANGE - 323)) | (1L << (RANK - 323)) | (1L << (READONLY - 323)) | (1L << (READ_ONLY - 323)) | (1L << (RECOMPILE - 323)) | (1L << (RELATIVE - 323)) | (1L << (REMOTE - 323)) | (1L << (REPEATABLE - 323)) | (1L << (ROBUST - 323)) | (1L << (ROOT - 323)) | (1L << (ROW - 323)) | (1L << (ROWGUID - 323)) | (1L << (ROWS - 323)) | (1L << (ROW_NUMBER - 323)) | (1L << (SAMPLE - 323)) | (1L << (SCHEMABINDING - 323)) | (1L << (SCROLL - 323)) | (1L << (SCROLL_LOCKS - 323)) | (1L << (SELF - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SIMPLE - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 323)) | (1L << (STATIC - 323)) | (1L << (STATS_STREAM - 323)) | (1L << (STDEV - 323)) | (1L << (STDEVP - 323)) | (1L << (SUM - 323)) | (1L << (TEXTIMAGE_ON - 323)) | (1L << (THROW - 323)) | (1L << (TIES - 323)) | (1L << (TIME - 323)) | (1L << (TRY - 323)) | (1L << (TYPE - 323)) | (1L << (TYPE_WARNING - 323)) | (1L << (UNBOUNDED - 323)) | (1L << (UNCOMMITTED - 323)) | (1L << (UNKNOWN - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (USING - 388)) | (1L << (VAR - 388)) | (1L << (VARP - 388)) | (1L << (VIEWS - 388)) | (1L << (VIEW_METADATA - 388)) | (1L << (WORK - 388)) | (1L << (XML - 388)) | (1L << (XMLNAMESPACES - 388)) | (1L << (DOUBLE_QUOTE_ID - 388)) | (1L << (SQUARE_BRACKET_ID - 388)) | (1L << (ID - 388)))) != 0)) {
					{
					State = 1493; id();
					}
				}

				}
				break;
			case CREATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1496; Match(CREATE);
				State = 1497;
				_la = TokenStream.La(1);
				if ( !(_la==TABLE || _la==VIEW) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				break;
			case SHOWPLAN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1498; Match(SHOWPLAN);
				}
				break;
			case IMPERSONATE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1499; Match(IMPERSONATE);
				}
				break;
			case SELECT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1500; Match(SELECT);
				}
				break;
			case REFERENCES:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1501; Match(REFERENCES);
				}
				break;
			case INSERT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1502; Match(INSERT);
				}
				break;
			case ALTER:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1503; Match(ALTER);
				State = 1511;
				_la = TokenStream.La(1);
				if (_la==ANY || _la==DATABASE || _la==FORCESEEK || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ABSOLUTE - 193)) | (1L << (APPLY - 193)) | (1L << (AUTO - 193)) | (1L << (AVG - 193)) | (1L << (BASE64 - 193)) | (1L << (CALLER - 193)) | (1L << (CAST - 193)) | (1L << (CATCH - 193)) | (1L << (CHECKSUM_AGG - 193)) | (1L << (COMMITTED - 193)) | (1L << (CONCAT - 193)) | (1L << (CONTROL - 193)) | (1L << (COOKIE - 193)) | (1L << (COUNT - 193)) | (1L << (COUNT_BIG - 193)) | (1L << (DELAY - 193)) | (1L << (DELETED - 193)) | (1L << (DENSE_RANK - 193)) | (1L << (DISABLE - 193)) | (1L << (DYNAMIC - 193)) | (1L << (ENCRYPTION - 193)) | (1L << (EXPAND - 193)) | (1L << (FAST - 193)) | (1L << (FAST_FORWARD - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (FIRST - 259)) | (1L << (FOLLOWING - 259)) | (1L << (FORCE - 259)) | (1L << (FORCED - 259)) | (1L << (FORWARD_ONLY - 259)) | (1L << (FULLSCAN - 259)) | (1L << (GLOBAL - 259)) | (1L << (GO - 259)) | (1L << (GROUPING - 259)) | (1L << (GROUPING_ID - 259)) | (1L << (HASH - 259)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 259)) | (1L << (IMPERSONATE - 259)) | (1L << (INSENSITIVE - 259)) | (1L << (INSERTED - 259)) | (1L << (ISOLATION - 259)) | (1L << (KEEP - 259)) | (1L << (KEEPFIXED - 259)) | (1L << (KEYSET - 259)) | (1L << (LAST - 259)) | (1L << (LEVEL - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCK_ESCALATION - 259)) | (1L << (LOGIN - 259)) | (1L << (LOOP - 259)) | (1L << (MARK - 259)) | (1L << (MAX - 259)) | (1L << (MAXDOP - 259)) | (1L << (MAXRECURSION - 259)) | (1L << (MIN - 259)) | (1L << (MODIFY - 259)) | (1L << (NAME - 259)) | (1L << (NEXT - 259)) | (1L << (NOCOUNT - 259)) | (1L << (NOEXPAND - 259)) | (1L << (NORECOMPUTE - 259)) | (1L << (NTILE - 259)) | (1L << (NUMBER - 259)) | (1L << (OFFSET - 259)) | (1L << (ONLINE - 259)) | (1L << (ONLY - 259)) | (1L << (OPTIMISTIC - 259)) | (1L << (OPTIMIZE - 259)) | (1L << (OUT - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (OUTPUT - 323)) | (1L << (OWNER - 323)) | (1L << (PARAMETERIZATION - 323)) | (1L << (PARTITION - 323)) | (1L << (PATH - 323)) | (1L << (PRECEDING - 323)) | (1L << (PRIOR - 323)) | (1L << (PRIVILEGES - 323)) | (1L << (RANGE - 323)) | (1L << (RANK - 323)) | (1L << (READONLY - 323)) | (1L << (READ_ONLY - 323)) | (1L << (RECOMPILE - 323)) | (1L << (RELATIVE - 323)) | (1L << (REMOTE - 323)) | (1L << (REPEATABLE - 323)) | (1L << (ROBUST - 323)) | (1L << (ROOT - 323)) | (1L << (ROW - 323)) | (1L << (ROWGUID - 323)) | (1L << (ROWS - 323)) | (1L << (ROW_NUMBER - 323)) | (1L << (SAMPLE - 323)) | (1L << (SCHEMABINDING - 323)) | (1L << (SCROLL - 323)) | (1L << (SCROLL_LOCKS - 323)) | (1L << (SELF - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SIMPLE - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 323)) | (1L << (STATIC - 323)) | (1L << (STATS_STREAM - 323)) | (1L << (STDEV - 323)) | (1L << (STDEVP - 323)) | (1L << (SUM - 323)) | (1L << (TEXTIMAGE_ON - 323)) | (1L << (THROW - 323)) | (1L << (TIES - 323)) | (1L << (TIME - 323)) | (1L << (TRY - 323)) | (1L << (TYPE - 323)) | (1L << (TYPE_WARNING - 323)) | (1L << (UNBOUNDED - 323)) | (1L << (UNCOMMITTED - 323)) | (1L << (UNKNOWN - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (USING - 388)) | (1L << (VAR - 388)) | (1L << (VARP - 388)) | (1L << (VIEWS - 388)) | (1L << (VIEW_METADATA - 388)) | (1L << (WORK - 388)) | (1L << (XML - 388)) | (1L << (XMLNAMESPACES - 388)) | (1L << (DOUBLE_QUOTE_ID - 388)) | (1L << (SQUARE_BRACKET_ID - 388)) | (1L << (ID - 388)))) != 0)) {
					{
					State = 1505;
					_la = TokenStream.La(1);
					if (_la==ANY) {
						{
						State = 1504; Match(ANY);
						}
					}

					State = 1509;
					switch (TokenStream.La(1)) {
					case FORCESEEK:
					case ABSOLUTE:
					case APPLY:
					case AUTO:
					case AVG:
					case BASE64:
					case CALLER:
					case CAST:
					case CATCH:
					case CHECKSUM_AGG:
					case COMMITTED:
					case CONCAT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case DELAY:
					case DELETED:
					case DENSE_RANK:
					case DISABLE:
					case DYNAMIC:
					case ENCRYPTION:
					case EXPAND:
					case FAST:
					case FAST_FORWARD:
					case FIRST:
					case FOLLOWING:
					case FORCE:
					case FORCED:
					case FORWARD_ONLY:
					case FULLSCAN:
					case GLOBAL:
					case GO:
					case GROUPING:
					case GROUPING_ID:
					case HASH:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMPERSONATE:
					case INSENSITIVE:
					case INSERTED:
					case ISOLATION:
					case KEEP:
					case KEEPFIXED:
					case KEYSET:
					case LAST:
					case LEVEL:
					case LOCAL:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case MARK:
					case MAX:
					case MAXDOP:
					case MAXRECURSION:
					case MIN:
					case MODIFY:
					case NAME:
					case NEXT:
					case NOCOUNT:
					case NOEXPAND:
					case NORECOMPUTE:
					case NTILE:
					case NUMBER:
					case OFFSET:
					case ONLINE:
					case ONLY:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PARAMETERIZATION:
					case PARTITION:
					case PATH:
					case PRECEDING:
					case PRIOR:
					case PRIVILEGES:
					case RANGE:
					case RANK:
					case READONLY:
					case READ_ONLY:
					case RECOMPILE:
					case RELATIVE:
					case REMOTE:
					case REPEATABLE:
					case ROBUST:
					case ROOT:
					case ROW:
					case ROWGUID:
					case ROWS:
					case ROW_NUMBER:
					case SAMPLE:
					case SCHEMABINDING:
					case SCROLL:
					case SCROLL_LOCKS:
					case SELF:
					case SERIALIZABLE:
					case SIMPLE:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STATIC:
					case STATS_STREAM:
					case STDEV:
					case STDEVP:
					case SUM:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TRY:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case USING:
					case VAR:
					case VARP:
					case VIEWS:
					case VIEW_METADATA:
					case WORK:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						State = 1507; id();
						}
						break;
					case DATABASE:
						{
						State = 1508; Match(DATABASE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_statementContext : ParserRuleContext {
		public IdContext member_name;
		public ITerminalNode SET() { return GetToken(tsqlParser.SET, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public ITerminalNode CURSOR() { return GetToken(tsqlParser.CURSOR, 0); }
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return GetRuleContext<Declare_set_cursor_commonContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(tsqlParser.FOR, 0); }
		public ITerminalNode READ() { return GetToken(tsqlParser.READ, 0); }
		public ITerminalNode ONLY() { return GetToken(tsqlParser.ONLY, 0); }
		public ITerminalNode UPDATE() { return GetToken(tsqlParser.UPDATE, 0); }
		public ITerminalNode OF() { return GetToken(tsqlParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Set_specialContext set_special() {
			return GetRuleContext<Set_specialContext>(0);
		}
		public Set_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSet_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSet_statement(this);
		}
	}

	[RuleVersion(0)]
	public Set_statementContext set_statement() {
		Set_statementContext _localctx = new Set_statementContext(Context, State);
		EnterRule(_localctx, 132, RULE_set_statement);
		int _la;
		try {
			State = 1554;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,220,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1515; Match(SET);
				State = 1516; Match(LOCAL_ID);
				State = 1519;
				_la = TokenStream.La(1);
				if (_la==DOT) {
					{
					State = 1517; Match(DOT);
					State = 1518; _localctx.member_name = id();
					}
				}

				State = 1521; Match(EQUAL);
				State = 1522; expression(0);
				State = 1524;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,214,Context) ) {
				case 1:
					{
					State = 1523; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1526; Match(SET);
				State = 1527; Match(LOCAL_ID);
				State = 1528; assignment_operator();
				State = 1529; expression(0);
				State = 1531;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,215,Context) ) {
				case 1:
					{
					State = 1530; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1533; Match(SET);
				State = 1534; Match(LOCAL_ID);
				State = 1535; Match(EQUAL);
				State = 1536; Match(CURSOR);
				State = 1537; declare_set_cursor_common();
				State = 1548;
				_la = TokenStream.La(1);
				if (_la==FOR) {
					{
					State = 1538; Match(FOR);
					State = 1546;
					switch (TokenStream.La(1)) {
					case READ:
						{
						State = 1539; Match(READ);
						State = 1540; Match(ONLY);
						}
						break;
					case UPDATE:
						{
						State = 1541; Match(UPDATE);
						State = 1544;
						_la = TokenStream.La(1);
						if (_la==OF) {
							{
							State = 1542; Match(OF);
							State = 1543; column_name_list();
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 1551;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,219,Context) ) {
				case 1:
					{
					State = 1550; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1553; set_special();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_statementContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(tsqlParser.BEGIN, 0); }
		public ITerminalNode DISTRIBUTED() { return GetToken(tsqlParser.DISTRIBUTED, 0); }
		public ITerminalNode TRAN() { return GetToken(tsqlParser.TRAN, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(tsqlParser.TRANSACTION, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		public ITerminalNode MARK() { return GetToken(tsqlParser.MARK, 0); }
		public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public ITerminalNode COMMIT() { return GetToken(tsqlParser.COMMIT, 0); }
		public ITerminalNode DELAYED_DURABILITY() { return GetToken(tsqlParser.DELAYED_DURABILITY, 0); }
		public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		public ITerminalNode OFF() { return GetToken(tsqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		public ITerminalNode WORK() { return GetToken(tsqlParser.WORK, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(tsqlParser.ROLLBACK, 0); }
		public ITerminalNode SAVE() { return GetToken(tsqlParser.SAVE, 0); }
		public Transaction_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTransaction_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTransaction_statement(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_statementContext transaction_statement() {
		Transaction_statementContext _localctx = new Transaction_statementContext(Context, State);
		EnterRule(_localctx, 134, RULE_transaction_statement);
		int _la;
		try {
			State = 1633;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,239,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1556; Match(BEGIN);
				State = 1557; Match(DISTRIBUTED);
				State = 1558;
				_la = TokenStream.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 1561;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,221,Context) ) {
				case 1:
					{
					State = 1559; id();
					}
					break;
				case 2:
					{
					State = 1560; Match(LOCAL_ID);
					}
					break;
				}
				State = 1564;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,222,Context) ) {
				case 1:
					{
					State = 1563; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1566; Match(BEGIN);
				State = 1567;
				_la = TokenStream.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 1577;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,225,Context) ) {
				case 1:
					{
					State = 1570;
					switch (TokenStream.La(1)) {
					case FORCESEEK:
					case ABSOLUTE:
					case APPLY:
					case AUTO:
					case AVG:
					case BASE64:
					case CALLER:
					case CAST:
					case CATCH:
					case CHECKSUM_AGG:
					case COMMITTED:
					case CONCAT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case DELAY:
					case DELETED:
					case DENSE_RANK:
					case DISABLE:
					case DYNAMIC:
					case ENCRYPTION:
					case EXPAND:
					case FAST:
					case FAST_FORWARD:
					case FIRST:
					case FOLLOWING:
					case FORCE:
					case FORCED:
					case FORWARD_ONLY:
					case FULLSCAN:
					case GLOBAL:
					case GO:
					case GROUPING:
					case GROUPING_ID:
					case HASH:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMPERSONATE:
					case INSENSITIVE:
					case INSERTED:
					case ISOLATION:
					case KEEP:
					case KEEPFIXED:
					case KEYSET:
					case LAST:
					case LEVEL:
					case LOCAL:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case MARK:
					case MAX:
					case MAXDOP:
					case MAXRECURSION:
					case MIN:
					case MODIFY:
					case NAME:
					case NEXT:
					case NOCOUNT:
					case NOEXPAND:
					case NORECOMPUTE:
					case NTILE:
					case NUMBER:
					case OFFSET:
					case ONLINE:
					case ONLY:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PARAMETERIZATION:
					case PARTITION:
					case PATH:
					case PRECEDING:
					case PRIOR:
					case PRIVILEGES:
					case RANGE:
					case RANK:
					case READONLY:
					case READ_ONLY:
					case RECOMPILE:
					case RELATIVE:
					case REMOTE:
					case REPEATABLE:
					case ROBUST:
					case ROOT:
					case ROW:
					case ROWGUID:
					case ROWS:
					case ROW_NUMBER:
					case SAMPLE:
					case SCHEMABINDING:
					case SCROLL:
					case SCROLL_LOCKS:
					case SELF:
					case SERIALIZABLE:
					case SIMPLE:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STATIC:
					case STATS_STREAM:
					case STDEV:
					case STDEVP:
					case SUM:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TRY:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case USING:
					case VAR:
					case VARP:
					case VIEWS:
					case VIEW_METADATA:
					case WORK:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						State = 1568; id();
						}
						break;
					case LOCAL_ID:
						{
						State = 1569; Match(LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1575;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,224,Context) ) {
					case 1:
						{
						State = 1572; Match(WITH);
						State = 1573; Match(MARK);
						State = 1574; Match(STRING);
						}
						break;
					}
					}
					break;
				}
				State = 1580;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,226,Context) ) {
				case 1:
					{
					State = 1579; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1582; Match(COMMIT);
				State = 1583;
				_la = TokenStream.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 1596;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,229,Context) ) {
				case 1:
					{
					State = 1586;
					switch (TokenStream.La(1)) {
					case FORCESEEK:
					case ABSOLUTE:
					case APPLY:
					case AUTO:
					case AVG:
					case BASE64:
					case CALLER:
					case CAST:
					case CATCH:
					case CHECKSUM_AGG:
					case COMMITTED:
					case CONCAT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case DELAY:
					case DELETED:
					case DENSE_RANK:
					case DISABLE:
					case DYNAMIC:
					case ENCRYPTION:
					case EXPAND:
					case FAST:
					case FAST_FORWARD:
					case FIRST:
					case FOLLOWING:
					case FORCE:
					case FORCED:
					case FORWARD_ONLY:
					case FULLSCAN:
					case GLOBAL:
					case GO:
					case GROUPING:
					case GROUPING_ID:
					case HASH:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMPERSONATE:
					case INSENSITIVE:
					case INSERTED:
					case ISOLATION:
					case KEEP:
					case KEEPFIXED:
					case KEYSET:
					case LAST:
					case LEVEL:
					case LOCAL:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case MARK:
					case MAX:
					case MAXDOP:
					case MAXRECURSION:
					case MIN:
					case MODIFY:
					case NAME:
					case NEXT:
					case NOCOUNT:
					case NOEXPAND:
					case NORECOMPUTE:
					case NTILE:
					case NUMBER:
					case OFFSET:
					case ONLINE:
					case ONLY:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PARAMETERIZATION:
					case PARTITION:
					case PATH:
					case PRECEDING:
					case PRIOR:
					case PRIVILEGES:
					case RANGE:
					case RANK:
					case READONLY:
					case READ_ONLY:
					case RECOMPILE:
					case RELATIVE:
					case REMOTE:
					case REPEATABLE:
					case ROBUST:
					case ROOT:
					case ROW:
					case ROWGUID:
					case ROWS:
					case ROW_NUMBER:
					case SAMPLE:
					case SCHEMABINDING:
					case SCROLL:
					case SCROLL_LOCKS:
					case SELF:
					case SERIALIZABLE:
					case SIMPLE:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STATIC:
					case STATS_STREAM:
					case STDEV:
					case STDEVP:
					case SUM:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TRY:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case USING:
					case VAR:
					case VARP:
					case VIEWS:
					case VIEW_METADATA:
					case WORK:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						State = 1584; id();
						}
						break;
					case LOCAL_ID:
						{
						State = 1585; Match(LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1594;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,228,Context) ) {
					case 1:
						{
						State = 1588; Match(WITH);
						State = 1589; Match(LR_BRACKET);
						State = 1590; Match(DELAYED_DURABILITY);
						State = 1591; Match(EQUAL);
						State = 1592;
						_la = TokenStream.La(1);
						if ( !(_la==OFF || _la==ON) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1593; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				State = 1599;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,230,Context) ) {
				case 1:
					{
					State = 1598; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1601; Match(COMMIT);
				State = 1603;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,231,Context) ) {
				case 1:
					{
					State = 1602; Match(WORK);
					}
					break;
				}
				State = 1606;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,232,Context) ) {
				case 1:
					{
					State = 1605; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1608; Match(ROLLBACK);
				State = 1609;
				_la = TokenStream.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 1612;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,233,Context) ) {
				case 1:
					{
					State = 1610; id();
					}
					break;
				case 2:
					{
					State = 1611; Match(LOCAL_ID);
					}
					break;
				}
				State = 1615;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,234,Context) ) {
				case 1:
					{
					State = 1614; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1617; Match(ROLLBACK);
				State = 1619;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,235,Context) ) {
				case 1:
					{
					State = 1618; Match(WORK);
					}
					break;
				}
				State = 1622;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,236,Context) ) {
				case 1:
					{
					State = 1621; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1624; Match(SAVE);
				State = 1625;
				_la = TokenStream.La(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 1628;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,237,Context) ) {
				case 1:
					{
					State = 1626; id();
					}
					break;
				case 2:
					{
					State = 1627; Match(LOCAL_ID);
					}
					break;
				}
				State = 1631;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,238,Context) ) {
				case 1:
					{
					State = 1630; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Go_statementContext : ParserRuleContext {
		public IToken count;
		public ITerminalNode GO() { return GetToken(tsqlParser.GO, 0); }
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public Go_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_go_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterGo_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitGo_statement(this);
		}
	}

	[RuleVersion(0)]
	public Go_statementContext go_statement() {
		Go_statementContext _localctx = new Go_statementContext(Context, State);
		EnterRule(_localctx, 136, RULE_go_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1635; Match(GO);
			State = 1637;
			_la = TokenStream.La(1);
			if (_la==DECIMAL) {
				{
				State = 1636; _localctx.count = Match(DECIMAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Use_statementContext : ParserRuleContext {
		public IdContext database;
		public ITerminalNode USE() { return GetToken(tsqlParser.USE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Use_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterUse_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitUse_statement(this);
		}
	}

	[RuleVersion(0)]
	public Use_statementContext use_statement() {
		Use_statementContext _localctx = new Use_statementContext(Context, State);
		EnterRule(_localctx, 138, RULE_use_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1639; Match(USE);
			State = 1640; _localctx.database = id();
			State = 1642;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,241,Context) ) {
			case 1:
				{
				State = 1641; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_clauseContext : ParserRuleContext {
		public IToken clause;
		public ITerminalNode EXECUTE() { return GetToken(tsqlParser.EXECUTE, 0); }
		public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public ITerminalNode CALLER() { return GetToken(tsqlParser.CALLER, 0); }
		public ITerminalNode SELF() { return GetToken(tsqlParser.SELF, 0); }
		public ITerminalNode OWNER() { return GetToken(tsqlParser.OWNER, 0); }
		public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public Execute_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterExecute_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitExecute_clause(this);
		}
	}

	[RuleVersion(0)]
	public Execute_clauseContext execute_clause() {
		Execute_clauseContext _localctx = new Execute_clauseContext(Context, State);
		EnterRule(_localctx, 140, RULE_execute_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1644; Match(EXECUTE);
			State = 1645; Match(AS);
			State = 1646;
			_localctx.clause = TokenStream.Lt(1);
			_la = TokenStream.La(1);
			if ( !(_la==CALLER || _la==OWNER || _la==SELF || _la==STRING) ) {
				_localctx.clause = ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_localContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Declare_localContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_local; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDeclare_local(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDeclare_local(this);
		}
	}

	[RuleVersion(0)]
	public Declare_localContext declare_local() {
		Declare_localContext _localctx = new Declare_localContext(Context, State);
		EnterRule(_localctx, 142, RULE_declare_local);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1648; Match(LOCAL_ID);
			State = 1650;
			_la = TokenStream.La(1);
			if (_la==AS) {
				{
				State = 1649; Match(AS);
				}
			}

			State = 1652; data_type();
			State = 1655;
			_la = TokenStream.La(1);
			if (_la==EQUAL) {
				{
				State = 1653; Match(EQUAL);
				State = 1654; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_type_definitionContext : ParserRuleContext {
		public ITerminalNode TABLE() { return GetToken(tsqlParser.TABLE, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		public Table_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_type_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_type_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_type_definition(this);
		}
	}

	[RuleVersion(0)]
	public Table_type_definitionContext table_type_definition() {
		Table_type_definitionContext _localctx = new Table_type_definitionContext(Context, State);
		EnterRule(_localctx, 144, RULE_table_type_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1657; Match(TABLE);
			State = 1658; Match(LR_BRACKET);
			State = 1659; column_def_table_constraints();
			State = 1660; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_def_table_constraintsContext : ParserRuleContext {
		public Column_def_table_constraintContext[] column_def_table_constraint() {
			return GetRuleContexts<Column_def_table_constraintContext>();
		}
		public Column_def_table_constraintContext column_def_table_constraint(int i) {
			return GetRuleContext<Column_def_table_constraintContext>(i);
		}
		public Column_def_table_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def_table_constraints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterColumn_def_table_constraints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitColumn_def_table_constraints(this);
		}
	}

	[RuleVersion(0)]
	public Column_def_table_constraintsContext column_def_table_constraints() {
		Column_def_table_constraintsContext _localctx = new Column_def_table_constraintsContext(Context, State);
		EnterRule(_localctx, 146, RULE_column_def_table_constraints);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1662; column_def_table_constraint();
			State = 1669;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,245,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1664;
					_la = TokenStream.La(1);
					if (_la==COMMA) {
						{
						State = 1663; Match(COMMA);
						}
					}

					State = 1666; column_def_table_constraint();
					}
					} 
				}
				State = 1671;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,245,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_def_table_constraintContext : ParserRuleContext {
		public Column_definitionContext column_definition() {
			return GetRuleContext<Column_definitionContext>(0);
		}
		public Table_constraintContext table_constraint() {
			return GetRuleContext<Table_constraintContext>(0);
		}
		public Column_def_table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def_table_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterColumn_def_table_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitColumn_def_table_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Column_def_table_constraintContext column_def_table_constraint() {
		Column_def_table_constraintContext _localctx = new Column_def_table_constraintContext(Context, State);
		EnterRule(_localctx, 148, RULE_column_def_table_constraint);
		try {
			State = 1674;
			switch (TokenStream.La(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1672; column_definition();
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case PRIMARY:
			case UNIQUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1673; table_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_definitionContext : ParserRuleContext {
		public IdContext constraint;
		public IToken seed;
		public IToken increment;
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COLLATE() { return GetToken(tsqlParser.COLLATE, 0); }
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(tsqlParser.DEFAULT, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public ITerminalNode IDENTITY() { return GetToken(tsqlParser.IDENTITY, 0); }
		public ITerminalNode ROWGUIDCOL() { return GetToken(tsqlParser.ROWGUIDCOL, 0); }
		public Column_constraintContext[] column_constraint() {
			return GetRuleContexts<Column_constraintContext>();
		}
		public Column_constraintContext column_constraint(int i) {
			return GetRuleContext<Column_constraintContext>(i);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(tsqlParser.CONSTRAINT, 0); }
		public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		public ITerminalNode VALUES() { return GetToken(tsqlParser.VALUES, 0); }
		public ITerminalNode NOT() { return GetToken(tsqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(tsqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(tsqlParser.REPLICATION, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(tsqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(tsqlParser.DECIMAL, i);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterColumn_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitColumn_definition(this);
		}
	}

	[RuleVersion(0)]
	public Column_definitionContext column_definition() {
		Column_definitionContext _localctx = new Column_definitionContext(Context, State);
		EnterRule(_localctx, 150, RULE_column_definition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1676; id();
			State = 1680;
			switch (TokenStream.La(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				State = 1677; data_type();
				}
				break;
			case AS:
				{
				State = 1678; Match(AS);
				State = 1679; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1684;
			_la = TokenStream.La(1);
			if (_la==COLLATE) {
				{
				State = 1682; Match(COLLATE);
				State = 1683; id();
				}
			}

			State = 1687;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,249,Context) ) {
			case 1:
				{
				State = 1686; null_notnull();
				}
				break;
			}
			State = 1712;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,254,Context) ) {
			case 1:
				{
				State = 1691;
				_la = TokenStream.La(1);
				if (_la==CONSTRAINT) {
					{
					State = 1689; Match(CONSTRAINT);
					State = 1690; _localctx.constraint = id();
					}
				}

				State = 1693; Match(DEFAULT);
				State = 1694; constant_expression();
				State = 1697;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,251,Context) ) {
				case 1:
					{
					State = 1695; Match(WITH);
					State = 1696; Match(VALUES);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 1699; Match(IDENTITY);
				State = 1705;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,252,Context) ) {
				case 1:
					{
					State = 1700; Match(LR_BRACKET);
					State = 1701; _localctx.seed = Match(DECIMAL);
					State = 1702; Match(COMMA);
					State = 1703; _localctx.increment = Match(DECIMAL);
					State = 1704; Match(RR_BRACKET);
					}
					break;
				}
				State = 1710;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,253,Context) ) {
				case 1:
					{
					State = 1707; Match(NOT);
					State = 1708; Match(FOR);
					State = 1709; Match(REPLICATION);
					}
					break;
				}
				}
				break;
			}
			State = 1715;
			_la = TokenStream.La(1);
			if (_la==ROWGUIDCOL) {
				{
				State = 1714; Match(ROWGUIDCOL);
				}
			}

			State = 1720;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,256,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1717; column_constraint();
					}
					} 
				}
				State = 1722;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,256,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraintContext : ParserRuleContext {
		public ITerminalNode CHECK() { return GetToken(tsqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(tsqlParser.CONSTRAINT, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public ITerminalNode PRIMARY() { return GetToken(tsqlParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(tsqlParser.KEY, 0); }
		public ITerminalNode UNIQUE() { return GetToken(tsqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(tsqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(tsqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(tsqlParser.REPLICATION, 0); }
		public Column_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterColumn_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitColumn_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraintContext column_constraint() {
		Column_constraintContext _localctx = new Column_constraintContext(Context, State);
		EnterRule(_localctx, 152, RULE_column_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1725;
			_la = TokenStream.La(1);
			if (_la==CONSTRAINT) {
				{
				State = 1723; Match(CONSTRAINT);
				State = 1724; id();
				}
			}

			State = 1728;
			_la = TokenStream.La(1);
			if (_la==NOT || _la==NULL) {
				{
				State = 1727; null_notnull();
				}
			}

			State = 1751;
			switch (TokenStream.La(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				State = 1733;
				switch (TokenStream.La(1)) {
				case PRIMARY:
					{
					State = 1730; Match(PRIMARY);
					State = 1731; Match(KEY);
					}
					break;
				case UNIQUE:
					{
					State = 1732; Match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1736;
				_la = TokenStream.La(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					State = 1735; clustered();
					}
				}

				State = 1739;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,261,Context) ) {
				case 1:
					{
					State = 1738; index_options();
					}
					break;
				}
				}
				break;
			case CHECK:
				{
				State = 1741; Match(CHECK);
				State = 1745;
				_la = TokenStream.La(1);
				if (_la==NOT) {
					{
					State = 1742; Match(NOT);
					State = 1743; Match(FOR);
					State = 1744; Match(REPLICATION);
					}
				}

				State = 1747; Match(LR_BRACKET);
				State = 1748; search_condition();
				State = 1749; Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_constraintContext : ParserRuleContext {
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode CHECK() { return GetToken(tsqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(tsqlParser.CONSTRAINT, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode PRIMARY() { return GetToken(tsqlParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(tsqlParser.KEY, 0); }
		public ITerminalNode UNIQUE() { return GetToken(tsqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		public ITerminalNode NOT() { return GetToken(tsqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(tsqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(tsqlParser.REPLICATION, 0); }
		public ITerminalNode ASC() { return GetToken(tsqlParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(tsqlParser.DESC, 0); }
		public Table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Table_constraintContext table_constraint() {
		Table_constraintContext _localctx = new Table_constraintContext(Context, State);
		EnterRule(_localctx, 154, RULE_table_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1755;
			_la = TokenStream.La(1);
			if (_la==CONSTRAINT) {
				{
				State = 1753; Match(CONSTRAINT);
				State = 1754; id();
				}
			}

			State = 1788;
			switch (TokenStream.La(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				State = 1760;
				switch (TokenStream.La(1)) {
				case PRIMARY:
					{
					State = 1757; Match(PRIMARY);
					State = 1758; Match(KEY);
					}
					break;
				case UNIQUE:
					{
					State = 1759; Match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1763;
				_la = TokenStream.La(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					State = 1762; clustered();
					}
				}

				State = 1765; Match(LR_BRACKET);
				State = 1766; column_name_list();
				State = 1768;
				_la = TokenStream.La(1);
				if (_la==ASC || _la==DESC) {
					{
					State = 1767;
					_la = TokenStream.La(1);
					if ( !(_la==ASC || _la==DESC) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
				}

				State = 1770; Match(RR_BRACKET);
				State = 1772;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,268,Context) ) {
				case 1:
					{
					State = 1771; index_options();
					}
					break;
				}
				State = 1776;
				_la = TokenStream.La(1);
				if (_la==ON) {
					{
					State = 1774; Match(ON);
					State = 1775; id();
					}
				}

				}
				break;
			case CHECK:
				{
				State = 1778; Match(CHECK);
				State = 1782;
				_la = TokenStream.La(1);
				if (_la==NOT) {
					{
					State = 1779; Match(NOT);
					State = 1780; Match(FOR);
					State = 1781; Match(REPLICATION);
					}
				}

				State = 1784; Match(LR_BRACKET);
				State = 1785; search_condition();
				State = 1786; Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		public Index_optionContext[] index_option() {
			return GetRuleContexts<Index_optionContext>();
		}
		public Index_optionContext index_option(int i) {
			return GetRuleContext<Index_optionContext>(i);
		}
		public Index_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterIndex_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitIndex_options(this);
		}
	}

	[RuleVersion(0)]
	public Index_optionsContext index_options() {
		Index_optionsContext _localctx = new Index_optionsContext(Context, State);
		EnterRule(_localctx, 156, RULE_index_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1790; Match(WITH);
			State = 1791; Match(LR_BRACKET);
			State = 1792; index_option();
			State = 1797;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1793; Match(COMMA);
				State = 1794; index_option();
				}
				}
				State = 1799;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 1800; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_optionContext : ParserRuleContext {
		public Simple_idContext[] simple_id() {
			return GetRuleContexts<Simple_idContext>();
		}
		public Simple_idContext simple_id(int i) {
			return GetRuleContext<Simple_idContext>(i);
		}
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public Index_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterIndex_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitIndex_option(this);
		}
	}

	[RuleVersion(0)]
	public Index_optionContext index_option() {
		Index_optionContext _localctx = new Index_optionContext(Context, State);
		EnterRule(_localctx, 158, RULE_index_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1802; simple_id();
			State = 1803; Match(EQUAL);
			State = 1807;
			switch (TokenStream.La(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case ID:
				{
				State = 1804; simple_id();
				}
				break;
			case OFF:
			case ON:
				{
				State = 1805; on_off();
				}
				break;
			case DECIMAL:
				{
				State = 1806; Match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_cursorContext : ParserRuleContext {
		public ITerminalNode DECLARE() { return GetToken(tsqlParser.DECLARE, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode CURSOR() { return GetToken(tsqlParser.CURSOR, 0); }
		public ITerminalNode[] FOR() { return GetTokens(tsqlParser.FOR); }
		public ITerminalNode FOR(int i) {
			return GetToken(tsqlParser.FOR, i);
		}
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return GetRuleContext<Declare_set_cursor_commonContext>(0);
		}
		public ITerminalNode INSENSITIVE() { return GetToken(tsqlParser.INSENSITIVE, 0); }
		public ITerminalNode SCROLL() { return GetToken(tsqlParser.SCROLL, 0); }
		public ITerminalNode READ() { return GetToken(tsqlParser.READ, 0); }
		public ITerminalNode ONLY() { return GetToken(tsqlParser.ONLY, 0); }
		public ITerminalNode UPDATE() { return GetToken(tsqlParser.UPDATE, 0); }
		public ITerminalNode OF() { return GetToken(tsqlParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Declare_cursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_cursor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDeclare_cursor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDeclare_cursor(this);
		}
	}

	[RuleVersion(0)]
	public Declare_cursorContext declare_cursor() {
		Declare_cursorContext _localctx = new Declare_cursorContext(Context, State);
		EnterRule(_localctx, 160, RULE_declare_cursor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1809; Match(DECLARE);
			State = 1810; cursor_name();
			State = 1842;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,281,Context) ) {
			case 1:
				{
				State = 1811; Match(CURSOR);
				State = 1821;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
				case 1:
					{
					State = 1812; declare_set_cursor_common();
					State = 1819;
					_la = TokenStream.La(1);
					if (_la==FOR) {
						{
						State = 1813; Match(FOR);
						State = 1814; Match(UPDATE);
						State = 1817;
						_la = TokenStream.La(1);
						if (_la==OF) {
							{
							State = 1815; Match(OF);
							State = 1816; column_name_list();
							}
						}

						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 1824;
				_la = TokenStream.La(1);
				if (_la==INSENSITIVE) {
					{
					State = 1823; Match(INSENSITIVE);
					}
				}

				State = 1827;
				_la = TokenStream.La(1);
				if (_la==SCROLL) {
					{
					State = 1826; Match(SCROLL);
					}
				}

				State = 1829; Match(CURSOR);
				State = 1830; Match(FOR);
				State = 1831; select_statement();
				State = 1840;
				_la = TokenStream.La(1);
				if (_la==FOR) {
					{
					State = 1832; Match(FOR);
					State = 1838;
					switch (TokenStream.La(1)) {
					case READ:
						{
						State = 1833; Match(READ);
						State = 1834; Match(ONLY);
						}
						break;
					case UPDATE:
						{
						State = 1835; Match(UPDATE);
						}
						break;
					case OF:
						{
						{
						State = 1836; Match(OF);
						State = 1837; column_name_list();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			}
			State = 1845;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,282,Context) ) {
			case 1:
				{
				State = 1844; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_set_cursor_commonContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(tsqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public ITerminalNode TYPE_WARNING() { return GetToken(tsqlParser.TYPE_WARNING, 0); }
		public ITerminalNode LOCAL() { return GetToken(tsqlParser.LOCAL, 0); }
		public ITerminalNode GLOBAL() { return GetToken(tsqlParser.GLOBAL, 0); }
		public ITerminalNode FORWARD_ONLY() { return GetToken(tsqlParser.FORWARD_ONLY, 0); }
		public ITerminalNode SCROLL() { return GetToken(tsqlParser.SCROLL, 0); }
		public ITerminalNode STATIC() { return GetToken(tsqlParser.STATIC, 0); }
		public ITerminalNode KEYSET() { return GetToken(tsqlParser.KEYSET, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(tsqlParser.DYNAMIC, 0); }
		public ITerminalNode FAST_FORWARD() { return GetToken(tsqlParser.FAST_FORWARD, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(tsqlParser.READ_ONLY, 0); }
		public ITerminalNode SCROLL_LOCKS() { return GetToken(tsqlParser.SCROLL_LOCKS, 0); }
		public ITerminalNode OPTIMISTIC() { return GetToken(tsqlParser.OPTIMISTIC, 0); }
		public Declare_set_cursor_commonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_set_cursor_common; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDeclare_set_cursor_common(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDeclare_set_cursor_common(this);
		}
	}

	[RuleVersion(0)]
	public Declare_set_cursor_commonContext declare_set_cursor_common() {
		Declare_set_cursor_commonContext _localctx = new Declare_set_cursor_commonContext(Context, State);
		EnterRule(_localctx, 162, RULE_declare_set_cursor_common);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1848;
			_la = TokenStream.La(1);
			if (_la==GLOBAL || _la==LOCAL) {
				{
				State = 1847;
				_la = TokenStream.La(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
			}

			State = 1851;
			_la = TokenStream.La(1);
			if (_la==FORWARD_ONLY || _la==SCROLL) {
				{
				State = 1850;
				_la = TokenStream.La(1);
				if ( !(_la==FORWARD_ONLY || _la==SCROLL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
			}

			State = 1854;
			_la = TokenStream.La(1);
			if (((((_la - 248)) & ~0x3f) == 0 && ((1L << (_la - 248)) & ((1L << (DYNAMIC - 248)) | (1L << (FAST_FORWARD - 248)) | (1L << (KEYSET - 248)))) != 0) || _la==STATIC) {
				{
				State = 1853;
				_la = TokenStream.La(1);
				if ( !(((((_la - 248)) & ~0x3f) == 0 && ((1L << (_la - 248)) & ((1L << (DYNAMIC - 248)) | (1L << (FAST_FORWARD - 248)) | (1L << (KEYSET - 248)))) != 0) || _la==STATIC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
			}

			State = 1857;
			_la = TokenStream.La(1);
			if (((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (OPTIMISTIC - 320)) | (1L << (READ_ONLY - 320)) | (1L << (SCROLL_LOCKS - 320)))) != 0)) {
				{
				State = 1856;
				_la = TokenStream.La(1);
				if ( !(((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (OPTIMISTIC - 320)) | (1L << (READ_ONLY - 320)) | (1L << (SCROLL_LOCKS - 320)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
			}

			State = 1860;
			_la = TokenStream.La(1);
			if (_la==TYPE_WARNING) {
				{
				State = 1859; Match(TYPE_WARNING);
				}
			}

			State = 1862; Match(FOR);
			State = 1863; select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fetch_cursorContext : ParserRuleContext {
		public ITerminalNode FETCH() { return GetToken(tsqlParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(tsqlParser.FROM, 0); }
		public ITerminalNode GLOBAL() { return GetToken(tsqlParser.GLOBAL, 0); }
		public ITerminalNode INTO() { return GetToken(tsqlParser.INTO, 0); }
		public ITerminalNode[] LOCAL_ID() { return GetTokens(tsqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(tsqlParser.LOCAL_ID, i);
		}
		public ITerminalNode NEXT() { return GetToken(tsqlParser.NEXT, 0); }
		public ITerminalNode PRIOR() { return GetToken(tsqlParser.PRIOR, 0); }
		public ITerminalNode FIRST() { return GetToken(tsqlParser.FIRST, 0); }
		public ITerminalNode LAST() { return GetToken(tsqlParser.LAST, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ABSOLUTE() { return GetToken(tsqlParser.ABSOLUTE, 0); }
		public ITerminalNode RELATIVE() { return GetToken(tsqlParser.RELATIVE, 0); }
		public Fetch_cursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetch_cursor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFetch_cursor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFetch_cursor(this);
		}
	}

	[RuleVersion(0)]
	public Fetch_cursorContext fetch_cursor() {
		Fetch_cursorContext _localctx = new Fetch_cursorContext(Context, State);
		EnterRule(_localctx, 164, RULE_fetch_cursor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1865; Match(FETCH);
			State = 1875;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,289,Context) ) {
			case 1:
				{
				State = 1872;
				switch (TokenStream.La(1)) {
				case NEXT:
					{
					State = 1866; Match(NEXT);
					}
					break;
				case PRIOR:
					{
					State = 1867; Match(PRIOR);
					}
					break;
				case FIRST:
					{
					State = 1868; Match(FIRST);
					}
					break;
				case LAST:
					{
					State = 1869; Match(LAST);
					}
					break;
				case ABSOLUTE:
				case RELATIVE:
					{
					State = 1870;
					_la = TokenStream.La(1);
					if ( !(_la==ABSOLUTE || _la==RELATIVE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					State = 1871; expression(0);
					}
					break;
				case FROM:
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1874; Match(FROM);
				}
				break;
			}
			State = 1878;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,290,Context) ) {
			case 1:
				{
				State = 1877; Match(GLOBAL);
				}
				break;
			}
			State = 1880; cursor_name();
			State = 1890;
			_la = TokenStream.La(1);
			if (_la==INTO) {
				{
				State = 1881; Match(INTO);
				State = 1882; Match(LOCAL_ID);
				State = 1887;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1883; Match(COMMA);
					State = 1884; Match(LOCAL_ID);
					}
					}
					State = 1889;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 1893;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,293,Context) ) {
			case 1:
				{
				State = 1892; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_specialContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(tsqlParser.SET, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID() {
			return GetRuleContext<Constant_LOCAL_IDContext>(0);
		}
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode TRANSACTION() { return GetToken(tsqlParser.TRANSACTION, 0); }
		public ITerminalNode ISOLATION() { return GetToken(tsqlParser.ISOLATION, 0); }
		public ITerminalNode LEVEL() { return GetToken(tsqlParser.LEVEL, 0); }
		public ITerminalNode READ() { return GetToken(tsqlParser.READ, 0); }
		public ITerminalNode UNCOMMITTED() { return GetToken(tsqlParser.UNCOMMITTED, 0); }
		public ITerminalNode COMMITTED() { return GetToken(tsqlParser.COMMITTED, 0); }
		public ITerminalNode REPEATABLE() { return GetToken(tsqlParser.REPEATABLE, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(tsqlParser.SNAPSHOT, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(tsqlParser.SERIALIZABLE, 0); }
		public ITerminalNode IDENTITY_INSERT() { return GetToken(tsqlParser.IDENTITY_INSERT, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode ANSI_NULLS() { return GetToken(tsqlParser.ANSI_NULLS, 0); }
		public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(tsqlParser.QUOTED_IDENTIFIER, 0); }
		public ITerminalNode ANSI_PADDING() { return GetToken(tsqlParser.ANSI_PADDING, 0); }
		public Set_specialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_special; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSet_special(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSet_special(this);
		}
	}

	[RuleVersion(0)]
	public Set_specialContext set_special() {
		Set_specialContext _localctx = new Set_specialContext(Context, State);
		EnterRule(_localctx, 166, RULE_set_special);
		try {
			State = 1938;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,299,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1895; Match(SET);
				State = 1896; id();
				State = 1900;
				switch (TokenStream.La(1)) {
				case FORCESEEK:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 1897; id();
					}
					break;
				case LOCAL_ID:
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					State = 1898; constant_LOCAL_ID();
					}
					break;
				case OFF:
				case ON:
					{
					State = 1899; on_off();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1903;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,295,Context) ) {
				case 1:
					{
					State = 1902; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1905; Match(SET);
				State = 1906; Match(TRANSACTION);
				State = 1907; Match(ISOLATION);
				State = 1908; Match(LEVEL);
				State = 1917;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,296,Context) ) {
				case 1:
					{
					State = 1909; Match(READ);
					State = 1910; Match(UNCOMMITTED);
					}
					break;
				case 2:
					{
					State = 1911; Match(READ);
					State = 1912; Match(COMMITTED);
					}
					break;
				case 3:
					{
					State = 1913; Match(REPEATABLE);
					State = 1914; Match(READ);
					}
					break;
				case 4:
					{
					State = 1915; Match(SNAPSHOT);
					}
					break;
				case 5:
					{
					State = 1916; Match(SERIALIZABLE);
					}
					break;
				}
				State = 1920;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,297,Context) ) {
				case 1:
					{
					State = 1919; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1922; Match(SET);
				State = 1923; Match(IDENTITY_INSERT);
				State = 1924; table_name();
				State = 1925; on_off();
				State = 1927;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,298,Context) ) {
				case 1:
					{
					State = 1926; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1929; Match(SET);
				State = 1930; Match(ANSI_NULLS);
				State = 1931; on_off();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1932; Match(SET);
				State = 1933; Match(QUOTED_IDENTIFIER);
				State = 1934; on_off();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1935; Match(SET);
				State = 1936; Match(ANSI_PADDING);
				State = 1937; on_off();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_LOCAL_IDContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Constant_LOCAL_IDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_LOCAL_ID; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterConstant_LOCAL_ID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitConstant_LOCAL_ID(this);
		}
	}

	[RuleVersion(0)]
	public Constant_LOCAL_IDContext constant_LOCAL_ID() {
		Constant_LOCAL_IDContext _localctx = new Constant_LOCAL_IDContext(Context, State);
		EnterRule(_localctx, 168, RULE_constant_LOCAL_ID);
		try {
			State = 1942;
			switch (TokenStream.La(1)) {
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1940; constant();
				}
				break;
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1941; Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Binary_operator_expressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public Binary_operator_expressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterBinary_operator_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitBinary_operator_expression(this);
		}
	}
	public partial class Primitive_expressionContext : ExpressionContext {
		public ITerminalNode DEFAULT() { return GetToken(tsqlParser.DEFAULT, 0); }
		public ITerminalNode NULL() { return GetToken(tsqlParser.NULL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Primitive_expressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterPrimitive_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitPrimitive_expression(this);
		}
	}
	public partial class Bracket_expressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Bracket_expressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterBracket_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitBracket_expression(this);
		}
	}
	public partial class Unary_operator_expressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Unary_operator_expressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterUnary_operator_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitUnary_operator_expression(this);
		}
	}
	public partial class Function_call_expressionContext : ExpressionContext {
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COLLATE() { return GetToken(tsqlParser.COLLATE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Function_call_expressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFunction_call_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFunction_call_expression(this);
		}
	}
	public partial class Case_expressionContext : ExpressionContext {
		public ExpressionContext caseExpr;
		public ExpressionContext elseExpr;
		public ITerminalNode CASE() { return GetToken(tsqlParser.CASE, 0); }
		public ITerminalNode END() { return GetToken(tsqlParser.END, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Switch_sectionContext[] switch_section() {
			return GetRuleContexts<Switch_sectionContext>();
		}
		public Switch_sectionContext switch_section(int i) {
			return GetRuleContext<Switch_sectionContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(tsqlParser.ELSE, 0); }
		public Switch_search_condition_sectionContext[] switch_search_condition_section() {
			return GetRuleContexts<Switch_search_condition_sectionContext>();
		}
		public Switch_search_condition_sectionContext switch_search_condition_section(int i) {
			return GetRuleContext<Switch_search_condition_sectionContext>(i);
		}
		public Case_expressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCase_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCase_expression(this);
		}
	}
	public partial class Column_ref_expressionContext : ExpressionContext {
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public Column_ref_expressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterColumn_ref_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitColumn_ref_expression(this);
		}
	}
	public partial class Subquery_expressionContext : ExpressionContext {
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Subquery_expressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSubquery_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSubquery_expression(this);
		}
	}
	public partial class Over_clause_expressionContext : ExpressionContext {
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public Over_clause_expressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOver_clause_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOver_clause_expression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 170;
		EnterRecursionRule(_localctx, 170, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1989;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,305,Context) ) {
			case 1:
				{
				_localctx = new Primitive_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1945; Match(DEFAULT);
				}
				break;
			case 2:
				{
				_localctx = new Primitive_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1946; Match(NULL);
				}
				break;
			case 3:
				{
				_localctx = new Primitive_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1947; Match(LOCAL_ID);
				}
				break;
			case 4:
				{
				_localctx = new Primitive_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1948; constant();
				}
				break;
			case 5:
				{
				_localctx = new Function_call_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1949; function_call();
				}
				break;
			case 6:
				{
				_localctx = new Case_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1950; Match(CASE);
				State = 1951; ((Case_expressionContext)_localctx).caseExpr = expression(0);
				State = 1953;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 1952; switch_section();
					}
					}
					State = 1955;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==WHEN );
				State = 1959;
				_la = TokenStream.La(1);
				if (_la==ELSE) {
					{
					State = 1957; Match(ELSE);
					State = 1958; ((Case_expressionContext)_localctx).elseExpr = expression(0);
					}
				}

				State = 1961; Match(END);
				}
				break;
			case 7:
				{
				_localctx = new Case_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1963; Match(CASE);
				State = 1965;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 1964; switch_search_condition_section();
					}
					}
					State = 1967;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==WHEN );
				State = 1971;
				_la = TokenStream.La(1);
				if (_la==ELSE) {
					{
					State = 1969; Match(ELSE);
					State = 1970; ((Case_expressionContext)_localctx).elseExpr = expression(0);
					}
				}

				State = 1973; Match(END);
				}
				break;
			case 8:
				{
				_localctx = new Column_ref_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1975; full_column_name();
				}
				break;
			case 9:
				{
				_localctx = new Bracket_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1976; Match(LR_BRACKET);
				State = 1977; expression(0);
				State = 1978; Match(RR_BRACKET);
				}
				break;
			case 10:
				{
				_localctx = new Subquery_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1980; Match(LR_BRACKET);
				State = 1981; subquery();
				State = 1982; Match(RR_BRACKET);
				}
				break;
			case 11:
				{
				_localctx = new Unary_operator_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1984; Match(BIT_NOT);
				State = 1985; expression(6);
				}
				break;
			case 12:
				{
				_localctx = new Unary_operator_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1986;
				((Unary_operator_expressionContext)_localctx).op = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					((Unary_operator_expressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 1987; expression(4);
				}
				break;
			case 13:
				{
				_localctx = new Over_clause_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1988; over_clause();
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2006;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,307,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2004;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,306,Context) ) {
					case 1:
						{
						_localctx = new Binary_operator_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1991;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1992;
						((Binary_operator_expressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 431)) & ~0x3f) == 0 && ((1L << (_la - 431)) & ((1L << (STAR - 431)) | (1L << (DIVIDE - 431)) | (1L << (MODULE - 431)))) != 0)) ) {
							((Binary_operator_expressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1993; expression(6);
						}
						break;
					case 2:
						{
						_localctx = new Binary_operator_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1994;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1995;
						((Binary_operator_expressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 434)) & ~0x3f) == 0 && ((1L << (_la - 434)) & ((1L << (PLUS - 434)) | (1L << (MINUS - 434)) | (1L << (BIT_OR - 434)) | (1L << (BIT_AND - 434)) | (1L << (BIT_XOR - 434)))) != 0)) ) {
							((Binary_operator_expressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1996; expression(4);
						}
						break;
					case 3:
						{
						_localctx = new Binary_operator_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1997;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1998; comparison_operator();
						State = 1999; expression(3);
						}
						break;
					case 4:
						{
						_localctx = new Function_call_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2001;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 2002; Match(COLLATE);
						State = 2003; id();
						}
						break;
					}
					} 
				}
				State = 2008;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,307,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Constant_expressionContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(tsqlParser.NULL, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public Constant_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterConstant_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitConstant_expression(this);
		}
	}

	[RuleVersion(0)]
	public Constant_expressionContext constant_expression() {
		Constant_expressionContext _localctx = new Constant_expressionContext(Context, State);
		EnterRule(_localctx, 172, RULE_constant_expression);
		try {
			State = 2017;
			switch (TokenStream.La(1)) {
			case NULL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2009; Match(NULL);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2010; constant();
				}
				break;
			case COALESCE:
			case CONVERT:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case FORCESEEK:
			case IDENTITY:
			case LEFT:
			case NULLIF:
			case RIGHT:
			case SESSION_USER:
			case SYSTEM_USER:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case BINARY_CHECKSUM:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2011; function_call();
				}
				break;
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2012; Match(LOCAL_ID);
				}
				break;
			case LR_BRACKET:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2013; Match(LR_BRACKET);
				State = 2014; constant_expression();
				State = 2015; Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubqueryContext : ParserRuleContext {
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSubquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSubquery(this);
		}
	}

	[RuleVersion(0)]
	public SubqueryContext subquery() {
		SubqueryContext _localctx = new SubqueryContext(Context, State);
		EnterRule(_localctx, 174, RULE_subquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2019; select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_expressionContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		public Common_table_expressionContext[] common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		public ITerminalNode XMLNAMESPACES() { return GetToken(tsqlParser.XMLNAMESPACES, 0); }
		public With_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterWith_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitWith_expression(this);
		}
	}

	[RuleVersion(0)]
	public With_expressionContext with_expression() {
		With_expressionContext _localctx = new With_expressionContext(Context, State);
		EnterRule(_localctx, 176, RULE_with_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2021; Match(WITH);
			State = 2024;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,309,Context) ) {
			case 1:
				{
				State = 2022; Match(XMLNAMESPACES);
				State = 2023; Match(COMMA);
				}
				break;
			}
			State = 2026; common_table_expression();
			State = 2031;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2027; Match(COMMA);
				State = 2028; common_table_expression();
				}
				}
				State = 2033;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_table_expressionContext : ParserRuleContext {
		public IdContext expression_name;
		public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_table_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCommon_table_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCommon_table_expression(this);
		}
	}

	[RuleVersion(0)]
	public Common_table_expressionContext common_table_expression() {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(Context, State);
		EnterRule(_localctx, 178, RULE_common_table_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2034; _localctx.expression_name = id();
			State = 2039;
			_la = TokenStream.La(1);
			if (_la==LR_BRACKET) {
				{
				State = 2035; Match(LR_BRACKET);
				State = 2036; column_name_list();
				State = 2037; Match(RR_BRACKET);
				}
			}

			State = 2041; Match(AS);
			State = 2042; Match(LR_BRACKET);
			State = 2043; select_statement();
			State = 2044; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_elemContext : ParserRuleContext {
		public IdContext udt_column_name;
		public IdContext method_name;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Update_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterUpdate_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitUpdate_elem(this);
		}
	}

	[RuleVersion(0)]
	public Update_elemContext update_elem() {
		Update_elemContext _localctx = new Update_elemContext(Context, State);
		EnterRule(_localctx, 180, RULE_update_elem);
		try {
			State = 2062;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,314,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2048;
				switch (TokenStream.La(1)) {
				case FORCESEEK:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 2046; full_column_name();
					}
					break;
				case LOCAL_ID:
					{
					State = 2047; Match(LOCAL_ID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2052;
				switch (TokenStream.La(1)) {
				case EQUAL:
					{
					State = 2050; Match(EQUAL);
					}
					break;
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
					{
					State = 2051; assignment_operator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2054; expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2055; _localctx.udt_column_name = id();
				State = 2056; Match(DOT);
				State = 2057; _localctx.method_name = id();
				State = 2058; Match(LR_BRACKET);
				State = 2059; expression_list();
				State = 2060; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_condition_listContext : ParserRuleContext {
		public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		public Search_condition_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_condition_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSearch_condition_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSearch_condition_list(this);
		}
	}

	[RuleVersion(0)]
	public Search_condition_listContext search_condition_list() {
		Search_condition_listContext _localctx = new Search_condition_listContext(Context, State);
		EnterRule(_localctx, 182, RULE_search_condition_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2064; search_condition();
			State = 2069;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2065; Match(COMMA);
				State = 2066; search_condition();
				}
				}
				State = 2071;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_conditionContext : ParserRuleContext {
		public Search_condition_andContext[] search_condition_and() {
			return GetRuleContexts<Search_condition_andContext>();
		}
		public Search_condition_andContext search_condition_and(int i) {
			return GetRuleContext<Search_condition_andContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(tsqlParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(tsqlParser.OR, i);
		}
		public Search_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSearch_condition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSearch_condition(this);
		}
	}

	[RuleVersion(0)]
	public Search_conditionContext search_condition() {
		Search_conditionContext _localctx = new Search_conditionContext(Context, State);
		EnterRule(_localctx, 184, RULE_search_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2072; search_condition_and();
			State = 2077;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OR) {
				{
				{
				State = 2073; Match(OR);
				State = 2074; search_condition_and();
				}
				}
				State = 2079;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_condition_andContext : ParserRuleContext {
		public Search_condition_notContext[] search_condition_not() {
			return GetRuleContexts<Search_condition_notContext>();
		}
		public Search_condition_notContext search_condition_not(int i) {
			return GetRuleContext<Search_condition_notContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(tsqlParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(tsqlParser.AND, i);
		}
		public Search_condition_andContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_condition_and; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSearch_condition_and(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSearch_condition_and(this);
		}
	}

	[RuleVersion(0)]
	public Search_condition_andContext search_condition_and() {
		Search_condition_andContext _localctx = new Search_condition_andContext(Context, State);
		EnterRule(_localctx, 186, RULE_search_condition_and);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2080; search_condition_not();
			State = 2085;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==AND) {
				{
				{
				State = 2081; Match(AND);
				State = 2082; search_condition_not();
				}
				}
				State = 2087;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_condition_notContext : ParserRuleContext {
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(tsqlParser.NOT, 0); }
		public Search_condition_notContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_condition_not; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSearch_condition_not(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSearch_condition_not(this);
		}
	}

	[RuleVersion(0)]
	public Search_condition_notContext search_condition_not() {
		Search_condition_notContext _localctx = new Search_condition_notContext(Context, State);
		EnterRule(_localctx, 188, RULE_search_condition_not);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2089;
			_la = TokenStream.La(1);
			if (_la==NOT) {
				{
				State = 2088; Match(NOT);
				}
			}

			State = 2091; predicate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ITerminalNode EXISTS() { return GetToken(tsqlParser.EXISTS, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(tsqlParser.ALL, 0); }
		public ITerminalNode SOME() { return GetToken(tsqlParser.SOME, 0); }
		public ITerminalNode ANY() { return GetToken(tsqlParser.ANY, 0); }
		public ITerminalNode BETWEEN() { return GetToken(tsqlParser.BETWEEN, 0); }
		public ITerminalNode AND() { return GetToken(tsqlParser.AND, 0); }
		public ITerminalNode NOT() { return GetToken(tsqlParser.NOT, 0); }
		public ITerminalNode IN() { return GetToken(tsqlParser.IN, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode LIKE() { return GetToken(tsqlParser.LIKE, 0); }
		public ITerminalNode ESCAPE() { return GetToken(tsqlParser.ESCAPE, 0); }
		public ITerminalNode IS() { return GetToken(tsqlParser.IS, 0); }
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 190, RULE_predicate);
		int _la;
		try {
			State = 2149;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,324,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2093; Match(EXISTS);
				State = 2094; Match(LR_BRACKET);
				State = 2095; subquery();
				State = 2096; Match(RR_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2098; expression(0);
				State = 2099; comparison_operator();
				State = 2100; expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2102; expression(0);
				State = 2103; comparison_operator();
				State = 2104;
				_la = TokenStream.La(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 2105; Match(LR_BRACKET);
				State = 2106; subquery();
				State = 2107; Match(RR_BRACKET);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2109; expression(0);
				State = 2111;
				_la = TokenStream.La(1);
				if (_la==NOT) {
					{
					State = 2110; Match(NOT);
					}
				}

				State = 2113; Match(BETWEEN);
				State = 2114; expression(0);
				State = 2115; Match(AND);
				State = 2116; expression(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2118; expression(0);
				State = 2120;
				_la = TokenStream.La(1);
				if (_la==NOT) {
					{
					State = 2119; Match(NOT);
					}
				}

				State = 2122; Match(IN);
				State = 2123; Match(LR_BRACKET);
				State = 2126;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,321,Context) ) {
				case 1:
					{
					State = 2124; subquery();
					}
					break;
				case 2:
					{
					State = 2125; expression_list();
					}
					break;
				}
				State = 2128; Match(RR_BRACKET);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2130; expression(0);
				State = 2132;
				_la = TokenStream.La(1);
				if (_la==NOT) {
					{
					State = 2131; Match(NOT);
					}
				}

				State = 2134; Match(LIKE);
				State = 2135; expression(0);
				State = 2138;
				_la = TokenStream.La(1);
				if (_la==ESCAPE) {
					{
					State = 2136; Match(ESCAPE);
					State = 2137; expression(0);
					}
				}

				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2140; expression(0);
				State = 2141; Match(IS);
				State = 2142; null_notnull();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2144; Match(LR_BRACKET);
				State = 2145; search_condition();
				State = 2146; Match(RR_BRACKET);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2148; Match(DECIMAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_expressionContext : ParserRuleContext {
		public Query_specificationContext query_specification() {
			return GetRuleContext<Query_specificationContext>(0);
		}
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public UnionContext[] union() {
			return GetRuleContexts<UnionContext>();
		}
		public UnionContext union(int i) {
			return GetRuleContext<UnionContext>(i);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterQuery_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitQuery_expression(this);
		}
	}

	[RuleVersion(0)]
	public Query_expressionContext query_expression() {
		Query_expressionContext _localctx = new Query_expressionContext(Context, State);
		EnterRule(_localctx, 192, RULE_query_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2156;
			switch (TokenStream.La(1)) {
			case SELECT:
				{
				State = 2151; query_specification();
				}
				break;
			case LR_BRACKET:
				{
				State = 2152; Match(LR_BRACKET);
				State = 2153; query_expression();
				State = 2154; Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2161;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,326,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2158; union();
					}
					} 
				}
				State = 2163;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,326,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionContext : ParserRuleContext {
		public ITerminalNode UNION() { return GetToken(tsqlParser.UNION, 0); }
		public ITerminalNode EXCEPT() { return GetToken(tsqlParser.EXCEPT, 0); }
		public ITerminalNode INTERSECT() { return GetToken(tsqlParser.INTERSECT, 0); }
		public Query_specificationContext query_specification() {
			return GetRuleContext<Query_specificationContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(tsqlParser.ALL, 0); }
		public Query_expressionContext[] query_expression() {
			return GetRuleContexts<Query_expressionContext>();
		}
		public Query_expressionContext query_expression(int i) {
			return GetRuleContext<Query_expressionContext>(i);
		}
		public UnionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_union; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterUnion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitUnion(this);
		}
	}

	[RuleVersion(0)]
	public UnionContext union() {
		UnionContext _localctx = new UnionContext(Context, State);
		EnterRule(_localctx, 194, RULE_union);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2170;
			switch (TokenStream.La(1)) {
			case UNION:
				{
				State = 2164; Match(UNION);
				State = 2166;
				_la = TokenStream.La(1);
				if (_la==ALL) {
					{
					State = 2165; Match(ALL);
					}
				}

				}
				break;
			case EXCEPT:
				{
				State = 2168; Match(EXCEPT);
				}
				break;
			case INTERSECT:
				{
				State = 2169; Match(INTERSECT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2181;
			switch (TokenStream.La(1)) {
			case SELECT:
				{
				State = 2172; query_specification();
				}
				break;
			case LR_BRACKET:
				{
				State = 2177;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2173; Match(LR_BRACKET);
						State = 2174; query_expression();
						State = 2175; Match(RR_BRACKET);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2179;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,329,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_specificationContext : ParserRuleContext {
		public Search_conditionContext where;
		public Search_conditionContext having;
		public ITerminalNode SELECT() { return GetToken(tsqlParser.SELECT, 0); }
		public Select_listContext select_list() {
			return GetRuleContext<Select_listContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(tsqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(tsqlParser.INTO, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(tsqlParser.FROM, 0); }
		public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(tsqlParser.WHERE, 0); }
		public ITerminalNode GROUP() { return GetToken(tsqlParser.GROUP, 0); }
		public ITerminalNode BY() { return GetToken(tsqlParser.BY, 0); }
		public Group_by_itemContext[] group_by_item() {
			return GetRuleContexts<Group_by_itemContext>();
		}
		public Group_by_itemContext group_by_item(int i) {
			return GetRuleContext<Group_by_itemContext>(i);
		}
		public ITerminalNode HAVING() { return GetToken(tsqlParser.HAVING, 0); }
		public ITerminalNode ALL() { return GetToken(tsqlParser.ALL, 0); }
		public ITerminalNode DISTINCT() { return GetToken(tsqlParser.DISTINCT, 0); }
		public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		public ITerminalNode PERCENT() { return GetToken(tsqlParser.PERCENT, 0); }
		public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		public ITerminalNode TIES() { return GetToken(tsqlParser.TIES, 0); }
		public Query_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterQuery_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitQuery_specification(this);
		}
	}

	[RuleVersion(0)]
	public Query_specificationContext query_specification() {
		Query_specificationContext _localctx = new Query_specificationContext(Context, State);
		EnterRule(_localctx, 196, RULE_query_specification);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2183; Match(SELECT);
			State = 2185;
			_la = TokenStream.La(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 2184;
				_la = TokenStream.La(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
			}

			State = 2196;
			_la = TokenStream.La(1);
			if (_la==TOP) {
				{
				State = 2187; Match(TOP);
				State = 2188; expression(0);
				State = 2190;
				_la = TokenStream.La(1);
				if (_la==PERCENT) {
					{
					State = 2189; Match(PERCENT);
					}
				}

				State = 2194;
				_la = TokenStream.La(1);
				if (_la==WITH) {
					{
					State = 2192; Match(WITH);
					State = 2193; Match(TIES);
					}
				}

				}
			}

			State = 2198; select_list();
			State = 2201;
			_la = TokenStream.La(1);
			if (_la==INTO) {
				{
				State = 2199; Match(INTO);
				State = 2200; table_name();
				}
			}

			State = 2205;
			_la = TokenStream.La(1);
			if (_la==FROM) {
				{
				State = 2203; Match(FROM);
				State = 2204; table_sources();
				}
			}

			State = 2209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,337,Context) ) {
			case 1:
				{
				State = 2207; Match(WHERE);
				State = 2208; _localctx.where = search_condition();
				}
				break;
			}
			State = 2221;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,339,Context) ) {
			case 1:
				{
				State = 2211; Match(GROUP);
				State = 2212; Match(BY);
				State = 2213; group_by_item();
				State = 2218;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,338,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2214; Match(COMMA);
						State = 2215; group_by_item();
						}
						} 
					}
					State = 2220;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,338,Context);
				}
				}
				break;
			}
			State = 2225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,340,Context) ) {
			case 1:
				{
				State = 2223; Match(HAVING);
				State = 2224; _localctx.having = search_condition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_clauseContext : ParserRuleContext {
		public ITerminalNode ORDER() { return GetToken(tsqlParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(tsqlParser.BY, 0); }
		public Order_by_expressionContext[] order_by_expression() {
			return GetRuleContexts<Order_by_expressionContext>();
		}
		public Order_by_expressionContext order_by_expression(int i) {
			return GetRuleContext<Order_by_expressionContext>(i);
		}
		public ITerminalNode OFFSET() { return GetToken(tsqlParser.OFFSET, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] ROW() { return GetTokens(tsqlParser.ROW); }
		public ITerminalNode ROW(int i) {
			return GetToken(tsqlParser.ROW, i);
		}
		public ITerminalNode[] ROWS() { return GetTokens(tsqlParser.ROWS); }
		public ITerminalNode ROWS(int i) {
			return GetToken(tsqlParser.ROWS, i);
		}
		public ITerminalNode FETCH() { return GetToken(tsqlParser.FETCH, 0); }
		public ITerminalNode ONLY() { return GetToken(tsqlParser.ONLY, 0); }
		public ITerminalNode FIRST() { return GetToken(tsqlParser.FIRST, 0); }
		public ITerminalNode NEXT() { return GetToken(tsqlParser.NEXT, 0); }
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOrder_by_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOrder_by_clause(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_clauseContext order_by_clause() {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(Context, State);
		EnterRule(_localctx, 198, RULE_order_by_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2227; Match(ORDER);
			State = 2228; Match(BY);
			State = 2229; order_by_expression();
			State = 2234;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,341,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2230; Match(COMMA);
					State = 2231; order_by_expression();
					}
					} 
				}
				State = 2236;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,341,Context);
			}
			State = 2248;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,343,Context) ) {
			case 1:
				{
				State = 2237; Match(OFFSET);
				State = 2238; expression(0);
				State = 2239;
				_la = TokenStream.La(1);
				if ( !(_la==ROW || _la==ROWS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 2246;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,342,Context) ) {
				case 1:
					{
					State = 2240; Match(FETCH);
					State = 2241;
					_la = TokenStream.La(1);
					if ( !(_la==FIRST || _la==NEXT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					State = 2242; expression(0);
					State = 2243;
					_la = TokenStream.La(1);
					if ( !(_la==ROW || _la==ROWS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					State = 2244; Match(ONLY);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_clauseContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(tsqlParser.FOR, 0); }
		public ITerminalNode BROWSE() { return GetToken(tsqlParser.BROWSE, 0); }
		public ITerminalNode XML() { return GetToken(tsqlParser.XML, 0); }
		public ITerminalNode AUTO() { return GetToken(tsqlParser.AUTO, 0); }
		public Xml_common_directivesContext xml_common_directives() {
			return GetRuleContext<Xml_common_directivesContext>(0);
		}
		public ITerminalNode PATH() { return GetToken(tsqlParser.PATH, 0); }
		public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public For_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFor_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFor_clause(this);
		}
	}

	[RuleVersion(0)]
	public For_clauseContext for_clause() {
		For_clauseContext _localctx = new For_clauseContext(Context, State);
		EnterRule(_localctx, 200, RULE_for_clause);
		try {
			State = 2269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,347,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2250; Match(FOR);
				State = 2251; Match(BROWSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2252; Match(FOR);
				State = 2253; Match(XML);
				State = 2254; Match(AUTO);
				State = 2256;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,344,Context) ) {
				case 1:
					{
					State = 2255; xml_common_directives();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2258; Match(FOR);
				State = 2259; Match(XML);
				State = 2260; Match(PATH);
				State = 2264;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,345,Context) ) {
				case 1:
					{
					State = 2261; Match(LR_BRACKET);
					State = 2262; Match(STRING);
					State = 2263; Match(RR_BRACKET);
					}
					break;
				}
				State = 2267;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,346,Context) ) {
				case 1:
					{
					State = 2266; xml_common_directives();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_common_directivesContext : ParserRuleContext {
		public ITerminalNode BINARY() { return GetToken(tsqlParser.BINARY, 0); }
		public ITerminalNode BASE64() { return GetToken(tsqlParser.BASE64, 0); }
		public ITerminalNode TYPE() { return GetToken(tsqlParser.TYPE, 0); }
		public ITerminalNode ROOT() { return GetToken(tsqlParser.ROOT, 0); }
		public Xml_common_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_common_directives; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterXml_common_directives(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitXml_common_directives(this);
		}
	}

	[RuleVersion(0)]
	public Xml_common_directivesContext xml_common_directives() {
		Xml_common_directivesContext _localctx = new Xml_common_directivesContext(Context, State);
		EnterRule(_localctx, 202, RULE_xml_common_directives);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2271; Match(COMMA);
			State = 2276;
			switch (TokenStream.La(1)) {
			case BINARY:
				{
				State = 2272; Match(BINARY);
				State = 2273; Match(BASE64);
				}
				break;
			case TYPE:
				{
				State = 2274; Match(TYPE);
				}
				break;
			case ROOT:
				{
				State = 2275; Match(ROOT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ASC() { return GetToken(tsqlParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(tsqlParser.DESC, 0); }
		public Order_by_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOrder_by_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOrder_by_expression(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_expressionContext order_by_expression() {
		Order_by_expressionContext _localctx = new Order_by_expressionContext(Context, State);
		EnterRule(_localctx, 204, RULE_order_by_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2278; expression(0);
			State = 2280;
			_la = TokenStream.La(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 2279;
				_la = TokenStream.La(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_itemContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Group_by_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterGroup_by_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitGroup_by_item(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_itemContext group_by_item() {
		Group_by_itemContext _localctx = new Group_by_itemContext(Context, State);
		EnterRule(_localctx, 206, RULE_group_by_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2282; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Option_clauseContext : ParserRuleContext {
		public ITerminalNode OPTION() { return GetToken(tsqlParser.OPTION, 0); }
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public Option_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOption_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOption_clause(this);
		}
	}

	[RuleVersion(0)]
	public Option_clauseContext option_clause() {
		Option_clauseContext _localctx = new Option_clauseContext(Context, State);
		EnterRule(_localctx, 208, RULE_option_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2284; Match(OPTION);
			State = 2285; Match(LR_BRACKET);
			State = 2286; option();
			State = 2291;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2287; Match(COMMA);
				State = 2288; option();
				}
				}
				State = 2293;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 2294; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		public IToken number_rows;
		public IToken number_of_processors;
		public IToken number_recursion;
		public ITerminalNode FAST() { return GetToken(tsqlParser.FAST, 0); }
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public ITerminalNode GROUP() { return GetToken(tsqlParser.GROUP, 0); }
		public ITerminalNode HASH() { return GetToken(tsqlParser.HASH, 0); }
		public ITerminalNode ORDER() { return GetToken(tsqlParser.ORDER, 0); }
		public ITerminalNode UNION() { return GetToken(tsqlParser.UNION, 0); }
		public ITerminalNode MERGE() { return GetToken(tsqlParser.MERGE, 0); }
		public ITerminalNode CONCAT() { return GetToken(tsqlParser.CONCAT, 0); }
		public ITerminalNode JOIN() { return GetToken(tsqlParser.JOIN, 0); }
		public ITerminalNode LOOP() { return GetToken(tsqlParser.LOOP, 0); }
		public ITerminalNode EXPAND() { return GetToken(tsqlParser.EXPAND, 0); }
		public ITerminalNode VIEWS() { return GetToken(tsqlParser.VIEWS, 0); }
		public ITerminalNode FORCE() { return GetToken(tsqlParser.FORCE, 0); }
		public ITerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return GetToken(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public ITerminalNode KEEP() { return GetToken(tsqlParser.KEEP, 0); }
		public ITerminalNode PLAN() { return GetToken(tsqlParser.PLAN, 0); }
		public ITerminalNode KEEPFIXED() { return GetToken(tsqlParser.KEEPFIXED, 0); }
		public ITerminalNode MAXDOP() { return GetToken(tsqlParser.MAXDOP, 0); }
		public ITerminalNode MAXRECURSION() { return GetToken(tsqlParser.MAXRECURSION, 0); }
		public ITerminalNode OPTIMIZE() { return GetToken(tsqlParser.OPTIMIZE, 0); }
		public ITerminalNode FOR() { return GetToken(tsqlParser.FOR, 0); }
		public Optimize_for_argContext[] optimize_for_arg() {
			return GetRuleContexts<Optimize_for_argContext>();
		}
		public Optimize_for_argContext optimize_for_arg(int i) {
			return GetRuleContext<Optimize_for_argContext>(i);
		}
		public ITerminalNode UNKNOWN() { return GetToken(tsqlParser.UNKNOWN, 0); }
		public ITerminalNode PARAMETERIZATION() { return GetToken(tsqlParser.PARAMETERIZATION, 0); }
		public ITerminalNode SIMPLE() { return GetToken(tsqlParser.SIMPLE, 0); }
		public ITerminalNode FORCED() { return GetToken(tsqlParser.FORCED, 0); }
		public ITerminalNode RECOMPILE() { return GetToken(tsqlParser.RECOMPILE, 0); }
		public ITerminalNode ROBUST() { return GetToken(tsqlParser.ROBUST, 0); }
		public ITerminalNode USE() { return GetToken(tsqlParser.USE, 0); }
		public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 210, RULE_option);
		int _la;
		try {
			State = 2341;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,352,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2296; Match(FAST);
				State = 2297; _localctx.number_rows = Match(DECIMAL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2298;
				_la = TokenStream.La(1);
				if ( !(_la==ORDER || _la==HASH) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 2299; Match(GROUP);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2300;
				_la = TokenStream.La(1);
				if ( !(_la==MERGE || _la==CONCAT || _la==HASH) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 2301; Match(UNION);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2302;
				_la = TokenStream.La(1);
				if ( !(_la==MERGE || _la==HASH || _la==LOOP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 2303; Match(JOIN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2304; Match(EXPAND);
				State = 2305; Match(VIEWS);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2306; Match(FORCE);
				State = 2307; Match(ORDER);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2308; Match(IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2309; Match(KEEP);
				State = 2310; Match(PLAN);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2311; Match(KEEPFIXED);
				State = 2312; Match(PLAN);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2313; Match(MAXDOP);
				State = 2314; _localctx.number_of_processors = Match(DECIMAL);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2315; Match(MAXRECURSION);
				State = 2316; _localctx.number_recursion = Match(DECIMAL);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2317; Match(OPTIMIZE);
				State = 2318; Match(FOR);
				State = 2319; Match(LR_BRACKET);
				State = 2320; optimize_for_arg();
				State = 2325;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2321; Match(COMMA);
					State = 2322; optimize_for_arg();
					}
					}
					State = 2327;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 2328; Match(RR_BRACKET);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2330; Match(OPTIMIZE);
				State = 2331; Match(FOR);
				State = 2332; Match(UNKNOWN);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2333; Match(PARAMETERIZATION);
				State = 2334;
				_la = TokenStream.La(1);
				if ( !(_la==FORCED || _la==SIMPLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2335; Match(RECOMPILE);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2336; Match(ROBUST);
				State = 2337; Match(PLAN);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2338; Match(USE);
				State = 2339; Match(PLAN);
				State = 2340; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Optimize_for_argContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public ITerminalNode UNKNOWN() { return GetToken(tsqlParser.UNKNOWN, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Optimize_for_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optimize_for_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOptimize_for_arg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOptimize_for_arg(this);
		}
	}

	[RuleVersion(0)]
	public Optimize_for_argContext optimize_for_arg() {
		Optimize_for_argContext _localctx = new Optimize_for_argContext(Context, State);
		EnterRule(_localctx, 212, RULE_optimize_for_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2343; Match(LOCAL_ID);
			State = 2347;
			switch (TokenStream.La(1)) {
			case UNKNOWN:
				{
				State = 2344; Match(UNKNOWN);
				}
				break;
			case EQUAL:
				{
				State = 2345; Match(EQUAL);
				State = 2346; constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_listContext : ParserRuleContext {
		public Select_list_elemContext[] select_list_elem() {
			return GetRuleContexts<Select_list_elemContext>();
		}
		public Select_list_elemContext select_list_elem(int i) {
			return GetRuleContext<Select_list_elemContext>(i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSelect_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSelect_list(this);
		}
	}

	[RuleVersion(0)]
	public Select_listContext select_list() {
		Select_listContext _localctx = new Select_listContext(Context, State);
		EnterRule(_localctx, 214, RULE_select_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2349; select_list_elem();
			State = 2354;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,354,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2350; Match(COMMA);
					State = 2351; select_list_elem();
					}
					} 
				}
				State = 2356;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,354,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_list_elemContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode IDENTITY() { return GetToken(tsqlParser.IDENTITY, 0); }
		public ITerminalNode ROWGUID() { return GetToken(tsqlParser.ROWGUID, 0); }
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public Select_list_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSelect_list_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSelect_list_elem(this);
		}
	}

	[RuleVersion(0)]
	public Select_list_elemContext select_list_elem() {
		Select_list_elemContext _localctx = new Select_list_elemContext(Context, State);
		EnterRule(_localctx, 216, RULE_select_list_elem);
		int _la;
		try {
			State = 2378;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,359,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2360;
				_la = TokenStream.La(1);
				if (_la==FORCESEEK || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ABSOLUTE - 193)) | (1L << (APPLY - 193)) | (1L << (AUTO - 193)) | (1L << (AVG - 193)) | (1L << (BASE64 - 193)) | (1L << (CALLER - 193)) | (1L << (CAST - 193)) | (1L << (CATCH - 193)) | (1L << (CHECKSUM_AGG - 193)) | (1L << (COMMITTED - 193)) | (1L << (CONCAT - 193)) | (1L << (CONTROL - 193)) | (1L << (COOKIE - 193)) | (1L << (COUNT - 193)) | (1L << (COUNT_BIG - 193)) | (1L << (DELAY - 193)) | (1L << (DELETED - 193)) | (1L << (DENSE_RANK - 193)) | (1L << (DISABLE - 193)) | (1L << (DYNAMIC - 193)) | (1L << (ENCRYPTION - 193)) | (1L << (EXPAND - 193)) | (1L << (FAST - 193)) | (1L << (FAST_FORWARD - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (FIRST - 259)) | (1L << (FOLLOWING - 259)) | (1L << (FORCE - 259)) | (1L << (FORCED - 259)) | (1L << (FORWARD_ONLY - 259)) | (1L << (FULLSCAN - 259)) | (1L << (GLOBAL - 259)) | (1L << (GO - 259)) | (1L << (GROUPING - 259)) | (1L << (GROUPING_ID - 259)) | (1L << (HASH - 259)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 259)) | (1L << (IMPERSONATE - 259)) | (1L << (INSENSITIVE - 259)) | (1L << (INSERTED - 259)) | (1L << (ISOLATION - 259)) | (1L << (KEEP - 259)) | (1L << (KEEPFIXED - 259)) | (1L << (KEYSET - 259)) | (1L << (LAST - 259)) | (1L << (LEVEL - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCK_ESCALATION - 259)) | (1L << (LOGIN - 259)) | (1L << (LOOP - 259)) | (1L << (MARK - 259)) | (1L << (MAX - 259)) | (1L << (MAXDOP - 259)) | (1L << (MAXRECURSION - 259)) | (1L << (MIN - 259)) | (1L << (MODIFY - 259)) | (1L << (NAME - 259)) | (1L << (NEXT - 259)) | (1L << (NOCOUNT - 259)) | (1L << (NOEXPAND - 259)) | (1L << (NORECOMPUTE - 259)) | (1L << (NTILE - 259)) | (1L << (NUMBER - 259)) | (1L << (OFFSET - 259)) | (1L << (ONLINE - 259)) | (1L << (ONLY - 259)) | (1L << (OPTIMISTIC - 259)) | (1L << (OPTIMIZE - 259)) | (1L << (OUT - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (OUTPUT - 323)) | (1L << (OWNER - 323)) | (1L << (PARAMETERIZATION - 323)) | (1L << (PARTITION - 323)) | (1L << (PATH - 323)) | (1L << (PRECEDING - 323)) | (1L << (PRIOR - 323)) | (1L << (PRIVILEGES - 323)) | (1L << (RANGE - 323)) | (1L << (RANK - 323)) | (1L << (READONLY - 323)) | (1L << (READ_ONLY - 323)) | (1L << (RECOMPILE - 323)) | (1L << (RELATIVE - 323)) | (1L << (REMOTE - 323)) | (1L << (REPEATABLE - 323)) | (1L << (ROBUST - 323)) | (1L << (ROOT - 323)) | (1L << (ROW - 323)) | (1L << (ROWGUID - 323)) | (1L << (ROWS - 323)) | (1L << (ROW_NUMBER - 323)) | (1L << (SAMPLE - 323)) | (1L << (SCHEMABINDING - 323)) | (1L << (SCROLL - 323)) | (1L << (SCROLL_LOCKS - 323)) | (1L << (SELF - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SIMPLE - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 323)) | (1L << (STATIC - 323)) | (1L << (STATS_STREAM - 323)) | (1L << (STDEV - 323)) | (1L << (STDEVP - 323)) | (1L << (SUM - 323)) | (1L << (TEXTIMAGE_ON - 323)) | (1L << (THROW - 323)) | (1L << (TIES - 323)) | (1L << (TIME - 323)) | (1L << (TRY - 323)) | (1L << (TYPE - 323)) | (1L << (TYPE_WARNING - 323)) | (1L << (UNBOUNDED - 323)) | (1L << (UNCOMMITTED - 323)) | (1L << (UNKNOWN - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (USING - 388)) | (1L << (VAR - 388)) | (1L << (VARP - 388)) | (1L << (VIEWS - 388)) | (1L << (VIEW_METADATA - 388)) | (1L << (WORK - 388)) | (1L << (XML - 388)) | (1L << (XMLNAMESPACES - 388)) | (1L << (DOUBLE_QUOTE_ID - 388)) | (1L << (SQUARE_BRACKET_ID - 388)) | (1L << (ID - 388)))) != 0)) {
					{
					State = 2357; table_name();
					State = 2358; Match(DOT);
					}
				}

				State = 2365;
				switch (TokenStream.La(1)) {
				case STAR:
					{
					State = 2362; Match(STAR);
					}
					break;
				case DOLLAR:
					{
					State = 2363; Match(DOLLAR);
					State = 2364;
					_la = TokenStream.La(1);
					if ( !(_la==IDENTITY || _la==ROWGUID) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2367; column_alias();
				State = 2368; Match(EQUAL);
				State = 2369; expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2371; expression(0);
				State = 2376;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,358,Context) ) {
				case 1:
					{
					State = 2373;
					_la = TokenStream.La(1);
					if (_la==AS) {
						{
						State = 2372; Match(AS);
						}
					}

					State = 2375; column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_sourcesContext : ParserRuleContext {
		public Table_sourceContext[] table_source() {
			return GetRuleContexts<Table_sourceContext>();
		}
		public Table_sourceContext table_source(int i) {
			return GetRuleContext<Table_sourceContext>(i);
		}
		public Table_sourcesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_sources; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_sources(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_sources(this);
		}
	}

	[RuleVersion(0)]
	public Table_sourcesContext table_sources() {
		Table_sourcesContext _localctx = new Table_sourcesContext(Context, State);
		EnterRule(_localctx, 218, RULE_table_sources);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2380; table_source();
			State = 2385;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,360,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2381; Match(COMMA);
					State = 2382; table_source();
					}
					} 
				}
				State = 2387;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,360,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_sourceContext : ParserRuleContext {
		public Table_source_item_joinedContext table_source_item_joined() {
			return GetRuleContext<Table_source_item_joinedContext>(0);
		}
		public Table_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_source(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_source(this);
		}
	}

	[RuleVersion(0)]
	public Table_sourceContext table_source() {
		Table_sourceContext _localctx = new Table_sourceContext(Context, State);
		EnterRule(_localctx, 220, RULE_table_source);
		try {
			State = 2393;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,361,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2388; table_source_item_joined();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2389; Match(LR_BRACKET);
				State = 2390; table_source_item_joined();
				State = 2391; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_source_item_joinedContext : ParserRuleContext {
		public Table_source_itemContext table_source_item() {
			return GetRuleContext<Table_source_itemContext>(0);
		}
		public Join_partContext[] join_part() {
			return GetRuleContexts<Join_partContext>();
		}
		public Join_partContext join_part(int i) {
			return GetRuleContext<Join_partContext>(i);
		}
		public Table_source_item_joinedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source_item_joined; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_source_item_joined(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_source_item_joined(this);
		}
	}

	[RuleVersion(0)]
	public Table_source_item_joinedContext table_source_item_joined() {
		Table_source_item_joinedContext _localctx = new Table_source_item_joinedContext(Context, State);
		EnterRule(_localctx, 222, RULE_table_source_item_joined);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2395; table_source_item();
			State = 2399;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,362,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2396; join_part();
					}
					} 
				}
				State = 2401;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,362,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_source_itemContext : ParserRuleContext {
		public Table_name_with_hintContext table_name_with_hint() {
			return GetRuleContext<Table_name_with_hintContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public Rowset_functionContext rowset_function() {
			return GetRuleContext<Rowset_functionContext>(0);
		}
		public Derived_tableContext derived_table() {
			return GetRuleContext<Derived_tableContext>(0);
		}
		public Column_alias_listContext column_alias_list() {
			return GetRuleContext<Column_alias_listContext>(0);
		}
		public Change_tableContext change_table() {
			return GetRuleContext<Change_tableContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Table_source_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_source_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_source_item(this);
		}
	}

	[RuleVersion(0)]
	public Table_source_itemContext table_source_item() {
		Table_source_itemContext _localctx = new Table_source_itemContext(Context, State);
		EnterRule(_localctx, 224, RULE_table_source_item);
		try {
			State = 2437;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,371,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2402; table_name_with_hint();
				State = 2404;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,363,Context) ) {
				case 1:
					{
					State = 2403; as_table_alias();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2406; rowset_function();
				State = 2408;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,364,Context) ) {
				case 1:
					{
					State = 2407; as_table_alias();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2410; derived_table();
				State = 2415;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,366,Context) ) {
				case 1:
					{
					State = 2411; as_table_alias();
					State = 2413;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,365,Context) ) {
					case 1:
						{
						State = 2412; column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2417; change_table();
				State = 2418; as_table_alias();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2420; function_call();
				State = 2422;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,367,Context) ) {
				case 1:
					{
					State = 2421; as_table_alias();
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2424; Match(LOCAL_ID);
				State = 2426;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,368,Context) ) {
				case 1:
					{
					State = 2425; as_table_alias();
					}
					break;
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2428; Match(LOCAL_ID);
				State = 2429; Match(DOT);
				State = 2430; function_call();
				State = 2435;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,370,Context) ) {
				case 1:
					{
					State = 2431; as_table_alias();
					State = 2433;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,369,Context) ) {
					case 1:
						{
						State = 2432; column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_tableContext : ParserRuleContext {
		public ITerminalNode CHANGETABLE() { return GetToken(tsqlParser.CHANGETABLE, 0); }
		public ITerminalNode CHANGES() { return GetToken(tsqlParser.CHANGES, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(tsqlParser.NULL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Change_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterChange_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitChange_table(this);
		}
	}

	[RuleVersion(0)]
	public Change_tableContext change_table() {
		Change_tableContext _localctx = new Change_tableContext(Context, State);
		EnterRule(_localctx, 226, RULE_change_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2439; Match(CHANGETABLE);
			State = 2440; Match(LR_BRACKET);
			State = 2441; Match(CHANGES);
			State = 2442; table_name();
			State = 2443; Match(COMMA);
			State = 2444;
			_la = TokenStream.La(1);
			if ( !(_la==NULL || _la==LOCAL_ID || _la==DECIMAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 2445; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_partContext : ParserRuleContext {
		public IToken join_type;
		public IToken join_hint;
		public ITerminalNode JOIN() { return GetToken(tsqlParser.JOIN, 0); }
		public Table_sourceContext table_source() {
			return GetRuleContext<Table_sourceContext>(0);
		}
		public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode LEFT() { return GetToken(tsqlParser.LEFT, 0); }
		public ITerminalNode RIGHT() { return GetToken(tsqlParser.RIGHT, 0); }
		public ITerminalNode FULL() { return GetToken(tsqlParser.FULL, 0); }
		public ITerminalNode INNER() { return GetToken(tsqlParser.INNER, 0); }
		public ITerminalNode OUTER() { return GetToken(tsqlParser.OUTER, 0); }
		public ITerminalNode LOOP() { return GetToken(tsqlParser.LOOP, 0); }
		public ITerminalNode HASH() { return GetToken(tsqlParser.HASH, 0); }
		public ITerminalNode MERGE() { return GetToken(tsqlParser.MERGE, 0); }
		public ITerminalNode REMOTE() { return GetToken(tsqlParser.REMOTE, 0); }
		public ITerminalNode CROSS() { return GetToken(tsqlParser.CROSS, 0); }
		public ITerminalNode APPLY() { return GetToken(tsqlParser.APPLY, 0); }
		public Join_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_part; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterJoin_part(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitJoin_part(this);
		}
	}

	[RuleVersion(0)]
	public Join_partContext join_part() {
		Join_partContext _localctx = new Join_partContext(Context, State);
		EnterRule(_localctx, 228, RULE_join_part);
		int _la;
		try {
			State = 2473;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,376,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2454;
				switch (TokenStream.La(1)) {
				case INNER:
				case JOIN:
				case MERGE:
				case HASH:
				case LOOP:
				case REMOTE:
					{
					State = 2448;
					_la = TokenStream.La(1);
					if (_la==INNER) {
						{
						State = 2447; Match(INNER);
						}
					}

					}
					break;
				case FULL:
				case LEFT:
				case RIGHT:
					{
					State = 2450;
					_localctx.join_type = TokenStream.Lt(1);
					_la = TokenStream.La(1);
					if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
						_localctx.join_type = ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					State = 2452;
					_la = TokenStream.La(1);
					if (_la==OUTER) {
						{
						State = 2451; Match(OUTER);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2457;
				_la = TokenStream.La(1);
				if (_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) {
					{
					State = 2456;
					_localctx.join_hint = TokenStream.Lt(1);
					_la = TokenStream.La(1);
					if ( !(_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) ) {
						_localctx.join_hint = ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
				}

				State = 2459; Match(JOIN);
				State = 2460; table_source();
				State = 2461; Match(ON);
				State = 2462; search_condition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2464; Match(CROSS);
				State = 2465; Match(JOIN);
				State = 2466; table_source();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2467; Match(CROSS);
				State = 2468; Match(APPLY);
				State = 2469; table_source();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2470; Match(OUTER);
				State = 2471; Match(APPLY);
				State = 2472; table_source();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_name_with_hintContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Table_name_with_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name_with_hint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_name_with_hint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_name_with_hint(this);
		}
	}

	[RuleVersion(0)]
	public Table_name_with_hintContext table_name_with_hint() {
		Table_name_with_hintContext _localctx = new Table_name_with_hintContext(Context, State);
		EnterRule(_localctx, 230, RULE_table_name_with_hint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2475; table_name();
			State = 2477;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,377,Context) ) {
			case 1:
				{
				State = 2476; with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rowset_functionContext : ParserRuleContext {
		public IToken provider_name;
		public IToken connectionString;
		public IToken sql;
		public IToken data_file;
		public ITerminalNode OPENROWSET() { return GetToken(tsqlParser.OPENROWSET, 0); }
		public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] STRING() { return GetTokens(tsqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(tsqlParser.STRING, i);
		}
		public ITerminalNode BULK() { return GetToken(tsqlParser.BULK, 0); }
		public Bulk_optionContext[] bulk_option() {
			return GetRuleContexts<Bulk_optionContext>();
		}
		public Bulk_optionContext bulk_option(int i) {
			return GetRuleContext<Bulk_optionContext>(i);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Rowset_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowset_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterRowset_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitRowset_function(this);
		}
	}

	[RuleVersion(0)]
	public Rowset_functionContext rowset_function() {
		Rowset_functionContext _localctx = new Rowset_functionContext(Context, State);
		EnterRule(_localctx, 232, RULE_rowset_function);
		int _la;
		try {
			State = 2505;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,380,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 2479; Match(OPENROWSET);
				State = 2480; Match(LR_BRACKET);
				State = 2481; _localctx.provider_name = Match(STRING);
				State = 2482; Match(COMMA);
				State = 2483; _localctx.connectionString = Match(STRING);
				State = 2484; Match(COMMA);
				State = 2485; _localctx.sql = Match(STRING);
				State = 2486; Match(RR_BRACKET);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 2487; Match(OPENROWSET);
				State = 2488; Match(LR_BRACKET);
				State = 2489; Match(BULK);
				State = 2490; _localctx.data_file = Match(STRING);
				State = 2491; Match(COMMA);
				State = 2501;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,379,Context) ) {
				case 1:
					{
					State = 2492; bulk_option();
					State = 2497;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==COMMA) {
						{
						{
						State = 2493; Match(COMMA);
						State = 2494; bulk_option();
						}
						}
						State = 2499;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					}
					break;
				case 2:
					{
					State = 2500; id();
					}
					break;
				}
				State = 2503; Match(RR_BRACKET);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bulk_optionContext : ParserRuleContext {
		public IToken bulk_option_value;
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public Bulk_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bulk_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterBulk_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitBulk_option(this);
		}
	}

	[RuleVersion(0)]
	public Bulk_optionContext bulk_option() {
		Bulk_optionContext _localctx = new Bulk_optionContext(Context, State);
		EnterRule(_localctx, 234, RULE_bulk_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2507; id();
			State = 2508; Match(EQUAL);
			State = 2509;
			_localctx.bulk_option_value = TokenStream.Lt(1);
			_la = TokenStream.La(1);
			if ( !(_la==DECIMAL || _la==STRING) ) {
				_localctx.bulk_option_value = ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_tableContext : ParserRuleContext {
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Derived_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDerived_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDerived_table(this);
		}
	}

	[RuleVersion(0)]
	public Derived_tableContext derived_table() {
		Derived_tableContext _localctx = new Derived_tableContext(Context, State);
		EnterRule(_localctx, 236, RULE_derived_table);
		try {
			State = 2516;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,381,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2511; subquery();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2512; Match(LR_BRACKET);
				State = 2513; subquery();
				State = 2514; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public ExpressionContext style;
		public IToken seed;
		public IToken increment;
		public Ranking_windowed_functionContext ranking_windowed_function() {
			return GetRuleContext<Ranking_windowed_functionContext>(0);
		}
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return GetRuleContext<Aggregate_windowed_functionContext>(0);
		}
		public Scalar_function_nameContext scalar_function_name() {
			return GetRuleContext<Scalar_function_nameContext>(0);
		}
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode BINARY_CHECKSUM() { return GetToken(tsqlParser.BINARY_CHECKSUM, 0); }
		public ITerminalNode CAST() { return GetToken(tsqlParser.CAST, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode CONVERT() { return GetToken(tsqlParser.CONVERT, 0); }
		public ITerminalNode CHECKSUM() { return GetToken(tsqlParser.CHECKSUM, 0); }
		public ITerminalNode COALESCE() { return GetToken(tsqlParser.COALESCE, 0); }
		public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(tsqlParser.CURRENT_TIMESTAMP, 0); }
		public ITerminalNode CURRENT_USER() { return GetToken(tsqlParser.CURRENT_USER, 0); }
		public ITerminalNode DATEADD() { return GetToken(tsqlParser.DATEADD, 0); }
		public ITerminalNode ID() { return GetToken(tsqlParser.ID, 0); }
		public ITerminalNode DATEDIFF() { return GetToken(tsqlParser.DATEDIFF, 0); }
		public ITerminalNode DATENAME() { return GetToken(tsqlParser.DATENAME, 0); }
		public ITerminalNode DATEPART() { return GetToken(tsqlParser.DATEPART, 0); }
		public ITerminalNode IDENTITY() { return GetToken(tsqlParser.IDENTITY, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(tsqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(tsqlParser.DECIMAL, i);
		}
		public ITerminalNode MIN_ACTIVE_ROWVERSION() { return GetToken(tsqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		public ITerminalNode NULLIF() { return GetToken(tsqlParser.NULLIF, 0); }
		public ITerminalNode SESSION_USER() { return GetToken(tsqlParser.SESSION_USER, 0); }
		public ITerminalNode SYSTEM_USER() { return GetToken(tsqlParser.SYSTEM_USER, 0); }
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFunction_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFunction_call(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 238, RULE_function_call);
		int _la;
		try {
			State = 2615;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,386,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2518; ranking_windowed_function();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2519; aggregate_windowed_function();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2520; scalar_function_name();
				State = 2521; Match(LR_BRACKET);
				State = 2523;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASE) | (1L << COALESCE) | (1L << CONVERT) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DEFAULT))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (FORCESEEK - 72)) | (1L << (IDENTITY - 72)) | (1L << (LEFT - 72)) | (1L << (NULL - 72)) | (1L << (NULLIF - 72)) | (1L << (OVER - 72)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (RIGHT - 145)) | (1L << (SESSION_USER - 145)) | (1L << (SYSTEM_USER - 145)) | (1L << (ABSOLUTE - 145)) | (1L << (APPLY - 145)) | (1L << (AUTO - 145)))) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (AVG - 210)) | (1L << (BASE64 - 210)) | (1L << (BINARY_CHECKSUM - 210)) | (1L << (CALLER - 210)) | (1L << (CAST - 210)) | (1L << (CATCH - 210)) | (1L << (CHECKSUM - 210)) | (1L << (CHECKSUM_AGG - 210)) | (1L << (COMMITTED - 210)) | (1L << (CONCAT - 210)) | (1L << (CONTROL - 210)) | (1L << (COOKIE - 210)) | (1L << (COUNT - 210)) | (1L << (COUNT_BIG - 210)) | (1L << (DATEADD - 210)) | (1L << (DATEDIFF - 210)) | (1L << (DATENAME - 210)) | (1L << (DATEPART - 210)) | (1L << (DELAY - 210)) | (1L << (DELETED - 210)) | (1L << (DENSE_RANK - 210)) | (1L << (DISABLE - 210)) | (1L << (DYNAMIC - 210)) | (1L << (ENCRYPTION - 210)) | (1L << (EXPAND - 210)) | (1L << (FAST - 210)) | (1L << (FAST_FORWARD - 210)) | (1L << (FIRST - 210)) | (1L << (FOLLOWING - 210)) | (1L << (FORCE - 210)) | (1L << (FORCED - 210)) | (1L << (FORWARD_ONLY - 210)) | (1L << (FULLSCAN - 210)) | (1L << (GLOBAL - 210)) | (1L << (GO - 210)) | (1L << (GROUPING - 210)) | (1L << (GROUPING_ID - 210)) | (1L << (HASH - 210)))) != 0) || ((((_la - 274)) & ~0x3f) == 0 && ((1L << (_la - 274)) & ((1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 274)) | (1L << (IMPERSONATE - 274)) | (1L << (INSENSITIVE - 274)) | (1L << (INSERTED - 274)) | (1L << (ISOLATION - 274)) | (1L << (KEEP - 274)) | (1L << (KEEPFIXED - 274)) | (1L << (KEYSET - 274)) | (1L << (LAST - 274)) | (1L << (LEVEL - 274)) | (1L << (LOCAL - 274)) | (1L << (LOCK_ESCALATION - 274)) | (1L << (LOGIN - 274)) | (1L << (LOOP - 274)) | (1L << (MARK - 274)) | (1L << (MAX - 274)) | (1L << (MAXDOP - 274)) | (1L << (MAXRECURSION - 274)) | (1L << (MIN - 274)) | (1L << (MIN_ACTIVE_ROWVERSION - 274)) | (1L << (MODIFY - 274)) | (1L << (NAME - 274)) | (1L << (NEXT - 274)) | (1L << (NOCOUNT - 274)) | (1L << (NOEXPAND - 274)) | (1L << (NORECOMPUTE - 274)) | (1L << (NTILE - 274)) | (1L << (NUMBER - 274)) | (1L << (OFFSET - 274)) | (1L << (ONLINE - 274)) | (1L << (ONLY - 274)) | (1L << (OPTIMISTIC - 274)) | (1L << (OPTIMIZE - 274)) | (1L << (OUT - 274)) | (1L << (OUTPUT - 274)) | (1L << (OWNER - 274)) | (1L << (PARAMETERIZATION - 274)) | (1L << (PARTITION - 274)) | (1L << (PATH - 274)) | (1L << (PRECEDING - 274)) | (1L << (PRIOR - 274)) | (1L << (PRIVILEGES - 274)) | (1L << (RANGE - 274)) | (1L << (RANK - 274)) | (1L << (READONLY - 274)) | (1L << (READ_ONLY - 274)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (RECOMPILE - 339)) | (1L << (RELATIVE - 339)) | (1L << (REMOTE - 339)) | (1L << (REPEATABLE - 339)) | (1L << (ROBUST - 339)) | (1L << (ROOT - 339)) | (1L << (ROW - 339)) | (1L << (ROWGUID - 339)) | (1L << (ROWS - 339)) | (1L << (ROW_NUMBER - 339)) | (1L << (SAMPLE - 339)) | (1L << (SCHEMABINDING - 339)) | (1L << (SCROLL - 339)) | (1L << (SCROLL_LOCKS - 339)) | (1L << (SELF - 339)) | (1L << (SERIALIZABLE - 339)) | (1L << (SIMPLE - 339)) | (1L << (SNAPSHOT - 339)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 339)) | (1L << (STATIC - 339)) | (1L << (STATS_STREAM - 339)) | (1L << (STDEV - 339)) | (1L << (STDEVP - 339)) | (1L << (SUM - 339)) | (1L << (TEXTIMAGE_ON - 339)) | (1L << (THROW - 339)) | (1L << (TIES - 339)) | (1L << (TIME - 339)) | (1L << (TRY - 339)) | (1L << (TYPE - 339)) | (1L << (TYPE_WARNING - 339)) | (1L << (UNBOUNDED - 339)) | (1L << (UNCOMMITTED - 339)) | (1L << (UNKNOWN - 339)) | (1L << (USING - 339)) | (1L << (VAR - 339)) | (1L << (VARP - 339)) | (1L << (VIEWS - 339)) | (1L << (VIEW_METADATA - 339)) | (1L << (WORK - 339)) | (1L << (XML - 339)) | (1L << (XMLNAMESPACES - 339)) | (1L << (DOUBLE_QUOTE_ID - 339)) | (1L << (SQUARE_BRACKET_ID - 339)) | (1L << (LOCAL_ID - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (DECIMAL - 403)) | (1L << (ID - 403)) | (1L << (STRING - 403)) | (1L << (BINARY - 403)) | (1L << (FLOAT - 403)) | (1L << (REAL - 403)) | (1L << (DOLLAR - 403)) | (1L << (LR_BRACKET - 403)) | (1L << (PLUS - 403)) | (1L << (MINUS - 403)) | (1L << (BIT_NOT - 403)))) != 0)) {
					{
					State = 2522; expression_list();
					}
				}

				State = 2525; Match(RR_BRACKET);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2527; Match(BINARY_CHECKSUM);
				State = 2528; Match(LR_BRACKET);
				State = 2529; Match(STAR);
				State = 2530; Match(RR_BRACKET);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2531; Match(CAST);
				State = 2532; Match(LR_BRACKET);
				State = 2533; expression(0);
				State = 2534; Match(AS);
				State = 2535; data_type();
				State = 2536; Match(RR_BRACKET);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2538; Match(CONVERT);
				State = 2539; Match(LR_BRACKET);
				State = 2540; data_type();
				State = 2541; Match(COMMA);
				State = 2542; expression(0);
				State = 2545;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 2543; Match(COMMA);
					State = 2544; _localctx.style = expression(0);
					}
				}

				State = 2547; Match(RR_BRACKET);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2549; Match(CHECKSUM);
				State = 2550; Match(LR_BRACKET);
				State = 2551; Match(STAR);
				State = 2552; Match(RR_BRACKET);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2553; Match(COALESCE);
				State = 2554; Match(LR_BRACKET);
				State = 2555; expression_list();
				State = 2556; Match(RR_BRACKET);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2558; Match(CURRENT_TIMESTAMP);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2559; Match(CURRENT_USER);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2560; Match(DATEADD);
				State = 2561; Match(LR_BRACKET);
				State = 2562; Match(ID);
				State = 2563; Match(COMMA);
				State = 2564; expression(0);
				State = 2565; Match(COMMA);
				State = 2566; expression(0);
				State = 2567; Match(RR_BRACKET);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2569; Match(DATEDIFF);
				State = 2570; Match(LR_BRACKET);
				State = 2571; Match(ID);
				State = 2572; Match(COMMA);
				State = 2573; expression(0);
				State = 2574; Match(COMMA);
				State = 2575; expression(0);
				State = 2576; Match(RR_BRACKET);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2578; Match(DATENAME);
				State = 2579; Match(LR_BRACKET);
				State = 2580; Match(ID);
				State = 2581; Match(COMMA);
				State = 2582; expression(0);
				State = 2583; Match(RR_BRACKET);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2585; Match(DATEPART);
				State = 2586; Match(LR_BRACKET);
				State = 2587; Match(ID);
				State = 2588; Match(COMMA);
				State = 2589; expression(0);
				State = 2590; Match(RR_BRACKET);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2592; Match(IDENTITY);
				State = 2593; Match(LR_BRACKET);
				State = 2594; data_type();
				State = 2597;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,384,Context) ) {
				case 1:
					{
					State = 2595; Match(COMMA);
					State = 2596; _localctx.seed = Match(DECIMAL);
					}
					break;
				}
				State = 2601;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 2599; Match(COMMA);
					State = 2600; _localctx.increment = Match(DECIMAL);
					}
				}

				State = 2603; Match(RR_BRACKET);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2605; Match(MIN_ACTIVE_ROWVERSION);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2606; Match(NULLIF);
				State = 2607; Match(LR_BRACKET);
				State = 2608; expression(0);
				State = 2609; Match(COMMA);
				State = 2610; expression(0);
				State = 2611; Match(RR_BRACKET);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2613; Match(SESSION_USER);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2614; Match(SYSTEM_USER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_sectionContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(tsqlParser.WHEN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(tsqlParser.THEN, 0); }
		public Switch_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSwitch_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSwitch_section(this);
		}
	}

	[RuleVersion(0)]
	public Switch_sectionContext switch_section() {
		Switch_sectionContext _localctx = new Switch_sectionContext(Context, State);
		EnterRule(_localctx, 240, RULE_switch_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2617; Match(WHEN);
			State = 2618; expression(0);
			State = 2619; Match(THEN);
			State = 2620; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_search_condition_sectionContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(tsqlParser.WHEN, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(tsqlParser.THEN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Switch_search_condition_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_search_condition_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSwitch_search_condition_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSwitch_search_condition_section(this);
		}
	}

	[RuleVersion(0)]
	public Switch_search_condition_sectionContext switch_search_condition_section() {
		Switch_search_condition_sectionContext _localctx = new Switch_search_condition_sectionContext(Context, State);
		EnterRule(_localctx, 242, RULE_switch_search_condition_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2622; Match(WHEN);
			State = 2623; search_condition();
			State = 2624; Match(THEN);
			State = 2625; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_table_aliasContext : ParserRuleContext {
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public As_table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_table_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterAs_table_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitAs_table_alias(this);
		}
	}

	[RuleVersion(0)]
	public As_table_aliasContext as_table_alias() {
		As_table_aliasContext _localctx = new As_table_aliasContext(Context, State);
		EnterRule(_localctx, 244, RULE_as_table_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2628;
			_la = TokenStream.La(1);
			if (_la==AS) {
				{
				State = 2627; Match(AS);
				}
			}

			State = 2630; table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_alias(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(Context, State);
		EnterRule(_localctx, 246, RULE_table_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2632; id();
			State = 2634;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,388,Context) ) {
			case 1:
				{
				State = 2633; with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_table_hintsContext : ParserRuleContext {
		public Table_hintContext[] table_hint() {
			return GetRuleContexts<Table_hintContext>();
		}
		public Table_hintContext table_hint(int i) {
			return GetRuleContext<Table_hintContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		public With_table_hintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_table_hints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterWith_table_hints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitWith_table_hints(this);
		}
	}

	[RuleVersion(0)]
	public With_table_hintsContext with_table_hints() {
		With_table_hintsContext _localctx = new With_table_hintsContext(Context, State);
		EnterRule(_localctx, 248, RULE_with_table_hints);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2637;
			_la = TokenStream.La(1);
			if (_la==WITH) {
				{
				State = 2636; Match(WITH);
				}
			}

			State = 2639; Match(LR_BRACKET);
			State = 2640; table_hint();
			State = 2645;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2641; Match(COMMA);
				State = 2642; table_hint();
				}
				}
				State = 2647;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 2648; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_with_table_hintsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		public Table_hintContext[] table_hint() {
			return GetRuleContexts<Table_hintContext>();
		}
		public Table_hintContext table_hint(int i) {
			return GetRuleContext<Table_hintContext>(i);
		}
		public Insert_with_table_hintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_with_table_hints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterInsert_with_table_hints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitInsert_with_table_hints(this);
		}
	}

	[RuleVersion(0)]
	public Insert_with_table_hintsContext insert_with_table_hints() {
		Insert_with_table_hintsContext _localctx = new Insert_with_table_hintsContext(Context, State);
		EnterRule(_localctx, 250, RULE_insert_with_table_hints);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2650; Match(WITH);
			State = 2651; Match(LR_BRACKET);
			State = 2652; table_hint();
			State = 2657;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2653; Match(COMMA);
				State = 2654; table_hint();
				}
				}
				State = 2659;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 2660; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_hintContext : ParserRuleContext {
		public ITerminalNode NOEXPAND() { return GetToken(tsqlParser.NOEXPAND, 0); }
		public ITerminalNode INDEX() { return GetToken(tsqlParser.INDEX, 0); }
		public Index_valueContext[] index_value() {
			return GetRuleContexts<Index_valueContext>();
		}
		public Index_valueContext index_value(int i) {
			return GetRuleContext<Index_valueContext>(i);
		}
		public ITerminalNode FORCESEEK() { return GetToken(tsqlParser.FORCESEEK, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(tsqlParser.SERIALIZABLE, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(tsqlParser.SNAPSHOT, 0); }
		public ITerminalNode SPATIAL_WINDOW_MAX_CELLS() { return GetToken(tsqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public ITerminalNode[] ID() { return GetTokens(tsqlParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(tsqlParser.ID, i);
		}
		public Table_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_hint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_hint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_hint(this);
		}
	}

	[RuleVersion(0)]
	public Table_hintContext table_hint() {
		Table_hintContext _localctx = new Table_hintContext(Context, State);
		EnterRule(_localctx, 252, RULE_table_hint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2663;
			_la = TokenStream.La(1);
			if (_la==NOEXPAND) {
				{
				State = 2662; Match(NOEXPAND);
				}
			}

			State = 2703;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,396,Context) ) {
			case 1:
				{
				State = 2665; Match(INDEX);
				State = 2666; Match(LR_BRACKET);
				State = 2667; index_value();
				State = 2672;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2668; Match(COMMA);
					State = 2669; index_value();
					}
					}
					State = 2674;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 2675; Match(RR_BRACKET);
				}
				break;
			case 2:
				{
				State = 2677; Match(INDEX);
				State = 2678; Match(EQUAL);
				State = 2679; index_value();
				}
				break;
			case 3:
				{
				State = 2680; Match(FORCESEEK);
				State = 2695;
				_la = TokenStream.La(1);
				if (_la==LR_BRACKET) {
					{
					State = 2681; Match(LR_BRACKET);
					State = 2682; index_value();
					State = 2683; Match(LR_BRACKET);
					State = 2684; Match(ID);
					State = 2689;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==COMMA) {
						{
						{
						State = 2685; Match(COMMA);
						State = 2686; Match(ID);
						}
						}
						State = 2691;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					State = 2692; Match(RR_BRACKET);
					State = 2693; Match(RR_BRACKET);
					}
				}

				}
				break;
			case 4:
				{
				State = 2697; Match(SERIALIZABLE);
				}
				break;
			case 5:
				{
				State = 2698; Match(SNAPSHOT);
				}
				break;
			case 6:
				{
				State = 2699; Match(SPATIAL_WINDOW_MAX_CELLS);
				State = 2700; Match(EQUAL);
				State = 2701; Match(DECIMAL);
				}
				break;
			case 7:
				{
				State = 2702; Match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_valueContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public Index_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterIndex_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitIndex_value(this);
		}
	}

	[RuleVersion(0)]
	public Index_valueContext index_value() {
		Index_valueContext _localctx = new Index_valueContext(Context, State);
		EnterRule(_localctx, 254, RULE_index_value);
		try {
			State = 2707;
			switch (TokenStream.La(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2705; id();
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2706; Match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_alias_listContext : ParserRuleContext {
		public Column_aliasContext[] column_alias() {
			return GetRuleContexts<Column_aliasContext>();
		}
		public Column_aliasContext column_alias(int i) {
			return GetRuleContext<Column_aliasContext>(i);
		}
		public Column_alias_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterColumn_alias_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitColumn_alias_list(this);
		}
	}

	[RuleVersion(0)]
	public Column_alias_listContext column_alias_list() {
		Column_alias_listContext _localctx = new Column_alias_listContext(Context, State);
		EnterRule(_localctx, 256, RULE_column_alias_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2709; Match(LR_BRACKET);
			State = 2710; column_alias();
			State = 2715;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2711; Match(COMMA);
				State = 2712; column_alias();
				}
				}
				State = 2717;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 2718; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterColumn_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitColumn_alias(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(Context, State);
		EnterRule(_localctx, 258, RULE_column_alias);
		try {
			State = 2722;
			switch (TokenStream.La(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2720; id();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2721; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_value_constructorContext : ParserRuleContext {
		public ITerminalNode VALUES() { return GetToken(tsqlParser.VALUES, 0); }
		public Expression_listContext[] expression_list() {
			return GetRuleContexts<Expression_listContext>();
		}
		public Expression_listContext expression_list(int i) {
			return GetRuleContext<Expression_listContext>(i);
		}
		public Table_value_constructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_value_constructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_value_constructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_value_constructor(this);
		}
	}

	[RuleVersion(0)]
	public Table_value_constructorContext table_value_constructor() {
		Table_value_constructorContext _localctx = new Table_value_constructorContext(Context, State);
		EnterRule(_localctx, 260, RULE_table_value_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2724; Match(VALUES);
			State = 2725; Match(LR_BRACKET);
			State = 2726; expression_list();
			State = 2727; Match(RR_BRACKET);
			State = 2735;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2728; Match(COMMA);
				State = 2729; Match(LR_BRACKET);
				State = 2730; expression_list();
				State = 2731; Match(RR_BRACKET);
				}
				}
				State = 2737;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 262, RULE_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2738; expression(0);
			State = 2743;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2739; Match(COMMA);
				State = 2740; expression(0);
				}
				}
				State = 2745;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ranking_windowed_functionContext : ParserRuleContext {
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ITerminalNode RANK() { return GetToken(tsqlParser.RANK, 0); }
		public ITerminalNode DENSE_RANK() { return GetToken(tsqlParser.DENSE_RANK, 0); }
		public ITerminalNode ROW_NUMBER() { return GetToken(tsqlParser.ROW_NUMBER, 0); }
		public ITerminalNode NTILE() { return GetToken(tsqlParser.NTILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Ranking_windowed_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ranking_windowed_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterRanking_windowed_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitRanking_windowed_function(this);
		}
	}

	[RuleVersion(0)]
	public Ranking_windowed_functionContext ranking_windowed_function() {
		Ranking_windowed_functionContext _localctx = new Ranking_windowed_functionContext(Context, State);
		EnterRule(_localctx, 264, RULE_ranking_windowed_function);
		int _la;
		try {
			State = 2756;
			switch (TokenStream.La(1)) {
			case DENSE_RANK:
			case RANK:
			case ROW_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2746;
				_la = TokenStream.La(1);
				if ( !(_la==DENSE_RANK || _la==RANK || _la==ROW_NUMBER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 2747; Match(LR_BRACKET);
				State = 2748; Match(RR_BRACKET);
				State = 2749; over_clause();
				}
				break;
			case NTILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2750; Match(NTILE);
				State = 2751; Match(LR_BRACKET);
				State = 2752; expression(0);
				State = 2753; Match(RR_BRACKET);
				State = 2754; over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_windowed_functionContext : ParserRuleContext {
		public All_distinct_expressionContext all_distinct_expression() {
			return GetRuleContext<All_distinct_expressionContext>(0);
		}
		public ITerminalNode AVG() { return GetToken(tsqlParser.AVG, 0); }
		public ITerminalNode MAX() { return GetToken(tsqlParser.MAX, 0); }
		public ITerminalNode MIN() { return GetToken(tsqlParser.MIN, 0); }
		public ITerminalNode SUM() { return GetToken(tsqlParser.SUM, 0); }
		public ITerminalNode STDEV() { return GetToken(tsqlParser.STDEV, 0); }
		public ITerminalNode STDEVP() { return GetToken(tsqlParser.STDEVP, 0); }
		public ITerminalNode VAR() { return GetToken(tsqlParser.VAR, 0); }
		public ITerminalNode VARP() { return GetToken(tsqlParser.VARP, 0); }
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ITerminalNode COUNT() { return GetToken(tsqlParser.COUNT, 0); }
		public ITerminalNode COUNT_BIG() { return GetToken(tsqlParser.COUNT_BIG, 0); }
		public ITerminalNode CHECKSUM_AGG() { return GetToken(tsqlParser.CHECKSUM_AGG, 0); }
		public ITerminalNode GROUPING() { return GetToken(tsqlParser.GROUPING, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode GROUPING_ID() { return GetToken(tsqlParser.GROUPING_ID, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Aggregate_windowed_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_windowed_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterAggregate_windowed_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitAggregate_windowed_function(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_windowed_functionContext aggregate_windowed_function() {
		Aggregate_windowed_functionContext _localctx = new Aggregate_windowed_functionContext(Context, State);
		EnterRule(_localctx, 266, RULE_aggregate_windowed_function);
		int _la;
		try {
			State = 2790;
			switch (TokenStream.La(1)) {
			case AVG:
			case MAX:
			case MIN:
			case STDEV:
			case STDEVP:
			case SUM:
			case VAR:
			case VARP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2758;
				_la = TokenStream.La(1);
				if ( !(_la==AVG || _la==MAX || _la==MIN || ((((_la - 367)) & ~0x3f) == 0 && ((1L << (_la - 367)) & ((1L << (STDEV - 367)) | (1L << (STDEVP - 367)) | (1L << (SUM - 367)) | (1L << (VAR - 367)) | (1L << (VARP - 367)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 2759; Match(LR_BRACKET);
				State = 2760; all_distinct_expression();
				State = 2761; Match(RR_BRACKET);
				State = 2763;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,403,Context) ) {
				case 1:
					{
					State = 2762; over_clause();
					}
					break;
				}
				}
				break;
			case COUNT:
			case COUNT_BIG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2765;
				_la = TokenStream.La(1);
				if ( !(_la==COUNT || _la==COUNT_BIG) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 2766; Match(LR_BRACKET);
				State = 2769;
				switch (TokenStream.La(1)) {
				case STAR:
					{
					State = 2767; Match(STAR);
					}
					break;
				case ALL:
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case DISTINCT:
				case FORCESEEK:
				case IDENTITY:
				case LEFT:
				case NULL:
				case NULLIF:
				case OVER:
				case RIGHT:
				case SESSION_USER:
				case SYSTEM_USER:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case BINARY_CHECKSUM:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					State = 2768; all_distinct_expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2771; Match(RR_BRACKET);
				State = 2773;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,405,Context) ) {
				case 1:
					{
					State = 2772; over_clause();
					}
					break;
				}
				}
				break;
			case CHECKSUM_AGG:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2775; Match(CHECKSUM_AGG);
				State = 2776; Match(LR_BRACKET);
				State = 2777; all_distinct_expression();
				State = 2778; Match(RR_BRACKET);
				}
				break;
			case GROUPING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2780; Match(GROUPING);
				State = 2781; Match(LR_BRACKET);
				State = 2782; expression(0);
				State = 2783; Match(RR_BRACKET);
				}
				break;
			case GROUPING_ID:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2785; Match(GROUPING_ID);
				State = 2786; Match(LR_BRACKET);
				State = 2787; expression_list();
				State = 2788; Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_distinct_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(tsqlParser.ALL, 0); }
		public ITerminalNode DISTINCT() { return GetToken(tsqlParser.DISTINCT, 0); }
		public All_distinct_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_distinct_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterAll_distinct_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitAll_distinct_expression(this);
		}
	}

	[RuleVersion(0)]
	public All_distinct_expressionContext all_distinct_expression() {
		All_distinct_expressionContext _localctx = new All_distinct_expressionContext(Context, State);
		EnterRule(_localctx, 268, RULE_all_distinct_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2793;
			_la = TokenStream.La(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 2792;
				_la = TokenStream.La(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
			}

			State = 2795; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Over_clauseContext : ParserRuleContext {
		public ITerminalNode OVER() { return GetToken(tsqlParser.OVER, 0); }
		public ITerminalNode PARTITION() { return GetToken(tsqlParser.PARTITION, 0); }
		public ITerminalNode BY() { return GetToken(tsqlParser.BY, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Row_or_range_clauseContext row_or_range_clause() {
			return GetRuleContext<Row_or_range_clauseContext>(0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOver_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOver_clause(this);
		}
	}

	[RuleVersion(0)]
	public Over_clauseContext over_clause() {
		Over_clauseContext _localctx = new Over_clauseContext(Context, State);
		EnterRule(_localctx, 270, RULE_over_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2797; Match(OVER);
			State = 2798; Match(LR_BRACKET);
			State = 2802;
			_la = TokenStream.La(1);
			if (_la==PARTITION) {
				{
				State = 2799; Match(PARTITION);
				State = 2800; Match(BY);
				State = 2801; expression_list();
				}
			}

			State = 2805;
			_la = TokenStream.La(1);
			if (_la==ORDER) {
				{
				State = 2804; order_by_clause();
				}
			}

			State = 2808;
			_la = TokenStream.La(1);
			if (_la==RANGE || _la==ROWS) {
				{
				State = 2807; row_or_range_clause();
				}
			}

			State = 2810; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_or_range_clauseContext : ParserRuleContext {
		public Window_frame_extentContext window_frame_extent() {
			return GetRuleContext<Window_frame_extentContext>(0);
		}
		public ITerminalNode ROWS() { return GetToken(tsqlParser.ROWS, 0); }
		public ITerminalNode RANGE() { return GetToken(tsqlParser.RANGE, 0); }
		public Row_or_range_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_or_range_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterRow_or_range_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitRow_or_range_clause(this);
		}
	}

	[RuleVersion(0)]
	public Row_or_range_clauseContext row_or_range_clause() {
		Row_or_range_clauseContext _localctx = new Row_or_range_clauseContext(Context, State);
		EnterRule(_localctx, 272, RULE_row_or_range_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2812;
			_la = TokenStream.La(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 2813; window_frame_extent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_extentContext : ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return GetRuleContext<Window_frame_precedingContext>(0);
		}
		public ITerminalNode BETWEEN() { return GetToken(tsqlParser.BETWEEN, 0); }
		public Window_frame_boundContext[] window_frame_bound() {
			return GetRuleContexts<Window_frame_boundContext>();
		}
		public Window_frame_boundContext window_frame_bound(int i) {
			return GetRuleContext<Window_frame_boundContext>(i);
		}
		public ITerminalNode AND() { return GetToken(tsqlParser.AND, 0); }
		public Window_frame_extentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_extent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterWindow_frame_extent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitWindow_frame_extent(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_extentContext window_frame_extent() {
		Window_frame_extentContext _localctx = new Window_frame_extentContext(Context, State);
		EnterRule(_localctx, 274, RULE_window_frame_extent);
		try {
			State = 2821;
			switch (TokenStream.La(1)) {
			case CURRENT:
			case UNBOUNDED:
			case DECIMAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2815; window_frame_preceding();
				}
				break;
			case BETWEEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2816; Match(BETWEEN);
				State = 2817; window_frame_bound();
				State = 2818; Match(AND);
				State = 2819; window_frame_bound();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_boundContext : ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return GetRuleContext<Window_frame_precedingContext>(0);
		}
		public Window_frame_followingContext window_frame_following() {
			return GetRuleContext<Window_frame_followingContext>(0);
		}
		public Window_frame_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_bound; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterWindow_frame_bound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitWindow_frame_bound(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_boundContext window_frame_bound() {
		Window_frame_boundContext _localctx = new Window_frame_boundContext(Context, State);
		EnterRule(_localctx, 276, RULE_window_frame_bound);
		try {
			State = 2825;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,412,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2823; window_frame_preceding();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2824; window_frame_following();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_precedingContext : ParserRuleContext {
		public ITerminalNode UNBOUNDED() { return GetToken(tsqlParser.UNBOUNDED, 0); }
		public ITerminalNode PRECEDING() { return GetToken(tsqlParser.PRECEDING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public ITerminalNode CURRENT() { return GetToken(tsqlParser.CURRENT, 0); }
		public ITerminalNode ROW() { return GetToken(tsqlParser.ROW, 0); }
		public Window_frame_precedingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_preceding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterWindow_frame_preceding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitWindow_frame_preceding(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_precedingContext window_frame_preceding() {
		Window_frame_precedingContext _localctx = new Window_frame_precedingContext(Context, State);
		EnterRule(_localctx, 278, RULE_window_frame_preceding);
		try {
			State = 2833;
			switch (TokenStream.La(1)) {
			case UNBOUNDED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2827; Match(UNBOUNDED);
				State = 2828; Match(PRECEDING);
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2829; Match(DECIMAL);
				State = 2830; Match(PRECEDING);
				}
				break;
			case CURRENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2831; Match(CURRENT);
				State = 2832; Match(ROW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_followingContext : ParserRuleContext {
		public ITerminalNode UNBOUNDED() { return GetToken(tsqlParser.UNBOUNDED, 0); }
		public ITerminalNode FOLLOWING() { return GetToken(tsqlParser.FOLLOWING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public Window_frame_followingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_following; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterWindow_frame_following(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitWindow_frame_following(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_followingContext window_frame_following() {
		Window_frame_followingContext _localctx = new Window_frame_followingContext(Context, State);
		EnterRule(_localctx, 280, RULE_window_frame_following);
		try {
			State = 2839;
			switch (TokenStream.La(1)) {
			case UNBOUNDED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2835; Match(UNBOUNDED);
				State = 2836; Match(FOLLOWING);
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2837; Match(DECIMAL);
				State = 2838; Match(FOLLOWING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_database_optionContext : ParserRuleContext {
		public ITerminalNode FILESTREAM() { return GetToken(tsqlParser.FILESTREAM, 0); }
		public Database_filestream_optionContext[] database_filestream_option() {
			return GetRuleContexts<Database_filestream_optionContext>();
		}
		public Database_filestream_optionContext database_filestream_option(int i) {
			return GetRuleContext<Database_filestream_optionContext>(i);
		}
		public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(tsqlParser.DEFAULT_LANGUAGE, 0); }
		public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public ITerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return GetToken(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public ITerminalNode NESTED_TRIGGERS() { return GetToken(tsqlParser.NESTED_TRIGGERS, 0); }
		public ITerminalNode OFF() { return GetToken(tsqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		public ITerminalNode TRANSFORM_NOISE_WORDS() { return GetToken(tsqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public ITerminalNode TWO_DIGIT_YEAR_CUTOFF() { return GetToken(tsqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public ITerminalNode DB_CHAINING() { return GetToken(tsqlParser.DB_CHAINING, 0); }
		public ITerminalNode TRUSTWORTHY() { return GetToken(tsqlParser.TRUSTWORTHY, 0); }
		public Create_database_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCreate_database_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCreate_database_option(this);
		}
	}

	[RuleVersion(0)]
	public Create_database_optionContext create_database_option() {
		Create_database_optionContext _localctx = new Create_database_optionContext(Context, State);
		EnterRule(_localctx, 282, RULE_create_database_option);
		int _la;
		try {
			int _alt;
			State = 2875;
			switch (TokenStream.La(1)) {
			case FILESTREAM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2841; Match(FILESTREAM);
				{
				State = 2842; database_filestream_option();
				State = 2847;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,415,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2843; Match(COMMA);
						State = 2844; database_filestream_option();
						}
						} 
					}
					State = 2849;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,415,Context);
				}
				}
				}
				break;
			case DEFAULT_LANGUAGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2850; Match(DEFAULT_LANGUAGE);
				State = 2851; Match(EQUAL);
				State = 2854;
				switch (TokenStream.La(1)) {
				case FORCESEEK:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 2852; id();
					}
					break;
				case STRING:
					{
					State = 2853; Match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DEFAULT_FULLTEXT_LANGUAGE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2856; Match(DEFAULT_FULLTEXT_LANGUAGE);
				State = 2857; Match(EQUAL);
				State = 2860;
				switch (TokenStream.La(1)) {
				case FORCESEEK:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 2858; id();
					}
					break;
				case STRING:
					{
					State = 2859; Match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NESTED_TRIGGERS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2862; Match(NESTED_TRIGGERS);
				State = 2863; Match(EQUAL);
				State = 2864;
				_la = TokenStream.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				break;
			case TRANSFORM_NOISE_WORDS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2865; Match(TRANSFORM_NOISE_WORDS);
				State = 2866; Match(EQUAL);
				State = 2867;
				_la = TokenStream.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				break;
			case TWO_DIGIT_YEAR_CUTOFF:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2868; Match(TWO_DIGIT_YEAR_CUTOFF);
				State = 2869; Match(EQUAL);
				State = 2870; Match(DECIMAL);
				}
				break;
			case DB_CHAINING:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2871; Match(DB_CHAINING);
				State = 2872;
				_la = TokenStream.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				break;
			case TRUSTWORTHY:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2873; Match(TRUSTWORTHY);
				State = 2874;
				_la = TokenStream.La(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_filestream_optionContext : ParserRuleContext {
		public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		public ITerminalNode NON_TRANSACTED_ACCESS() { return GetToken(tsqlParser.NON_TRANSACTED_ACCESS, 0); }
		public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		public ITerminalNode DIRECTORY_NAME() { return GetToken(tsqlParser.DIRECTORY_NAME, 0); }
		public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public ITerminalNode OFF() { return GetToken(tsqlParser.OFF, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(tsqlParser.READ_ONLY, 0); }
		public ITerminalNode FULL() { return GetToken(tsqlParser.FULL, 0); }
		public Database_filestream_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_filestream_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDatabase_filestream_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDatabase_filestream_option(this);
		}
	}

	[RuleVersion(0)]
	public Database_filestream_optionContext database_filestream_option() {
		Database_filestream_optionContext _localctx = new Database_filestream_optionContext(Context, State);
		EnterRule(_localctx, 284, RULE_database_filestream_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2877; Match(LR_BRACKET);
			State = 2884;
			switch (TokenStream.La(1)) {
			case NON_TRANSACTED_ACCESS:
				{
				{
				State = 2878; Match(NON_TRANSACTED_ACCESS);
				State = 2879; Match(EQUAL);
				State = 2880;
				_la = TokenStream.La(1);
				if ( !(_la==FULL || _la==OFF || _la==READ_ONLY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				}
				break;
			case DIRECTORY_NAME:
				{
				{
				State = 2881; Match(DIRECTORY_NAME);
				State = 2882; Match(EQUAL);
				State = 2883; Match(STRING);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2886; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_file_specContext : ParserRuleContext {
		public File_groupContext file_group() {
			return GetRuleContext<File_groupContext>(0);
		}
		public File_specContext file_spec() {
			return GetRuleContext<File_specContext>(0);
		}
		public Database_file_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_file_spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDatabase_file_spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDatabase_file_spec(this);
		}
	}

	[RuleVersion(0)]
	public Database_file_specContext database_file_spec() {
		Database_file_specContext _localctx = new Database_file_specContext(Context, State);
		EnterRule(_localctx, 286, RULE_database_file_spec);
		try {
			State = 2890;
			switch (TokenStream.La(1)) {
			case FILEGROUP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2888; file_group();
				}
				break;
			case LR_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2889; file_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_groupContext : ParserRuleContext {
		public ITerminalNode FILEGROUP() { return GetToken(tsqlParser.FILEGROUP, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public File_specContext[] file_spec() {
			return GetRuleContexts<File_specContext>();
		}
		public File_specContext file_spec(int i) {
			return GetRuleContext<File_specContext>(i);
		}
		public ITerminalNode[] CONTAINS() { return GetTokens(tsqlParser.CONTAINS); }
		public ITerminalNode CONTAINS(int i) {
			return GetToken(tsqlParser.CONTAINS, i);
		}
		public ITerminalNode FILESTREAM() { return GetToken(tsqlParser.FILESTREAM, 0); }
		public ITerminalNode DEFAULT() { return GetToken(tsqlParser.DEFAULT, 0); }
		public ITerminalNode MEMORY_OPTIMIZED_DATA() { return GetToken(tsqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public File_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFile_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFile_group(this);
		}
	}

	[RuleVersion(0)]
	public File_groupContext file_group() {
		File_groupContext _localctx = new File_groupContext(Context, State);
		EnterRule(_localctx, 288, RULE_file_group);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2892; Match(FILEGROUP);
			State = 2893; id();
			State = 2896;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,421,Context) ) {
			case 1:
				{
				State = 2894; Match(CONTAINS);
				State = 2895; Match(FILESTREAM);
				}
				break;
			}
			State = 2899;
			_la = TokenStream.La(1);
			if (_la==DEFAULT) {
				{
				State = 2898; Match(DEFAULT);
				}
			}

			State = 2903;
			_la = TokenStream.La(1);
			if (_la==CONTAINS) {
				{
				State = 2901; Match(CONTAINS);
				State = 2902; Match(MEMORY_OPTIMIZED_DATA);
				}
			}

			State = 2905; file_spec();
			State = 2910;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,424,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2906; Match(COMMA);
					State = 2907; file_spec();
					}
					} 
				}
				State = 2912;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,424,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_specContext : ParserRuleContext {
		public IToken file;
		public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		public ITerminalNode NAME() { return GetToken(tsqlParser.NAME, 0); }
		public ITerminalNode[] EQUAL() { return GetTokens(tsqlParser.EQUAL); }
		public ITerminalNode EQUAL(int i) {
			return GetToken(tsqlParser.EQUAL, i);
		}
		public ITerminalNode FILENAME() { return GetToken(tsqlParser.FILENAME, 0); }
		public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		public ITerminalNode[] STRING() { return GetTokens(tsqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(tsqlParser.STRING, i);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode SIZE() { return GetToken(tsqlParser.SIZE, 0); }
		public File_sizeContext[] file_size() {
			return GetRuleContexts<File_sizeContext>();
		}
		public File_sizeContext file_size(int i) {
			return GetRuleContext<File_sizeContext>(i);
		}
		public ITerminalNode MAXSIZE() { return GetToken(tsqlParser.MAXSIZE, 0); }
		public ITerminalNode FILEGROWTH() { return GetToken(tsqlParser.FILEGROWTH, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(tsqlParser.UNLIMITED, 0); }
		public File_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFile_spec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFile_spec(this);
		}
	}

	[RuleVersion(0)]
	public File_specContext file_spec() {
		File_specContext _localctx = new File_specContext(Context, State);
		EnterRule(_localctx, 290, RULE_file_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2913; Match(LR_BRACKET);
			State = 2914; Match(NAME);
			State = 2915; Match(EQUAL);
			State = 2918;
			switch (TokenStream.La(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				State = 2916; id();
				}
				break;
			case STRING:
				{
				State = 2917; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2921;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 2920; Match(COMMA);
				}
			}

			State = 2923; Match(FILENAME);
			State = 2924; Match(EQUAL);
			State = 2925; _localctx.file = Match(STRING);
			State = 2927;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 2926; Match(COMMA);
				}
			}

			State = 2935;
			_la = TokenStream.La(1);
			if (_la==SIZE) {
				{
				State = 2929; Match(SIZE);
				State = 2930; Match(EQUAL);
				State = 2931; file_size();
				State = 2933;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 2932; Match(COMMA);
					}
				}

				}
			}

			State = 2946;
			_la = TokenStream.La(1);
			if (_la==MAXSIZE) {
				{
				State = 2937; Match(MAXSIZE);
				State = 2938; Match(EQUAL);
				State = 2941;
				switch (TokenStream.La(1)) {
				case DECIMAL:
					{
					State = 2939; file_size();
					}
					break;
				case UNLIMITED:
					{
					State = 2940; Match(UNLIMITED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2944;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 2943; Match(COMMA);
					}
				}

				}
			}

			State = 2954;
			_la = TokenStream.La(1);
			if (_la==FILEGROWTH) {
				{
				State = 2948; Match(FILEGROWTH);
				State = 2949; Match(EQUAL);
				State = 2950; file_size();
				State = 2952;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 2951; Match(COMMA);
					}
				}

				}
			}

			State = 2956; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_table_nameContext : ParserRuleContext {
		public IdContext server;
		public IdContext database;
		public IdContext schema;
		public IdContext table;
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Full_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFull_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFull_table_name(this);
		}
	}

	[RuleVersion(0)]
	public Full_table_nameContext full_table_name() {
		Full_table_nameContext _localctx = new Full_table_nameContext(Context, State);
		EnterRule(_localctx, 292, RULE_full_table_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2975;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,436,Context) ) {
			case 1:
				{
				State = 2958; _localctx.server = id();
				State = 2959; Match(DOT);
				State = 2960; _localctx.database = id();
				State = 2961; Match(DOT);
				State = 2962; _localctx.schema = id();
				State = 2963; Match(DOT);
				}
				break;
			case 2:
				{
				State = 2965; _localctx.database = id();
				State = 2966; Match(DOT);
				State = 2968;
				_la = TokenStream.La(1);
				if (_la==FORCESEEK || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ABSOLUTE - 193)) | (1L << (APPLY - 193)) | (1L << (AUTO - 193)) | (1L << (AVG - 193)) | (1L << (BASE64 - 193)) | (1L << (CALLER - 193)) | (1L << (CAST - 193)) | (1L << (CATCH - 193)) | (1L << (CHECKSUM_AGG - 193)) | (1L << (COMMITTED - 193)) | (1L << (CONCAT - 193)) | (1L << (CONTROL - 193)) | (1L << (COOKIE - 193)) | (1L << (COUNT - 193)) | (1L << (COUNT_BIG - 193)) | (1L << (DELAY - 193)) | (1L << (DELETED - 193)) | (1L << (DENSE_RANK - 193)) | (1L << (DISABLE - 193)) | (1L << (DYNAMIC - 193)) | (1L << (ENCRYPTION - 193)) | (1L << (EXPAND - 193)) | (1L << (FAST - 193)) | (1L << (FAST_FORWARD - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (FIRST - 259)) | (1L << (FOLLOWING - 259)) | (1L << (FORCE - 259)) | (1L << (FORCED - 259)) | (1L << (FORWARD_ONLY - 259)) | (1L << (FULLSCAN - 259)) | (1L << (GLOBAL - 259)) | (1L << (GO - 259)) | (1L << (GROUPING - 259)) | (1L << (GROUPING_ID - 259)) | (1L << (HASH - 259)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 259)) | (1L << (IMPERSONATE - 259)) | (1L << (INSENSITIVE - 259)) | (1L << (INSERTED - 259)) | (1L << (ISOLATION - 259)) | (1L << (KEEP - 259)) | (1L << (KEEPFIXED - 259)) | (1L << (KEYSET - 259)) | (1L << (LAST - 259)) | (1L << (LEVEL - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCK_ESCALATION - 259)) | (1L << (LOGIN - 259)) | (1L << (LOOP - 259)) | (1L << (MARK - 259)) | (1L << (MAX - 259)) | (1L << (MAXDOP - 259)) | (1L << (MAXRECURSION - 259)) | (1L << (MIN - 259)) | (1L << (MODIFY - 259)) | (1L << (NAME - 259)) | (1L << (NEXT - 259)) | (1L << (NOCOUNT - 259)) | (1L << (NOEXPAND - 259)) | (1L << (NORECOMPUTE - 259)) | (1L << (NTILE - 259)) | (1L << (NUMBER - 259)) | (1L << (OFFSET - 259)) | (1L << (ONLINE - 259)) | (1L << (ONLY - 259)) | (1L << (OPTIMISTIC - 259)) | (1L << (OPTIMIZE - 259)) | (1L << (OUT - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (OUTPUT - 323)) | (1L << (OWNER - 323)) | (1L << (PARAMETERIZATION - 323)) | (1L << (PARTITION - 323)) | (1L << (PATH - 323)) | (1L << (PRECEDING - 323)) | (1L << (PRIOR - 323)) | (1L << (PRIVILEGES - 323)) | (1L << (RANGE - 323)) | (1L << (RANK - 323)) | (1L << (READONLY - 323)) | (1L << (READ_ONLY - 323)) | (1L << (RECOMPILE - 323)) | (1L << (RELATIVE - 323)) | (1L << (REMOTE - 323)) | (1L << (REPEATABLE - 323)) | (1L << (ROBUST - 323)) | (1L << (ROOT - 323)) | (1L << (ROW - 323)) | (1L << (ROWGUID - 323)) | (1L << (ROWS - 323)) | (1L << (ROW_NUMBER - 323)) | (1L << (SAMPLE - 323)) | (1L << (SCHEMABINDING - 323)) | (1L << (SCROLL - 323)) | (1L << (SCROLL_LOCKS - 323)) | (1L << (SELF - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SIMPLE - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 323)) | (1L << (STATIC - 323)) | (1L << (STATS_STREAM - 323)) | (1L << (STDEV - 323)) | (1L << (STDEVP - 323)) | (1L << (SUM - 323)) | (1L << (TEXTIMAGE_ON - 323)) | (1L << (THROW - 323)) | (1L << (TIES - 323)) | (1L << (TIME - 323)) | (1L << (TRY - 323)) | (1L << (TYPE - 323)) | (1L << (TYPE_WARNING - 323)) | (1L << (UNBOUNDED - 323)) | (1L << (UNCOMMITTED - 323)) | (1L << (UNKNOWN - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (USING - 388)) | (1L << (VAR - 388)) | (1L << (VARP - 388)) | (1L << (VIEWS - 388)) | (1L << (VIEW_METADATA - 388)) | (1L << (WORK - 388)) | (1L << (XML - 388)) | (1L << (XMLNAMESPACES - 388)) | (1L << (DOUBLE_QUOTE_ID - 388)) | (1L << (SQUARE_BRACKET_ID - 388)) | (1L << (ID - 388)))) != 0)) {
					{
					State = 2967; _localctx.schema = id();
					}
				}

				State = 2970; Match(DOT);
				}
				break;
			case 3:
				{
				State = 2972; _localctx.schema = id();
				State = 2973; Match(DOT);
				}
				break;
			}
			State = 2977; _localctx.table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		public IdContext database;
		public IdContext schema;
		public IdContext table;
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_name(this);
		}
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(Context, State);
		EnterRule(_localctx, 294, RULE_table_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2989;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,438,Context) ) {
			case 1:
				{
				State = 2979; _localctx.database = id();
				State = 2980; Match(DOT);
				State = 2982;
				_la = TokenStream.La(1);
				if (_la==FORCESEEK || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ABSOLUTE - 193)) | (1L << (APPLY - 193)) | (1L << (AUTO - 193)) | (1L << (AVG - 193)) | (1L << (BASE64 - 193)) | (1L << (CALLER - 193)) | (1L << (CAST - 193)) | (1L << (CATCH - 193)) | (1L << (CHECKSUM_AGG - 193)) | (1L << (COMMITTED - 193)) | (1L << (CONCAT - 193)) | (1L << (CONTROL - 193)) | (1L << (COOKIE - 193)) | (1L << (COUNT - 193)) | (1L << (COUNT_BIG - 193)) | (1L << (DELAY - 193)) | (1L << (DELETED - 193)) | (1L << (DENSE_RANK - 193)) | (1L << (DISABLE - 193)) | (1L << (DYNAMIC - 193)) | (1L << (ENCRYPTION - 193)) | (1L << (EXPAND - 193)) | (1L << (FAST - 193)) | (1L << (FAST_FORWARD - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (FIRST - 259)) | (1L << (FOLLOWING - 259)) | (1L << (FORCE - 259)) | (1L << (FORCED - 259)) | (1L << (FORWARD_ONLY - 259)) | (1L << (FULLSCAN - 259)) | (1L << (GLOBAL - 259)) | (1L << (GO - 259)) | (1L << (GROUPING - 259)) | (1L << (GROUPING_ID - 259)) | (1L << (HASH - 259)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 259)) | (1L << (IMPERSONATE - 259)) | (1L << (INSENSITIVE - 259)) | (1L << (INSERTED - 259)) | (1L << (ISOLATION - 259)) | (1L << (KEEP - 259)) | (1L << (KEEPFIXED - 259)) | (1L << (KEYSET - 259)) | (1L << (LAST - 259)) | (1L << (LEVEL - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCK_ESCALATION - 259)) | (1L << (LOGIN - 259)) | (1L << (LOOP - 259)) | (1L << (MARK - 259)) | (1L << (MAX - 259)) | (1L << (MAXDOP - 259)) | (1L << (MAXRECURSION - 259)) | (1L << (MIN - 259)) | (1L << (MODIFY - 259)) | (1L << (NAME - 259)) | (1L << (NEXT - 259)) | (1L << (NOCOUNT - 259)) | (1L << (NOEXPAND - 259)) | (1L << (NORECOMPUTE - 259)) | (1L << (NTILE - 259)) | (1L << (NUMBER - 259)) | (1L << (OFFSET - 259)) | (1L << (ONLINE - 259)) | (1L << (ONLY - 259)) | (1L << (OPTIMISTIC - 259)) | (1L << (OPTIMIZE - 259)) | (1L << (OUT - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (OUTPUT - 323)) | (1L << (OWNER - 323)) | (1L << (PARAMETERIZATION - 323)) | (1L << (PARTITION - 323)) | (1L << (PATH - 323)) | (1L << (PRECEDING - 323)) | (1L << (PRIOR - 323)) | (1L << (PRIVILEGES - 323)) | (1L << (RANGE - 323)) | (1L << (RANK - 323)) | (1L << (READONLY - 323)) | (1L << (READ_ONLY - 323)) | (1L << (RECOMPILE - 323)) | (1L << (RELATIVE - 323)) | (1L << (REMOTE - 323)) | (1L << (REPEATABLE - 323)) | (1L << (ROBUST - 323)) | (1L << (ROOT - 323)) | (1L << (ROW - 323)) | (1L << (ROWGUID - 323)) | (1L << (ROWS - 323)) | (1L << (ROW_NUMBER - 323)) | (1L << (SAMPLE - 323)) | (1L << (SCHEMABINDING - 323)) | (1L << (SCROLL - 323)) | (1L << (SCROLL_LOCKS - 323)) | (1L << (SELF - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SIMPLE - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 323)) | (1L << (STATIC - 323)) | (1L << (STATS_STREAM - 323)) | (1L << (STDEV - 323)) | (1L << (STDEVP - 323)) | (1L << (SUM - 323)) | (1L << (TEXTIMAGE_ON - 323)) | (1L << (THROW - 323)) | (1L << (TIES - 323)) | (1L << (TIME - 323)) | (1L << (TRY - 323)) | (1L << (TYPE - 323)) | (1L << (TYPE_WARNING - 323)) | (1L << (UNBOUNDED - 323)) | (1L << (UNCOMMITTED - 323)) | (1L << (UNKNOWN - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (USING - 388)) | (1L << (VAR - 388)) | (1L << (VARP - 388)) | (1L << (VIEWS - 388)) | (1L << (VIEW_METADATA - 388)) | (1L << (WORK - 388)) | (1L << (XML - 388)) | (1L << (XMLNAMESPACES - 388)) | (1L << (DOUBLE_QUOTE_ID - 388)) | (1L << (SQUARE_BRACKET_ID - 388)) | (1L << (ID - 388)))) != 0)) {
					{
					State = 2981; _localctx.schema = id();
					}
				}

				State = 2984; Match(DOT);
				}
				break;
			case 2:
				{
				State = 2986; _localctx.schema = id();
				State = 2987; Match(DOT);
				}
				break;
			}
			State = 2991; _localctx.table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_nameContext : ParserRuleContext {
		public IdContext schema;
		public IdContext name;
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Simple_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSimple_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSimple_name(this);
		}
	}

	[RuleVersion(0)]
	public Simple_nameContext simple_name() {
		Simple_nameContext _localctx = new Simple_nameContext(Context, State);
		EnterRule(_localctx, 296, RULE_simple_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2996;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,439,Context) ) {
			case 1:
				{
				State = 2993; _localctx.schema = id();
				State = 2994; Match(DOT);
				}
				break;
			}
			State = 2998; _localctx.name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_proc_nameContext : ParserRuleContext {
		public IdContext database;
		public IdContext schema;
		public IdContext procedure;
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Func_proc_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_proc_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFunc_proc_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFunc_proc_name(this);
		}
	}

	[RuleVersion(0)]
	public Func_proc_nameContext func_proc_name() {
		Func_proc_nameContext _localctx = new Func_proc_nameContext(Context, State);
		EnterRule(_localctx, 298, RULE_func_proc_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3010;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,441,Context) ) {
			case 1:
				{
				State = 3000; _localctx.database = id();
				State = 3001; Match(DOT);
				State = 3003;
				_la = TokenStream.La(1);
				if (_la==FORCESEEK || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ABSOLUTE - 193)) | (1L << (APPLY - 193)) | (1L << (AUTO - 193)) | (1L << (AVG - 193)) | (1L << (BASE64 - 193)) | (1L << (CALLER - 193)) | (1L << (CAST - 193)) | (1L << (CATCH - 193)) | (1L << (CHECKSUM_AGG - 193)) | (1L << (COMMITTED - 193)) | (1L << (CONCAT - 193)) | (1L << (CONTROL - 193)) | (1L << (COOKIE - 193)) | (1L << (COUNT - 193)) | (1L << (COUNT_BIG - 193)) | (1L << (DELAY - 193)) | (1L << (DELETED - 193)) | (1L << (DENSE_RANK - 193)) | (1L << (DISABLE - 193)) | (1L << (DYNAMIC - 193)) | (1L << (ENCRYPTION - 193)) | (1L << (EXPAND - 193)) | (1L << (FAST - 193)) | (1L << (FAST_FORWARD - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (FIRST - 259)) | (1L << (FOLLOWING - 259)) | (1L << (FORCE - 259)) | (1L << (FORCED - 259)) | (1L << (FORWARD_ONLY - 259)) | (1L << (FULLSCAN - 259)) | (1L << (GLOBAL - 259)) | (1L << (GO - 259)) | (1L << (GROUPING - 259)) | (1L << (GROUPING_ID - 259)) | (1L << (HASH - 259)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 259)) | (1L << (IMPERSONATE - 259)) | (1L << (INSENSITIVE - 259)) | (1L << (INSERTED - 259)) | (1L << (ISOLATION - 259)) | (1L << (KEEP - 259)) | (1L << (KEEPFIXED - 259)) | (1L << (KEYSET - 259)) | (1L << (LAST - 259)) | (1L << (LEVEL - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCK_ESCALATION - 259)) | (1L << (LOGIN - 259)) | (1L << (LOOP - 259)) | (1L << (MARK - 259)) | (1L << (MAX - 259)) | (1L << (MAXDOP - 259)) | (1L << (MAXRECURSION - 259)) | (1L << (MIN - 259)) | (1L << (MODIFY - 259)) | (1L << (NAME - 259)) | (1L << (NEXT - 259)) | (1L << (NOCOUNT - 259)) | (1L << (NOEXPAND - 259)) | (1L << (NORECOMPUTE - 259)) | (1L << (NTILE - 259)) | (1L << (NUMBER - 259)) | (1L << (OFFSET - 259)) | (1L << (ONLINE - 259)) | (1L << (ONLY - 259)) | (1L << (OPTIMISTIC - 259)) | (1L << (OPTIMIZE - 259)) | (1L << (OUT - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (OUTPUT - 323)) | (1L << (OWNER - 323)) | (1L << (PARAMETERIZATION - 323)) | (1L << (PARTITION - 323)) | (1L << (PATH - 323)) | (1L << (PRECEDING - 323)) | (1L << (PRIOR - 323)) | (1L << (PRIVILEGES - 323)) | (1L << (RANGE - 323)) | (1L << (RANK - 323)) | (1L << (READONLY - 323)) | (1L << (READ_ONLY - 323)) | (1L << (RECOMPILE - 323)) | (1L << (RELATIVE - 323)) | (1L << (REMOTE - 323)) | (1L << (REPEATABLE - 323)) | (1L << (ROBUST - 323)) | (1L << (ROOT - 323)) | (1L << (ROW - 323)) | (1L << (ROWGUID - 323)) | (1L << (ROWS - 323)) | (1L << (ROW_NUMBER - 323)) | (1L << (SAMPLE - 323)) | (1L << (SCHEMABINDING - 323)) | (1L << (SCROLL - 323)) | (1L << (SCROLL_LOCKS - 323)) | (1L << (SELF - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SIMPLE - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 323)) | (1L << (STATIC - 323)) | (1L << (STATS_STREAM - 323)) | (1L << (STDEV - 323)) | (1L << (STDEVP - 323)) | (1L << (SUM - 323)) | (1L << (TEXTIMAGE_ON - 323)) | (1L << (THROW - 323)) | (1L << (TIES - 323)) | (1L << (TIME - 323)) | (1L << (TRY - 323)) | (1L << (TYPE - 323)) | (1L << (TYPE_WARNING - 323)) | (1L << (UNBOUNDED - 323)) | (1L << (UNCOMMITTED - 323)) | (1L << (UNKNOWN - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (USING - 388)) | (1L << (VAR - 388)) | (1L << (VARP - 388)) | (1L << (VIEWS - 388)) | (1L << (VIEW_METADATA - 388)) | (1L << (WORK - 388)) | (1L << (XML - 388)) | (1L << (XMLNAMESPACES - 388)) | (1L << (DOUBLE_QUOTE_ID - 388)) | (1L << (SQUARE_BRACKET_ID - 388)) | (1L << (ID - 388)))) != 0)) {
					{
					State = 3002; _localctx.schema = id();
					}
				}

				State = 3005; Match(DOT);
				}
				break;
			case 2:
				{
				{
				State = 3007; _localctx.schema = id();
				}
				State = 3008; Match(DOT);
				}
				break;
			}
			State = 3012; _localctx.procedure = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_objectContext : ParserRuleContext {
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Ddl_objectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_object; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDdl_object(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDdl_object(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_objectContext ddl_object() {
		Ddl_objectContext _localctx = new Ddl_objectContext(Context, State);
		EnterRule(_localctx, 300, RULE_ddl_object);
		try {
			State = 3016;
			switch (TokenStream.La(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3014; full_table_name();
				}
				break;
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3015; Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_column_nameContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Full_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_column_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFull_column_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFull_column_name(this);
		}
	}

	[RuleVersion(0)]
	public Full_column_nameContext full_column_name() {
		Full_column_nameContext _localctx = new Full_column_nameContext(Context, State);
		EnterRule(_localctx, 302, RULE_full_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3021;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,443,Context) ) {
			case 1:
				{
				State = 3018; table_name();
				State = 3019; Match(DOT);
				}
				break;
			}
			State = 3023; id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_listContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterColumn_name_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitColumn_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_listContext column_name_list() {
		Column_name_listContext _localctx = new Column_name_listContext(Context, State);
		EnterRule(_localctx, 304, RULE_column_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3025; id();
			State = 3030;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3026; Match(COMMA);
				State = 3027; id();
				}
				}
				State = 3032;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_nameContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Cursor_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCursor_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCursor_name(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_nameContext cursor_name() {
		Cursor_nameContext _localctx = new Cursor_nameContext(Context, State);
		EnterRule(_localctx, 306, RULE_cursor_name);
		try {
			State = 3035;
			switch (TokenStream.La(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3033; id();
				}
				break;
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3034; Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_offContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(tsqlParser.OFF, 0); }
		public On_offContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_off; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOn_off(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOn_off(this);
		}
	}

	[RuleVersion(0)]
	public On_offContext on_off() {
		On_offContext _localctx = new On_offContext(Context, State);
		EnterRule(_localctx, 308, RULE_on_off);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3037;
			_la = TokenStream.La(1);
			if ( !(_la==OFF || _la==ON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClusteredContext : ParserRuleContext {
		public ITerminalNode CLUSTERED() { return GetToken(tsqlParser.CLUSTERED, 0); }
		public ITerminalNode NONCLUSTERED() { return GetToken(tsqlParser.NONCLUSTERED, 0); }
		public ClusteredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clustered; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterClustered(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitClustered(this);
		}
	}

	[RuleVersion(0)]
	public ClusteredContext clustered() {
		ClusteredContext _localctx = new ClusteredContext(Context, State);
		EnterRule(_localctx, 310, RULE_clustered);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3039;
			_la = TokenStream.La(1);
			if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_notnullContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(tsqlParser.NULL, 0); }
		public ITerminalNode NOT() { return GetToken(tsqlParser.NOT, 0); }
		public Null_notnullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_notnull; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterNull_notnull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitNull_notnull(this);
		}
	}

	[RuleVersion(0)]
	public Null_notnullContext null_notnull() {
		Null_notnullContext _localctx = new Null_notnullContext(Context, State);
		EnterRule(_localctx, 312, RULE_null_notnull);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3042;
			_la = TokenStream.La(1);
			if (_la==NOT) {
				{
				State = 3041; Match(NOT);
				}
			}

			State = 3044; Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_function_nameContext : ParserRuleContext {
		public Func_proc_nameContext func_proc_name() {
			return GetRuleContext<Func_proc_nameContext>(0);
		}
		public ITerminalNode RIGHT() { return GetToken(tsqlParser.RIGHT, 0); }
		public ITerminalNode LEFT() { return GetToken(tsqlParser.LEFT, 0); }
		public ITerminalNode BINARY_CHECKSUM() { return GetToken(tsqlParser.BINARY_CHECKSUM, 0); }
		public ITerminalNode CHECKSUM() { return GetToken(tsqlParser.CHECKSUM, 0); }
		public Scalar_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_function_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterScalar_function_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitScalar_function_name(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_function_nameContext scalar_function_name() {
		Scalar_function_nameContext _localctx = new Scalar_function_nameContext(Context, State);
		EnterRule(_localctx, 314, RULE_scalar_function_name);
		try {
			State = 3051;
			switch (TokenStream.La(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3046; func_proc_name();
				}
				break;
			case RIGHT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3047; Match(RIGHT);
				}
				break;
			case LEFT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3048; Match(LEFT);
				}
				break;
			case BINARY_CHECKSUM:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3049; Match(BINARY_CHECKSUM);
				}
				break;
			case CHECKSUM:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3050; Match(CHECKSUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_typeContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode IDENTITY() { return GetToken(tsqlParser.IDENTITY, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(tsqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(tsqlParser.DECIMAL, i);
		}
		public ITerminalNode MAX() { return GetToken(tsqlParser.MAX, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterData_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitData_type(this);
		}
	}

	[RuleVersion(0)]
	public Data_typeContext data_type() {
		Data_typeContext _localctx = new Data_typeContext(Context, State);
		EnterRule(_localctx, 316, RULE_data_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3053; id();
			State = 3055;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,448,Context) ) {
			case 1:
				{
				State = 3054; Match(IDENTITY);
				}
				break;
			}
			State = 3064;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,450,Context) ) {
			case 1:
				{
				State = 3057; Match(LR_BRACKET);
				State = 3058;
				_la = TokenStream.La(1);
				if ( !(_la==MAX || _la==DECIMAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 3061;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 3059; Match(COMMA);
					State = 3060; Match(DECIMAL);
					}
				}

				State = 3063; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_valueContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(tsqlParser.NULL, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Default_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDefault_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDefault_value(this);
		}
	}

	[RuleVersion(0)]
	public Default_valueContext default_value() {
		Default_valueContext _localctx = new Default_valueContext(Context, State);
		EnterRule(_localctx, 318, RULE_default_value);
		try {
			State = 3068;
			switch (TokenStream.La(1)) {
			case NULL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3066; Match(NULL);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3067; constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public IToken dollar;
		public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public ITerminalNode BINARY() { return GetToken(tsqlParser.BINARY, 0); }
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public ITerminalNode REAL() { return GetToken(tsqlParser.REAL, 0); }
		public ITerminalNode FLOAT() { return GetToken(tsqlParser.FLOAT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 320, RULE_constant);
		int _la;
		try {
			State = 3085;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,455,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3070; Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3071; Match(BINARY);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3073;
				_la = TokenStream.La(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 3072; sign();
					}
				}

				State = 3075; Match(DECIMAL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3077;
				_la = TokenStream.La(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 3076; sign();
					}
				}

				State = 3079;
				_la = TokenStream.La(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3081;
				_la = TokenStream.La(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 3080; sign();
					}
				}

				State = 3083; _localctx.dollar = Match(DOLLAR);
				State = 3084;
				_la = TokenStream.La(1);
				if ( !(_la==DECIMAL || _la==FLOAT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignContext : ParserRuleContext {
		public SignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSign(this);
		}
	}

	[RuleVersion(0)]
	public SignContext sign() {
		SignContext _localctx = new SignContext(Context, State);
		EnterRule(_localctx, 322, RULE_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3087;
			_la = TokenStream.La(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public Simple_idContext simple_id() {
			return GetRuleContext<Simple_idContext>(0);
		}
		public ITerminalNode DOUBLE_QUOTE_ID() { return GetToken(tsqlParser.DOUBLE_QUOTE_ID, 0); }
		public ITerminalNode SQUARE_BRACKET_ID() { return GetToken(tsqlParser.SQUARE_BRACKET_ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 324, RULE_id);
		try {
			State = 3092;
			switch (TokenStream.La(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3089; simple_id();
				}
				break;
			case DOUBLE_QUOTE_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3090; Match(DOUBLE_QUOTE_ID);
				}
				break;
			case SQUARE_BRACKET_ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3091; Match(SQUARE_BRACKET_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_idContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(tsqlParser.ID, 0); }
		public ITerminalNode ABSOLUTE() { return GetToken(tsqlParser.ABSOLUTE, 0); }
		public ITerminalNode APPLY() { return GetToken(tsqlParser.APPLY, 0); }
		public ITerminalNode AUTO() { return GetToken(tsqlParser.AUTO, 0); }
		public ITerminalNode AVG() { return GetToken(tsqlParser.AVG, 0); }
		public ITerminalNode BASE64() { return GetToken(tsqlParser.BASE64, 0); }
		public ITerminalNode CALLER() { return GetToken(tsqlParser.CALLER, 0); }
		public ITerminalNode CAST() { return GetToken(tsqlParser.CAST, 0); }
		public ITerminalNode CATCH() { return GetToken(tsqlParser.CATCH, 0); }
		public ITerminalNode CHECKSUM_AGG() { return GetToken(tsqlParser.CHECKSUM_AGG, 0); }
		public ITerminalNode COMMITTED() { return GetToken(tsqlParser.COMMITTED, 0); }
		public ITerminalNode CONCAT() { return GetToken(tsqlParser.CONCAT, 0); }
		public ITerminalNode CONTROL() { return GetToken(tsqlParser.CONTROL, 0); }
		public ITerminalNode COOKIE() { return GetToken(tsqlParser.COOKIE, 0); }
		public ITerminalNode COUNT() { return GetToken(tsqlParser.COUNT, 0); }
		public ITerminalNode COUNT_BIG() { return GetToken(tsqlParser.COUNT_BIG, 0); }
		public ITerminalNode DELAY() { return GetToken(tsqlParser.DELAY, 0); }
		public ITerminalNode DELETED() { return GetToken(tsqlParser.DELETED, 0); }
		public ITerminalNode DENSE_RANK() { return GetToken(tsqlParser.DENSE_RANK, 0); }
		public ITerminalNode DISABLE() { return GetToken(tsqlParser.DISABLE, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(tsqlParser.DYNAMIC, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(tsqlParser.ENCRYPTION, 0); }
		public ITerminalNode EXPAND() { return GetToken(tsqlParser.EXPAND, 0); }
		public ITerminalNode FAST() { return GetToken(tsqlParser.FAST, 0); }
		public ITerminalNode FAST_FORWARD() { return GetToken(tsqlParser.FAST_FORWARD, 0); }
		public ITerminalNode FIRST() { return GetToken(tsqlParser.FIRST, 0); }
		public ITerminalNode FOLLOWING() { return GetToken(tsqlParser.FOLLOWING, 0); }
		public ITerminalNode FORCE() { return GetToken(tsqlParser.FORCE, 0); }
		public ITerminalNode FORCESEEK() { return GetToken(tsqlParser.FORCESEEK, 0); }
		public ITerminalNode FORWARD_ONLY() { return GetToken(tsqlParser.FORWARD_ONLY, 0); }
		public ITerminalNode FULLSCAN() { return GetToken(tsqlParser.FULLSCAN, 0); }
		public ITerminalNode GLOBAL() { return GetToken(tsqlParser.GLOBAL, 0); }
		public ITerminalNode GO() { return GetToken(tsqlParser.GO, 0); }
		public ITerminalNode GROUPING() { return GetToken(tsqlParser.GROUPING, 0); }
		public ITerminalNode GROUPING_ID() { return GetToken(tsqlParser.GROUPING_ID, 0); }
		public ITerminalNode HASH() { return GetToken(tsqlParser.HASH, 0); }
		public ITerminalNode IMPERSONATE() { return GetToken(tsqlParser.IMPERSONATE, 0); }
		public ITerminalNode INSENSITIVE() { return GetToken(tsqlParser.INSENSITIVE, 0); }
		public ITerminalNode INSERTED() { return GetToken(tsqlParser.INSERTED, 0); }
		public ITerminalNode ISOLATION() { return GetToken(tsqlParser.ISOLATION, 0); }
		public ITerminalNode KEEP() { return GetToken(tsqlParser.KEEP, 0); }
		public ITerminalNode KEEPFIXED() { return GetToken(tsqlParser.KEEPFIXED, 0); }
		public ITerminalNode FORCED() { return GetToken(tsqlParser.FORCED, 0); }
		public ITerminalNode KEYSET() { return GetToken(tsqlParser.KEYSET, 0); }
		public ITerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return GetToken(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public ITerminalNode LAST() { return GetToken(tsqlParser.LAST, 0); }
		public ITerminalNode LEVEL() { return GetToken(tsqlParser.LEVEL, 0); }
		public ITerminalNode LOCAL() { return GetToken(tsqlParser.LOCAL, 0); }
		public ITerminalNode LOCK_ESCALATION() { return GetToken(tsqlParser.LOCK_ESCALATION, 0); }
		public ITerminalNode LOGIN() { return GetToken(tsqlParser.LOGIN, 0); }
		public ITerminalNode LOOP() { return GetToken(tsqlParser.LOOP, 0); }
		public ITerminalNode MARK() { return GetToken(tsqlParser.MARK, 0); }
		public ITerminalNode MAX() { return GetToken(tsqlParser.MAX, 0); }
		public ITerminalNode MAXDOP() { return GetToken(tsqlParser.MAXDOP, 0); }
		public ITerminalNode MAXRECURSION() { return GetToken(tsqlParser.MAXRECURSION, 0); }
		public ITerminalNode MIN() { return GetToken(tsqlParser.MIN, 0); }
		public ITerminalNode MODIFY() { return GetToken(tsqlParser.MODIFY, 0); }
		public ITerminalNode NAME() { return GetToken(tsqlParser.NAME, 0); }
		public ITerminalNode NEXT() { return GetToken(tsqlParser.NEXT, 0); }
		public ITerminalNode NOCOUNT() { return GetToken(tsqlParser.NOCOUNT, 0); }
		public ITerminalNode NOEXPAND() { return GetToken(tsqlParser.NOEXPAND, 0); }
		public ITerminalNode NORECOMPUTE() { return GetToken(tsqlParser.NORECOMPUTE, 0); }
		public ITerminalNode NTILE() { return GetToken(tsqlParser.NTILE, 0); }
		public ITerminalNode NUMBER() { return GetToken(tsqlParser.NUMBER, 0); }
		public ITerminalNode OFFSET() { return GetToken(tsqlParser.OFFSET, 0); }
		public ITerminalNode ONLINE() { return GetToken(tsqlParser.ONLINE, 0); }
		public ITerminalNode ONLY() { return GetToken(tsqlParser.ONLY, 0); }
		public ITerminalNode OPTIMISTIC() { return GetToken(tsqlParser.OPTIMISTIC, 0); }
		public ITerminalNode OPTIMIZE() { return GetToken(tsqlParser.OPTIMIZE, 0); }
		public ITerminalNode OUT() { return GetToken(tsqlParser.OUT, 0); }
		public ITerminalNode OUTPUT() { return GetToken(tsqlParser.OUTPUT, 0); }
		public ITerminalNode OWNER() { return GetToken(tsqlParser.OWNER, 0); }
		public ITerminalNode PARAMETERIZATION() { return GetToken(tsqlParser.PARAMETERIZATION, 0); }
		public ITerminalNode PARTITION() { return GetToken(tsqlParser.PARTITION, 0); }
		public ITerminalNode PATH() { return GetToken(tsqlParser.PATH, 0); }
		public ITerminalNode PRECEDING() { return GetToken(tsqlParser.PRECEDING, 0); }
		public ITerminalNode PRIOR() { return GetToken(tsqlParser.PRIOR, 0); }
		public ITerminalNode PRIVILEGES() { return GetToken(tsqlParser.PRIVILEGES, 0); }
		public ITerminalNode RANGE() { return GetToken(tsqlParser.RANGE, 0); }
		public ITerminalNode RANK() { return GetToken(tsqlParser.RANK, 0); }
		public ITerminalNode READONLY() { return GetToken(tsqlParser.READONLY, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(tsqlParser.READ_ONLY, 0); }
		public ITerminalNode RECOMPILE() { return GetToken(tsqlParser.RECOMPILE, 0); }
		public ITerminalNode RELATIVE() { return GetToken(tsqlParser.RELATIVE, 0); }
		public ITerminalNode REMOTE() { return GetToken(tsqlParser.REMOTE, 0); }
		public ITerminalNode REPEATABLE() { return GetToken(tsqlParser.REPEATABLE, 0); }
		public ITerminalNode ROBUST() { return GetToken(tsqlParser.ROBUST, 0); }
		public ITerminalNode ROOT() { return GetToken(tsqlParser.ROOT, 0); }
		public ITerminalNode ROW() { return GetToken(tsqlParser.ROW, 0); }
		public ITerminalNode ROWGUID() { return GetToken(tsqlParser.ROWGUID, 0); }
		public ITerminalNode ROWS() { return GetToken(tsqlParser.ROWS, 0); }
		public ITerminalNode ROW_NUMBER() { return GetToken(tsqlParser.ROW_NUMBER, 0); }
		public ITerminalNode SAMPLE() { return GetToken(tsqlParser.SAMPLE, 0); }
		public ITerminalNode SCHEMABINDING() { return GetToken(tsqlParser.SCHEMABINDING, 0); }
		public ITerminalNode SCROLL() { return GetToken(tsqlParser.SCROLL, 0); }
		public ITerminalNode SCROLL_LOCKS() { return GetToken(tsqlParser.SCROLL_LOCKS, 0); }
		public ITerminalNode SELF() { return GetToken(tsqlParser.SELF, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(tsqlParser.SERIALIZABLE, 0); }
		public ITerminalNode SIMPLE() { return GetToken(tsqlParser.SIMPLE, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(tsqlParser.SNAPSHOT, 0); }
		public ITerminalNode SPATIAL_WINDOW_MAX_CELLS() { return GetToken(tsqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public ITerminalNode STATIC() { return GetToken(tsqlParser.STATIC, 0); }
		public ITerminalNode STATS_STREAM() { return GetToken(tsqlParser.STATS_STREAM, 0); }
		public ITerminalNode STDEV() { return GetToken(tsqlParser.STDEV, 0); }
		public ITerminalNode STDEVP() { return GetToken(tsqlParser.STDEVP, 0); }
		public ITerminalNode SUM() { return GetToken(tsqlParser.SUM, 0); }
		public ITerminalNode TEXTIMAGE_ON() { return GetToken(tsqlParser.TEXTIMAGE_ON, 0); }
		public ITerminalNode THROW() { return GetToken(tsqlParser.THROW, 0); }
		public ITerminalNode TIES() { return GetToken(tsqlParser.TIES, 0); }
		public ITerminalNode TIME() { return GetToken(tsqlParser.TIME, 0); }
		public ITerminalNode TRY() { return GetToken(tsqlParser.TRY, 0); }
		public ITerminalNode TYPE() { return GetToken(tsqlParser.TYPE, 0); }
		public ITerminalNode TYPE_WARNING() { return GetToken(tsqlParser.TYPE_WARNING, 0); }
		public ITerminalNode UNBOUNDED() { return GetToken(tsqlParser.UNBOUNDED, 0); }
		public ITerminalNode UNCOMMITTED() { return GetToken(tsqlParser.UNCOMMITTED, 0); }
		public ITerminalNode UNKNOWN() { return GetToken(tsqlParser.UNKNOWN, 0); }
		public ITerminalNode USING() { return GetToken(tsqlParser.USING, 0); }
		public ITerminalNode VAR() { return GetToken(tsqlParser.VAR, 0); }
		public ITerminalNode VARP() { return GetToken(tsqlParser.VARP, 0); }
		public ITerminalNode VIEW_METADATA() { return GetToken(tsqlParser.VIEW_METADATA, 0); }
		public ITerminalNode VIEWS() { return GetToken(tsqlParser.VIEWS, 0); }
		public ITerminalNode WORK() { return GetToken(tsqlParser.WORK, 0); }
		public ITerminalNode XML() { return GetToken(tsqlParser.XML, 0); }
		public ITerminalNode XMLNAMESPACES() { return GetToken(tsqlParser.XMLNAMESPACES, 0); }
		public Simple_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSimple_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSimple_id(this);
		}
	}

	[RuleVersion(0)]
	public Simple_idContext simple_id() {
		Simple_idContext _localctx = new Simple_idContext(Context, State);
		EnterRule(_localctx, 326, RULE_simple_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3094;
			_la = TokenStream.La(1);
			if ( !(_la==FORCESEEK || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ABSOLUTE - 193)) | (1L << (APPLY - 193)) | (1L << (AUTO - 193)) | (1L << (AVG - 193)) | (1L << (BASE64 - 193)) | (1L << (CALLER - 193)) | (1L << (CAST - 193)) | (1L << (CATCH - 193)) | (1L << (CHECKSUM_AGG - 193)) | (1L << (COMMITTED - 193)) | (1L << (CONCAT - 193)) | (1L << (CONTROL - 193)) | (1L << (COOKIE - 193)) | (1L << (COUNT - 193)) | (1L << (COUNT_BIG - 193)) | (1L << (DELAY - 193)) | (1L << (DELETED - 193)) | (1L << (DENSE_RANK - 193)) | (1L << (DISABLE - 193)) | (1L << (DYNAMIC - 193)) | (1L << (ENCRYPTION - 193)) | (1L << (EXPAND - 193)) | (1L << (FAST - 193)) | (1L << (FAST_FORWARD - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (FIRST - 259)) | (1L << (FOLLOWING - 259)) | (1L << (FORCE - 259)) | (1L << (FORCED - 259)) | (1L << (FORWARD_ONLY - 259)) | (1L << (FULLSCAN - 259)) | (1L << (GLOBAL - 259)) | (1L << (GO - 259)) | (1L << (GROUPING - 259)) | (1L << (GROUPING_ID - 259)) | (1L << (HASH - 259)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 259)) | (1L << (IMPERSONATE - 259)) | (1L << (INSENSITIVE - 259)) | (1L << (INSERTED - 259)) | (1L << (ISOLATION - 259)) | (1L << (KEEP - 259)) | (1L << (KEEPFIXED - 259)) | (1L << (KEYSET - 259)) | (1L << (LAST - 259)) | (1L << (LEVEL - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCK_ESCALATION - 259)) | (1L << (LOGIN - 259)) | (1L << (LOOP - 259)) | (1L << (MARK - 259)) | (1L << (MAX - 259)) | (1L << (MAXDOP - 259)) | (1L << (MAXRECURSION - 259)) | (1L << (MIN - 259)) | (1L << (MODIFY - 259)) | (1L << (NAME - 259)) | (1L << (NEXT - 259)) | (1L << (NOCOUNT - 259)) | (1L << (NOEXPAND - 259)) | (1L << (NORECOMPUTE - 259)) | (1L << (NTILE - 259)) | (1L << (NUMBER - 259)) | (1L << (OFFSET - 259)) | (1L << (ONLINE - 259)) | (1L << (ONLY - 259)) | (1L << (OPTIMISTIC - 259)) | (1L << (OPTIMIZE - 259)) | (1L << (OUT - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (OUTPUT - 323)) | (1L << (OWNER - 323)) | (1L << (PARAMETERIZATION - 323)) | (1L << (PARTITION - 323)) | (1L << (PATH - 323)) | (1L << (PRECEDING - 323)) | (1L << (PRIOR - 323)) | (1L << (PRIVILEGES - 323)) | (1L << (RANGE - 323)) | (1L << (RANK - 323)) | (1L << (READONLY - 323)) | (1L << (READ_ONLY - 323)) | (1L << (RECOMPILE - 323)) | (1L << (RELATIVE - 323)) | (1L << (REMOTE - 323)) | (1L << (REPEATABLE - 323)) | (1L << (ROBUST - 323)) | (1L << (ROOT - 323)) | (1L << (ROW - 323)) | (1L << (ROWGUID - 323)) | (1L << (ROWS - 323)) | (1L << (ROW_NUMBER - 323)) | (1L << (SAMPLE - 323)) | (1L << (SCHEMABINDING - 323)) | (1L << (SCROLL - 323)) | (1L << (SCROLL_LOCKS - 323)) | (1L << (SELF - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SIMPLE - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 323)) | (1L << (STATIC - 323)) | (1L << (STATS_STREAM - 323)) | (1L << (STDEV - 323)) | (1L << (STDEVP - 323)) | (1L << (SUM - 323)) | (1L << (TEXTIMAGE_ON - 323)) | (1L << (THROW - 323)) | (1L << (TIES - 323)) | (1L << (TIME - 323)) | (1L << (TRY - 323)) | (1L << (TYPE - 323)) | (1L << (TYPE_WARNING - 323)) | (1L << (UNBOUNDED - 323)) | (1L << (UNCOMMITTED - 323)) | (1L << (UNKNOWN - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (USING - 388)) | (1L << (VAR - 388)) | (1L << (VARP - 388)) | (1L << (VIEWS - 388)) | (1L << (VIEW_METADATA - 388)) | (1L << (WORK - 388)) | (1L << (XML - 388)) | (1L << (XMLNAMESPACES - 388)) | (1L << (ID - 388)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_operatorContext : ParserRuleContext {
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterComparison_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitComparison_operator(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_operatorContext comparison_operator() {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(Context, State);
		EnterRule(_localctx, 328, RULE_comparison_operator);
		try {
			State = 3111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,457,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3096; Match(EQUAL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3097; Match(GREATER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3098; Match(LESS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3099; Match(LESS);
				State = 3100; Match(EQUAL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3101; Match(GREATER);
				State = 3102; Match(EQUAL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3103; Match(LESS);
				State = 3104; Match(GREATER);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3105; Match(EXCLAMATION);
				State = 3106; Match(EQUAL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3107; Match(EXCLAMATION);
				State = 3108; Match(GREATER);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3109; Match(EXCLAMATION);
				State = 3110; Match(LESS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 330, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3113;
			_la = TokenStream.La(1);
			if ( !(((((_la - 413)) & ~0x3f) == 0 && ((1L << (_la - 413)) & ((1L << (PLUS_ASSIGN - 413)) | (1L << (MINUS_ASSIGN - 413)) | (1L << (MULT_ASSIGN - 413)) | (1L << (DIV_ASSIGN - 413)) | (1L << (MOD_ASSIGN - 413)) | (1L << (AND_ASSIGN - 413)) | (1L << (XOR_ASSIGN - 413)) | (1L << (OR_ASSIGN - 413)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_sizeContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public ITerminalNode KB() { return GetToken(tsqlParser.KB, 0); }
		public ITerminalNode MB() { return GetToken(tsqlParser.MB, 0); }
		public ITerminalNode GB() { return GetToken(tsqlParser.GB, 0); }
		public ITerminalNode TB() { return GetToken(tsqlParser.TB, 0); }
		public File_sizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_size; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFile_size(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFile_size(this);
		}
	}

	[RuleVersion(0)]
	public File_sizeContext file_size() {
		File_sizeContext _localctx = new File_sizeContext(Context, State);
		EnterRule(_localctx, 332, RULE_file_size);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3115; Match(DECIMAL);
			State = 3117;
			_la = TokenStream.La(1);
			if (((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (GB - 265)) | (1L << (KB - 265)) | (1L << (MB - 265)))) != 0) || _la==TB || _la==MODULE) {
				{
				State = 3116;
				_la = TokenStream.La(1);
				if ( !(((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (GB - 265)) | (1L << (KB - 265)) | (1L << (MB - 265)))) != 0) || _la==TB || _la==MODULE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 85: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 2);
		case 3: return Precpred(Context, 12);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x1B9");
		sb.Append("\xC32\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t ");
		sb.Append("\x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t");
		sb.Append("(\x4)\t)\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t");
		sb.Append("\x30\x4\x31\t\x31\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4");
		sb.Append("\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37\x4\x38\t\x38\x4\x39\t\x39");
		sb.Append("\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4@\t@\x4\x41\t\x41");
		sb.Append("\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45\x4\x46");
		sb.Append("\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N");
		sb.Append("\tN\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV");
		sb.Append("\x4W\tW\x4X\tX\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4");
		sb.Append("_\t_\x4`\t`\x4\x61\t\x61\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t");
		sb.Append("\x64\x4\x65\t\x65\x4\x66\t\x66\x4g\tg\x4h\th\x4i\ti\x4j\tj\x4");
		sb.Append("k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4q\tq\x4r\tr\x4s\t");
		sb.Append("s\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4{\t{\x4");
		sb.Append("|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4");
		sb.Append("\x82\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86");
		sb.Append("\x4\x87\t\x87\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B");
		sb.Append("\t\x8B\x4\x8C\t\x8C\x4\x8D\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4");
		sb.Append("\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92\x4\x93\t\x93\x4\x94\t\x94");
		sb.Append("\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98\t\x98\x4\x99");
		sb.Append("\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D\x4");
		sb.Append("\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2");
		sb.Append("\x4\xA3\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7");
		sb.Append("\t\xA7\x4\xA8\t\xA8\x3\x2\a\x2\x152\n\x2\f\x2\xE\x2\x155\v\x2");
		sb.Append("\x3\x2\x3\x2\x3\x3\x3\x3\x5\x3\x15B\n\x3\x3\x4\x3\x4\x5\x4\x15F");
		sb.Append("\n\x4\x6\x4\x161\n\x4\r\x4\xE\x4\x162\x3\x5\x3\x5\x3\x5\x3\x5");
		sb.Append("\x5\x5\x169\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x16F\n\x6\x3");
		sb.Append("\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3");
		sb.Append("\a\x3\a\x3\a\x5\a\x180\n\a\x3\b\x3\b\x5\b\x184\n\b\x3\b\x5\b");
		sb.Append("\x187\n\b\x3\b\x3\b\x5\b\x18B\n\b\x3\b\x3\b\x5\b\x18F\n\b\x3");
		sb.Append("\b\x3\b\x5\b\x193\n\b\x3\b\x3\b\x3\b\x5\b\x198\n\b\x3\b\x3\b");
		sb.Append("\x3\b\x5\b\x19D\n\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x1A4\n\b\x3");
		sb.Append("\b\x5\b\x1A7\n\b\x3\b\x3\b\x5\b\x1AB\n\b\x3\b\x5\b\x1AE\n\b");
		sb.Append("\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x1B6\n\b\x3\b\x5\b\x1B9");
		sb.Append("\n\b\x3\b\x3\b\x3\b\x5\b\x1BE\n\b\x3\b\x5\b\x1C1\n\b\x3\b\x3");
		sb.Append("\b\x3\b\x5\b\x1C6\n\b\x3\b\x3\b\x3\b\x5\b\x1CB\n\b\x3\b\x5\b");
		sb.Append("\x1CE\n\b\x3\b\x3\b\x3\b\x5\b\x1D3\n\b\x3\b\x3\b\x3\b\x3\b\x5");
		sb.Append("\b\x1D9\n\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x1E0\n\b\x3\b\x3\b");
		sb.Append("\x5\b\x1E4\n\b\x5\b\x1E6\n\b\x3\b\x3\b\x3\b\x5\b\x1EB\n\b\x3");
		sb.Append("\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\a\b\x1F6\n\b\f\b");
		sb.Append("\xE\b\x1F9\v\b\x3\b\x3\b\x5\b\x1FD\n\b\x5\b\x1FF\n\b\x3\t\x3");
		sb.Append("\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x208\n\t\x3\n\x5\n\x20B\n\n");
		sb.Append("\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x213\n\n\x5\n\x215\n\n\x3");
		sb.Append("\n\x5\n\x218\n\n\x3\n\x3\n\x5\n\x21C\n\n\x3\n\x5\n\x21F\n\n");
		sb.Append("\x3\n\x3\n\x5\n\x223\n\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x22A");
		sb.Append("\n\n\x3\n\x3\n\x5\n\x22E\n\n\x5\n\x230\n\n\x5\n\x232\n\n\x3");
		sb.Append("\n\x5\n\x235\n\n\x3\n\x5\n\x238\n\n\x3\n\x5\n\x23B\n\n\x3\v");
		sb.Append("\x3\v\x3\v\x3\v\x5\v\x241\n\v\x3\f\x5\f\x244\n\f\x3\f\x3\f\x3");
		sb.Append("\f\x3\f\x3\f\x3\f\x5\f\x24C\n\f\x5\f\x24E\n\f\x3\f\x5\f\x251");
		sb.Append("\n\f\x3\f\x3\f\x5\f\x255\n\f\x3\f\x5\f\x258\n\f\x3\f\x3\f\x3");
		sb.Append("\f\x3\f\x5\f\x25E\n\f\x3\f\x5\f\x261\n\f\x3\f\x3\f\x5\f\x265");
		sb.Append("\n\f\x3\f\x5\f\x268\n\f\x3\f\x5\f\x26B\n\f\x3\r\x3\r\x3\r\x3");
		sb.Append("\r\x3\r\x5\r\x272\n\r\x3\xE\x5\xE\x275\n\xE\x3\xE\x3\xE\x5\xE");
		sb.Append("\x279\n\xE\x3\xE\x5\xE\x27C\n\xE\x3\xE\x5\xE\x27F\n\xE\x3\xE");
		sb.Append("\x5\xE\x282\n\xE\x3\xF\x5\xF\x285\n\xF\x3\xF\x3\xF\x3\xF\x3");
		sb.Append("\xF\x3\xF\x3\xF\x5\xF\x28D\n\xF\x5\xF\x28F\n\xF\x3\xF\x3\xF");
		sb.Append("\x5\xF\x293\n\xF\x3\xF\x5\xF\x296\n\xF\x3\xF\x3\xF\x3\xF\x3");
		sb.Append("\xF\a\xF\x29C\n\xF\f\xF\xE\xF\x29F\v\xF\x3\xF\x5\xF\x2A2\n\xF");
		sb.Append("\x3\xF\x3\xF\x5\xF\x2A6\n\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5");
		sb.Append("\xF\x2AD\n\xF\x3\xF\x3\xF\x5\xF\x2B1\n\xF\x5\xF\x2B3\n\xF\x5");
		sb.Append("\xF\x2B5\n\xF\x3\xF\x5\xF\x2B8\n\xF\x3\xF\x5\xF\x2BB\n\xF\x3");
		sb.Append("\xF\x5\xF\x2BE\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\x2C4\n");
		sb.Append("\x10\f\x10\xE\x10\x2C7\v\x10\x3\x10\x3\x10\x3\x10\x5\x10\x2CC");
		sb.Append("\n\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x2D2\n\x10\x5\x10");
		sb.Append("\x2D4\n\x10\x3\x11\x3\x11\x5\x11\x2D8\n\x11\x3\x11\x5\x11\x2DB");
		sb.Append("\n\x11\x3\x11\x5\x11\x2DE\n\x11\x3\x12\x3\x12\x3\x12\x5\x12");
		sb.Append("\x2E3\n\x12\x3\x12\x3\x12\x3\x12\x5\x12\x2E8\n\x12\x3\x12\x5");
		sb.Append("\x12\x2EB\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5");
		sb.Append("\x13\x2F3\n\x13\x3\x13\x3\x13\x5\x13\x2F7\n\x13\x3\x13\x3\x13");
		sb.Append("\x3\x13\a\x13\x2FC\n\x13\f\x13\xE\x13\x2FF\v\x13\x5\x13\x301");
		sb.Append("\n\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\a\x13\x308\n\x13\f");
		sb.Append("\x13\xE\x13\x30B\v\x13\x5\x13\x30D\n\x13\x3\x13\x3\x13\x5\x13");
		sb.Append("\x311\n\x13\x3\x13\x3\x13\x3\x13\x3\x13\a\x13\x317\n\x13\f\x13");
		sb.Append("\xE\x13\x31A\v\x13\x5\x13\x31C\n\x13\x3\x14\x3\x14\x5\x14\x320");
		sb.Append("\n\x14\x3\x14\x5\x14\x323\n\x14\x3\x14\x3\x14\x3\x14\x3\x14");
		sb.Append("\x3\x14\x3\x14\x3\x14\x5\x14\x32C\n\x14\x3\x14\x3\x14\x5\x14");
		sb.Append("\x330\n\x14\x3\x14\x3\x14\x5\x14\x334\n\x14\x3\x14\x5\x14\x337");
		sb.Append("\n\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x33E\n\x15");
		sb.Append("\x3\x15\x5\x15\x341\n\x15\x3\x15\x3\x15\x3\x15\a\x15\x346\n");
		sb.Append("\x15\f\x15\xE\x15\x349\v\x15\x3\x15\x5\x15\x34C\n\x15\x5\x15");
		sb.Append("\x34E\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\a\x15\x354\n\x15\f\x15");
		sb.Append("\xE\x15\x357\v\x15\x5\x15\x359\n\x15\x3\x15\x3\x15\x5\x15\x35D");
		sb.Append("\n\x15\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16");
		sb.Append("\x366\n\x16\x3\x16\x5\x16\x369\n\x16\x3\x16\x3\x16\x5\x16\x36D");
		sb.Append("\n\x16\x3\x16\x3\x16\x5\x16\x371\n\x16\x3\x16\x5\x16\x374\n");
		sb.Append("\x16\x3\x17\x3\x17\x3\x17\x5\x17\x379\n\x17\x3\x18\x3\x18\x3");
		sb.Append("\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18");
		sb.Append("\x3\x18\x3\x18\x3\x18\x5\x18\x389\n\x18\x3\x18\x3\x18\x5\x18");
		sb.Append("\x38D\n\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x393\n\x18\x5");
		sb.Append("\x18\x395\n\x18\x3\x18\x5\x18\x398\n\x18\x3\x19\x3\x19\x3\x19");
		sb.Append("\x3\x19\x3\x19\x3\x19\x5\x19\x3A0\n\x19\x3\x19\x3\x19\x3\x19");
		sb.Append("\x3\x19\x5\x19\x3A6\n\x19\x3\x19\x3\x19\x3\x19\x5\x19\x3AB\n");
		sb.Append("\x19\x3\x19\x5\x19\x3AE\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3");
		sb.Append("\x1A\x3\x1A\x3\x1A\x5\x1A\x3B7\n\x1A\x3\x1A\x3\x1A\x3\x1A\x3");
		sb.Append("\x1A\a\x1A\x3BD\n\x1A\f\x1A\xE\x1A\x3C0\v\x1A\x5\x1A\x3C2\n");
		sb.Append("\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x3C9\n\x1A\x3");
		sb.Append("\x1A\x5\x1A\x3CC\n\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3");
		sb.Append("\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C");
		sb.Append("\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3");
		sb.Append("\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C");
		sb.Append("\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x3F1\n\x1C\x3\x1C\x5\x1C");
		sb.Append("\x3F4\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x3FA\n\x1D\x3");
		sb.Append("\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D");
		sb.Append("\x3\x1D\x5\x1D\x406\n\x1D\x5\x1D\x408\n\x1D\x3\x1D\x5\x1D\x40B");
		sb.Append("\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E");
		sb.Append("\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3");
		sb.Append("\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x423\n\x1E\x3");
		sb.Append("\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F");
		sb.Append("\x5\x1F\x42E\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F");
		sb.Append("\x5\x1F\x436\n\x1F\x3 \x3 \x3 \x3 \x3 \x3 \x3 \a \x43F\n \f");
		sb.Append(" \xE \x442\v \a \x444\n \f \xE \x447\v \x5 \x449\n \x3!\x3!");
		sb.Append("\x3!\x3!\x3!\x3!\x5!\x451\n!\x3\"\x3\"\x3\"\x3\"\x3#\x3#\x3");
		sb.Append("#\x3#\x5#\x45B\n#\x3$\x3$\x3$\x3%\x3%\x3%\x3&\x3&\x3\'\x3\'");
		sb.Append("\x3(\x3(\x3)\x3)\x3)\x3)\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x5");
		sb.Append("*\x475\n*\x3*\x3*\x3*\x3*\x5*\x47B\n*\x3*\x3*\x3*\x3*\x3*\x3");
		sb.Append("*\x3*\x3*\x3*\x5*\x486\n*\x3+\x3+\x3+\x3,\x3,\x3,\x3-\x3-\x3");
		sb.Append("-\x3-\x3-\x3-\x5-\x494\n-\x3.\x3.\x3.\x3.\x3.\x3.\x5.\x49C\n");
		sb.Append(".\x3/\x3/\x3/\x3/\x3/\x5/\x4A3\n/\x3\x30\x3\x30\x3\x30\x3\x30");
		sb.Append("\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3");
		sb.Append("\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30");
		sb.Append("\x5\x30\x4BA\n\x30\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x32");
		sb.Append("\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x4C7\n\x32\x3\x33");
		sb.Append("\x3\x33\x3\x33\x3\x33\x5\x33\x4CD\n\x33\x3\x33\x3\x33\x3\x33");
		sb.Append("\x5\x33\x4D2\n\x33\x3\x33\x5\x33\x4D5\n\x33\x3\x34\x3\x34\x3");
		sb.Append("\x34\x3\x34\x5\x34\x4DB\n\x34\x3\x34\x3\x34\x5\x34\x4DF\n\x34");
		sb.Append("\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x4E6\n\x35\x3\x35");
		sb.Append("\x3\x35\x3\x35\x3\x36\x3\x36\x3\x36\x3\x36\x5\x36\x4EF\n\x36");
		sb.Append("\x3\x36\x3\x36\x5\x36\x4F3\n\x36\x3\x37\x3\x37\x3\x37\x3\x37");
		sb.Append("\x5\x37\x4F9\n\x37\x3\x37\x3\x37\x3\x37\a\x37\x4FE\n\x37\f\x37");
		sb.Append("\xE\x37\x501\v\x37\x3\x37\x5\x37\x504\n\x37\x3\x38\x3\x38\x3");
		sb.Append("\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x39\x3\x39\x3\x39\x3\x39");
		sb.Append("\x5\x39\x511\n\x39\x3\x39\x3\x39\x3:\x3:\x5:\x517\n:\x3;\x3");
		sb.Append(";\x3;\x3;\x3;\x3;\x3;\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x5<\x528");
		sb.Append("\n<\x3<\x3<\x5<\x52C\n<\x3<\x3<\x3<\x3=\x3=\x3=\x5=\x534\n=");
		sb.Append("\x3=\x3=\x5=\x538\n=\x3=\x3=\x3=\x3=\a=\x53E\n=\f=\xE=\x541");
		sb.Append("\v=\x3=\x5=\x544\n=\x5=\x546\n=\x3>\x3>\x5>\x54A\n>\x3>\x3>");
		sb.Append("\x5>\x54E\n>\x3>\x3>\x5>\x552\n>\x3>\x3>\x5>\x556\n>\x3>\x3");
		sb.Append(">\x3>\x3>\x5>\x55C\n>\x3>\x3>\x5>\x560\n>\x5>\x562\n>\x3?\x3");
		sb.Append("?\x3?\x5?\x567\n?\x3?\x3?\x3?\x3?\a?\x56D\n?\f?\xE?\x570\v?");
		sb.Append("\x5?\x572\n?\x3?\x5?\x575\n?\x3?\x3?\x3?\x3?\x3?\a?\x57C\n?");
		sb.Append("\f?\xE?\x57F\v?\x3?\x3?\x5?\x583\n?\x3?\x3?\x3?\x5?\x588\n?");
		sb.Append("\x3?\x5?\x58B\n?\x5?\x58D\n?\x3@\x3@\x5@\x591\n@\x3@\x3@\x5");
		sb.Append("@\x595\n@\x3@\x5@\x598\n@\x3@\x3@\x5@\x59C\n@\x3\x41\x3\x41");
		sb.Append("\x3\x42\x3\x42\x5\x42\x5A2\n\x42\x3\x42\x3\x42\x3\x42\x5\x42");
		sb.Append("\x5A7\n\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x5AE\n");
		sb.Append("\x42\x5\x42\x5B0\n\x42\x3\x42\x3\x42\x5\x42\x5B4\n\x42\x3\x42");
		sb.Append("\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x5BB\n\x42\x3\x42\x3\x42");
		sb.Append("\x5\x42\x5BF\n\x42\x3\x42\x5\x42\x5C2\n\x42\x3\x42\x3\x42\x3");
		sb.Append("\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x5CB\n\x42\x3\x42\x5");
		sb.Append("\x42\x5CE\n\x42\x5\x42\x5D0\n\x42\x3\x43\x3\x43\x3\x43\x3\x43");
		sb.Append("\x3\x43\x3\x43\x3\x43\x5\x43\x5D9\n\x43\x3\x43\x3\x43\x3\x43");
		sb.Append("\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x5\x43\x5E4\n\x43");
		sb.Append("\x3\x43\x3\x43\x5\x43\x5E8\n\x43\x5\x43\x5EA\n\x43\x5\x43\x5EC");
		sb.Append("\n\x43\x3\x44\x3\x44\x3\x44\x3\x44\x5\x44\x5F2\n\x44\x3\x44");
		sb.Append("\x3\x44\x3\x44\x5\x44\x5F7\n\x44\x3\x44\x3\x44\x3\x44\x3\x44");
		sb.Append("\x3\x44\x5\x44\x5FE\n\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44");
		sb.Append("\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x5\x44\x60B\n\x44");
		sb.Append("\x5\x44\x60D\n\x44\x5\x44\x60F\n\x44\x3\x44\x5\x44\x612\n\x44");
		sb.Append("\x3\x44\x5\x44\x615\n\x44\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45");
		sb.Append("\x5\x45\x61C\n\x45\x3\x45\x5\x45\x61F\n\x45\x3\x45\x3\x45\x3");
		sb.Append("\x45\x3\x45\x5\x45\x625\n\x45\x3\x45\x3\x45\x3\x45\x5\x45\x62A");
		sb.Append("\n\x45\x5\x45\x62C\n\x45\x3\x45\x5\x45\x62F\n\x45\x3\x45\x3");
		sb.Append("\x45\x3\x45\x3\x45\x5\x45\x635\n\x45\x3\x45\x3\x45\x3\x45\x3");
		sb.Append("\x45\x3\x45\x3\x45\x5\x45\x63D\n\x45\x5\x45\x63F\n\x45\x3\x45");
		sb.Append("\x5\x45\x642\n\x45\x3\x45\x3\x45\x5\x45\x646\n\x45\x3\x45\x5");
		sb.Append("\x45\x649\n\x45\x3\x45\x3\x45\x3\x45\x3\x45\x5\x45\x64F\n\x45");
		sb.Append("\x3\x45\x5\x45\x652\n\x45\x3\x45\x3\x45\x5\x45\x656\n\x45\x3");
		sb.Append("\x45\x5\x45\x659\n\x45\x3\x45\x3\x45\x3\x45\x3\x45\x5\x45\x65F");
		sb.Append("\n\x45\x3\x45\x5\x45\x662\n\x45\x5\x45\x664\n\x45\x3\x46\x3");
		sb.Append("\x46\x5\x46\x668\n\x46\x3G\x3G\x3G\x5G\x66D\nG\x3H\x3H\x3H\x3");
		sb.Append("H\x3I\x3I\x5I\x675\nI\x3I\x3I\x3I\x5I\x67A\nI\x3J\x3J\x3J\x3");
		sb.Append("J\x3J\x3K\x3K\x5K\x683\nK\x3K\aK\x686\nK\fK\xEK\x689\vK\x3L");
		sb.Append("\x3L\x5L\x68D\nL\x3M\x3M\x3M\x3M\x5M\x693\nM\x3M\x3M\x5M\x697");
		sb.Append("\nM\x3M\x5M\x69A\nM\x3M\x3M\x5M\x69E\nM\x3M\x3M\x3M\x3M\x5M");
		sb.Append("\x6A4\nM\x3M\x3M\x3M\x3M\x3M\x3M\x5M\x6AC\nM\x3M\x3M\x3M\x5");
		sb.Append("M\x6B1\nM\x5M\x6B3\nM\x3M\x5M\x6B6\nM\x3M\aM\x6B9\nM\fM\xEM");
		sb.Append("\x6BC\vM\x3N\x3N\x5N\x6C0\nN\x3N\x5N\x6C3\nN\x3N\x3N\x3N\x5");
		sb.Append("N\x6C8\nN\x3N\x5N\x6CB\nN\x3N\x5N\x6CE\nN\x3N\x3N\x3N\x3N\x5");
		sb.Append("N\x6D4\nN\x3N\x3N\x3N\x3N\x5N\x6DA\nN\x3O\x3O\x5O\x6DE\nO\x3");
		sb.Append("O\x3O\x3O\x5O\x6E3\nO\x3O\x5O\x6E6\nO\x3O\x3O\x3O\x5O\x6EB\n");
		sb.Append("O\x3O\x3O\x5O\x6EF\nO\x3O\x3O\x5O\x6F3\nO\x3O\x3O\x3O\x3O\x5");
		sb.Append("O\x6F9\nO\x3O\x3O\x3O\x3O\x5O\x6FF\nO\x3P\x3P\x3P\x3P\x3P\a");
		sb.Append("P\x706\nP\fP\xEP\x709\vP\x3P\x3P\x3Q\x3Q\x3Q\x3Q\x3Q\x5Q\x712");
		sb.Append("\nQ\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x5R\x71C\nR\x5R\x71E\nR");
		sb.Append("\x5R\x720\nR\x3R\x5R\x723\nR\x3R\x5R\x726\nR\x3R\x3R\x3R\x3");
		sb.Append("R\x3R\x3R\x3R\x3R\x3R\x5R\x731\nR\x5R\x733\nR\x5R\x735\nR\x3");
		sb.Append("R\x5R\x738\nR\x3S\x5S\x73B\nS\x3S\x5S\x73E\nS\x3S\x5S\x741\n");
		sb.Append("S\x3S\x5S\x744\nS\x3S\x5S\x747\nS\x3S\x3S\x3S\x3T\x3T\x3T\x3");
		sb.Append("T\x3T\x3T\x3T\x5T\x753\nT\x3T\x5T\x756\nT\x3T\x5T\x759\nT\x3");
		sb.Append("T\x3T\x3T\x3T\x3T\aT\x760\nT\fT\xET\x763\vT\x5T\x765\nT\x3T");
		sb.Append("\x5T\x768\nT\x3U\x3U\x3U\x3U\x3U\x5U\x76F\nU\x3U\x5U\x772\n");
		sb.Append("U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x5U\x780\n");
		sb.Append("U\x3U\x5U\x783\nU\x3U\x3U\x3U\x3U\x3U\x5U\x78A\nU\x3U\x3U\x3");
		sb.Append("U\x3U\x3U\x3U\x3U\x3U\x3U\x5U\x795\nU\x3V\x3V\x5V\x799\nV\x3");
		sb.Append("W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x6W\x7A4\nW\rW\xEW\x7A5\x3");
		sb.Append("W\x3W\x5W\x7AA\nW\x3W\x3W\x3W\x3W\x6W\x7B0\nW\rW\xEW\x7B1\x3");
		sb.Append("W\x3W\x5W\x7B6\nW\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3");
		sb.Append("W\x3W\x3W\x3W\x3W\x3W\x5W\x7C8\nW\x3W\x3W\x3W\x3W\x3W\x3W\x3");
		sb.Append("W\x3W\x3W\x3W\x3W\x3W\x3W\aW\x7D7\nW\fW\xEW\x7DA\vW\x3X\x3X");
		sb.Append("\x3X\x3X\x3X\x3X\x3X\x3X\x5X\x7E4\nX\x3Y\x3Y\x3Z\x3Z\x3Z\x5");
		sb.Append("Z\x7EB\nZ\x3Z\x3Z\x3Z\aZ\x7F0\nZ\fZ\xEZ\x7F3\vZ\x3[\x3[\x3[");
		sb.Append("\x3[\x3[\x5[\x7FA\n[\x3[\x3[\x3[\x3[\x3[\x3\\\x3\\\x5\\\x803");
		sb.Append("\n\\\x3\\\x3\\\x5\\\x807\n\\\x3\\\x3\\\x3\\\x3\\\x3\\\x3\\\x3");
		sb.Append("\\\x3\\\x5\\\x811\n\\\x3]\x3]\x3]\a]\x816\n]\f]\xE]\x819\v]");
		sb.Append("\x3^\x3^\x3^\a^\x81E\n^\f^\xE^\x821\v^\x3_\x3_\x3_\a_\x826\n");
		sb.Append("_\f_\xE_\x829\v_\x3`\x5`\x82C\n`\x3`\x3`\x3\x61\x3\x61\x3\x61");
		sb.Append("\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3");
		sb.Append("\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x5\x61\x842\n");
		sb.Append("\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x5\x61");
		sb.Append("\x84B\n\x61\x3\x61\x3\x61\x3\x61\x3\x61\x5\x61\x851\n\x61\x3");
		sb.Append("\x61\x3\x61\x3\x61\x3\x61\x5\x61\x857\n\x61\x3\x61\x3\x61\x3");
		sb.Append("\x61\x3\x61\x5\x61\x85D\n\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3");
		sb.Append("\x61\x3\x61\x3\x61\x3\x61\x3\x61\x5\x61\x868\n\x61\x3\x62\x3");
		sb.Append("\x62\x3\x62\x3\x62\x3\x62\x5\x62\x86F\n\x62\x3\x62\a\x62\x872");
		sb.Append("\n\x62\f\x62\xE\x62\x875\v\x62\x3\x63\x3\x63\x5\x63\x879\n\x63");
		sb.Append("\x3\x63\x3\x63\x5\x63\x87D\n\x63\x3\x63\x3\x63\x3\x63\x3\x63");
		sb.Append("\x3\x63\x6\x63\x884\n\x63\r\x63\xE\x63\x885\x5\x63\x888\n\x63");
		sb.Append("\x3\x64\x3\x64\x5\x64\x88C\n\x64\x3\x64\x3\x64\x3\x64\x5\x64");
		sb.Append("\x891\n\x64\x3\x64\x3\x64\x5\x64\x895\n\x64\x5\x64\x897\n\x64");
		sb.Append("\x3\x64\x3\x64\x3\x64\x5\x64\x89C\n\x64\x3\x64\x3\x64\x5\x64");
		sb.Append("\x8A0\n\x64\x3\x64\x3\x64\x5\x64\x8A4\n\x64\x3\x64\x3\x64\x3");
		sb.Append("\x64\x3\x64\x3\x64\a\x64\x8AB\n\x64\f\x64\xE\x64\x8AE\v\x64");
		sb.Append("\x5\x64\x8B0\n\x64\x3\x64\x3\x64\x5\x64\x8B4\n\x64\x3\x65\x3");
		sb.Append("\x65\x3\x65\x3\x65\x3\x65\a\x65\x8BB\n\x65\f\x65\xE\x65\x8BE");
		sb.Append("\v\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65");
		sb.Append("\x3\x65\x5\x65\x8C9\n\x65\x5\x65\x8CB\n\x65\x3\x66\x3\x66\x3");
		sb.Append("\x66\x3\x66\x3\x66\x3\x66\x5\x66\x8D3\n\x66\x3\x66\x3\x66\x3");
		sb.Append("\x66\x3\x66\x3\x66\x3\x66\x5\x66\x8DB\n\x66\x3\x66\x5\x66\x8DE");
		sb.Append("\n\x66\x5\x66\x8E0\n\x66\x3g\x3g\x3g\x3g\x3g\x5g\x8E7\ng\x3");
		sb.Append("h\x3h\x5h\x8EB\nh\x3i\x3i\x3j\x3j\x3j\x3j\x3j\aj\x8F4\nj\fj");
		sb.Append("\xEj\x8F7\vj\x3j\x3j\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3");
		sb.Append("k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3");
		sb.Append("k\x3k\x3k\ak\x916\nk\fk\xEk\x919\vk\x3k\x3k\x3k\x3k\x3k\x3k");
		sb.Append("\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x5k\x928\nk\x3l\x3l\x3l\x3l\x5");
		sb.Append("l\x92E\nl\x3m\x3m\x3m\am\x933\nm\fm\xEm\x936\vm\x3n\x3n\x3n");
		sb.Append("\x5n\x93B\nn\x3n\x3n\x3n\x5n\x940\nn\x3n\x3n\x3n\x3n\x3n\x3");
		sb.Append("n\x5n\x948\nn\x3n\x5n\x94B\nn\x5n\x94D\nn\x3o\x3o\x3o\ao\x952");
		sb.Append("\no\fo\xEo\x955\vo\x3p\x3p\x3p\x3p\x3p\x5p\x95C\np\x3q\x3q\a");
		sb.Append("q\x960\nq\fq\xEq\x963\vq\x3r\x3r\x5r\x967\nr\x3r\x3r\x5r\x96B");
		sb.Append("\nr\x3r\x3r\x3r\x5r\x970\nr\x5r\x972\nr\x3r\x3r\x3r\x3r\x3r");
		sb.Append("\x5r\x979\nr\x3r\x3r\x5r\x97D\nr\x3r\x3r\x3r\x3r\x3r\x5r\x984");
		sb.Append("\nr\x5r\x986\nr\x5r\x988\nr\x3s\x3s\x3s\x3s\x3s\x3s\x3s\x3s");
		sb.Append("\x3t\x5t\x993\nt\x3t\x3t\x5t\x997\nt\x5t\x999\nt\x3t\x5t\x99C");
		sb.Append("\nt\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x3t");
		sb.Append("\x5t\x9AC\nt\x3u\x3u\x5u\x9B0\nu\x3v\x3v\x3v\x3v\x3v\x3v\x3");
		sb.Append("v\x3v\x3v\x3v\x3v\x3v\x3v\x3v\x3v\x3v\av\x9C2\nv\fv\xEv\x9C5");
		sb.Append("\vv\x3v\x5v\x9C8\nv\x3v\x3v\x5v\x9CC\nv\x3w\x3w\x3w\x3w\x3x");
		sb.Append("\x3x\x3x\x3x\x3x\x5x\x9D7\nx\x3y\x3y\x3y\x3y\x3y\x5y\x9DE\n");
		sb.Append("y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3");
		sb.Append("y\x3y\x3y\x3y\x3y\x3y\x5y\x9F4\ny\x3y\x3y\x3y\x3y\x3y\x3y\x3");
		sb.Append("y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3");
		sb.Append("y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3");
		sb.Append("y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x5y\xA28");
		sb.Append("\ny\x3y\x3y\x5y\xA2C\ny\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y");
		sb.Append("\x3y\x3y\x3y\x5y\xA3A\ny\x3z\x3z\x3z\x3z\x3z\x3{\x3{\x3{\x3");
		sb.Append("{\x3{\x3|\x5|\xA47\n|\x3|\x3|\x3}\x3}\x5}\xA4D\n}\x3~\x5~\xA50");
		sb.Append("\n~\x3~\x3~\x3~\x3~\a~\xA56\n~\f~\xE~\xA59\v~\x3~\x3~\x3\x7F");
		sb.Append("\x3\x7F\x3\x7F\x3\x7F\x3\x7F\a\x7F\xA62\n\x7F\f\x7F\xE\x7F\xA65");
		sb.Append("\v\x7F\x3\x7F\x3\x7F\x3\x80\x5\x80\xA6A\n\x80\x3\x80\x3\x80");
		sb.Append("\x3\x80\x3\x80\x3\x80\a\x80\xA71\n\x80\f\x80\xE\x80\xA74\v\x80");
		sb.Append("\x3\x80\x3\x80\x3\x80\x3\x80\x3\x80\x3\x80\x3\x80\x3\x80\x3");
		sb.Append("\x80\x3\x80\x3\x80\x3\x80\a\x80\xA82\n\x80\f\x80\xE\x80\xA85");
		sb.Append("\v\x80\x3\x80\x3\x80\x3\x80\x5\x80\xA8A\n\x80\x3\x80\x3\x80");
		sb.Append("\x3\x80\x3\x80\x3\x80\x3\x80\x5\x80\xA92\n\x80\x3\x81\x3\x81");
		sb.Append("\x5\x81\xA96\n\x81\x3\x82\x3\x82\x3\x82\x3\x82\a\x82\xA9C\n");
		sb.Append("\x82\f\x82\xE\x82\xA9F\v\x82\x3\x82\x3\x82\x3\x83\x3\x83\x5");
		sb.Append("\x83\xAA5\n\x83\x3\x84\x3\x84\x3\x84\x3\x84\x3\x84\x3\x84\x3");
		sb.Append("\x84\x3\x84\x3\x84\a\x84\xAB0\n\x84\f\x84\xE\x84\xAB3\v\x84");
		sb.Append("\x3\x85\x3\x85\x3\x85\a\x85\xAB8\n\x85\f\x85\xE\x85\xABB\v\x85");
		sb.Append("\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\x3");
		sb.Append("\x86\x3\x86\x5\x86\xAC7\n\x86\x3\x87\x3\x87\x3\x87\x3\x87\x3");
		sb.Append("\x87\x5\x87\xACE\n\x87\x3\x87\x3\x87\x3\x87\x3\x87\x5\x87\xAD4");
		sb.Append("\n\x87\x3\x87\x3\x87\x5\x87\xAD8\n\x87\x3\x87\x3\x87\x3\x87");
		sb.Append("\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3");
		sb.Append("\x87\x3\x87\x3\x87\x3\x87\x5\x87\xAE9\n\x87\x3\x88\x5\x88\xAEC");
		sb.Append("\n\x88\x3\x88\x3\x88\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89\x5\x89");
		sb.Append("\xAF5\n\x89\x3\x89\x5\x89\xAF8\n\x89\x3\x89\x5\x89\xAFB\n\x89");
		sb.Append("\x3\x89\x3\x89\x3\x8A\x3\x8A\x3\x8A\x3\x8B\x3\x8B\x3\x8B\x3");
		sb.Append("\x8B\x3\x8B\x3\x8B\x5\x8B\xB08\n\x8B\x3\x8C\x3\x8C\x5\x8C\xB0C");
		sb.Append("\n\x8C\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x5\x8D\xB14");
		sb.Append("\n\x8D\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x5\x8E\xB1A\n\x8E\x3\x8F");
		sb.Append("\x3\x8F\x3\x8F\x3\x8F\a\x8F\xB20\n\x8F\f\x8F\xE\x8F\xB23\v\x8F");
		sb.Append("\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x5\x8F\xB29\n\x8F\x3\x8F\x3\x8F");
		sb.Append("\x3\x8F\x3\x8F\x5\x8F\xB2F\n\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F");
		sb.Append("\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3");
		sb.Append("\x8F\x5\x8F\xB3E\n\x8F\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3");
		sb.Append("\x90\x3\x90\x5\x90\xB47\n\x90\x3\x90\x3\x90\x3\x91\x3\x91\x5");
		sb.Append("\x91\xB4D\n\x91\x3\x92\x3\x92\x3\x92\x3\x92\x5\x92\xB53\n\x92");
		sb.Append("\x3\x92\x5\x92\xB56\n\x92\x3\x92\x3\x92\x5\x92\xB5A\n\x92\x3");
		sb.Append("\x92\x3\x92\x3\x92\a\x92\xB5F\n\x92\f\x92\xE\x92\xB62\v\x92");
		sb.Append("\x3\x93\x3\x93\x3\x93\x3\x93\x3\x93\x5\x93\xB69\n\x93\x3\x93");
		sb.Append("\x5\x93\xB6C\n\x93\x3\x93\x3\x93\x3\x93\x3\x93\x5\x93\xB72\n");
		sb.Append("\x93\x3\x93\x3\x93\x3\x93\x3\x93\x5\x93\xB78\n\x93\x5\x93\xB7A");
		sb.Append("\n\x93\x3\x93\x3\x93\x3\x93\x3\x93\x5\x93\xB80\n\x93\x3\x93");
		sb.Append("\x5\x93\xB83\n\x93\x5\x93\xB85\n\x93\x3\x93\x3\x93\x3\x93\x3");
		sb.Append("\x93\x5\x93\xB8B\n\x93\x5\x93\xB8D\n\x93\x3\x93\x3\x93\x3\x94");
		sb.Append("\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94\x3");
		sb.Append("\x94\x5\x94\xB9B\n\x94\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94\x5");
		sb.Append("\x94\xBA2\n\x94\x3\x94\x3\x94\x3\x95\x3\x95\x3\x95\x5\x95\xBA9");
		sb.Append("\n\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x5\x95\xBB0\n\x95");
		sb.Append("\x3\x95\x3\x95\x3\x96\x3\x96\x3\x96\x5\x96\xBB7\n\x96\x3\x96");
		sb.Append("\x3\x96\x3\x97\x3\x97\x3\x97\x5\x97\xBBE\n\x97\x3\x97\x3\x97");
		sb.Append("\x3\x97\x3\x97\x3\x97\x5\x97\xBC5\n\x97\x3\x97\x3\x97\x3\x98");
		sb.Append("\x3\x98\x5\x98\xBCB\n\x98\x3\x99\x3\x99\x3\x99\x5\x99\xBD0\n");
		sb.Append("\x99\x3\x99\x3\x99\x3\x9A\x3\x9A\x3\x9A\a\x9A\xBD7\n\x9A\f\x9A");
		sb.Append("\xE\x9A\xBDA\v\x9A\x3\x9B\x3\x9B\x5\x9B\xBDE\n\x9B\x3\x9C\x3");
		sb.Append("\x9C\x3\x9D\x3\x9D\x3\x9E\x5\x9E\xBE5\n\x9E\x3\x9E\x3\x9E\x3");
		sb.Append("\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x5\x9F\xBEE\n\x9F\x3\xA0\x3");
		sb.Append("\xA0\x5\xA0\xBF2\n\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x5\xA0\xBF8");
		sb.Append("\n\xA0\x3\xA0\x5\xA0\xBFB\n\xA0\x3\xA1\x3\xA1\x5\xA1\xBFF\n");
		sb.Append("\xA1\x3\xA2\x3\xA2\x3\xA2\x5\xA2\xC04\n\xA2\x3\xA2\x3\xA2\x5");
		sb.Append("\xA2\xC08\n\xA2\x3\xA2\x3\xA2\x5\xA2\xC0C\n\xA2\x3\xA2\x3\xA2");
		sb.Append("\x5\xA2\xC10\n\xA2\x3\xA3\x3\xA3\x3\xA4\x3\xA4\x3\xA4\x5\xA4");
		sb.Append("\xC17\n\xA4\x3\xA5\x3\xA5\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6");
		sb.Append("\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3");
		sb.Append("\xA6\x3\xA6\x5\xA6\xC2A\n\xA6\x3\xA7\x3\xA7\x3\xA8\x3\xA8\x5");
		sb.Append("\xA8\xC30\n\xA8\x3\xA8\x2\x3\xAC\xA9\x2\x4\x6\b\n\f\xE\x10\x12");
		sb.Append("\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42");
		sb.Append("\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnprtvxz|~\x80\x82\x84\x86");
		sb.Append("\x88\x8A\x8C\x8E\x90\x92\x94\x96\x98\x9A\x9C\x9E\xA0\xA2\xA4");
		sb.Append("\xA6\xA8\xAA\xAC\xAE\xB0\xB2\xB4\xB6\xB8\xBA\xBC\xBE\xC0\xC2");
		sb.Append("\xC4\xC6\xC8\xCA\xCC\xCE\xD0\xD2\xD4\xD6\xD8\xDA\xDC\xDE\xE0");
		sb.Append("\xE2\xE4\xE6\xE8\xEA\xEC\xEE\xF0\xF2\xF4\xF6\xF8\xFA\xFC\xFE");
		sb.Append("\x100\x102\x104\x106\x108\x10A\x10C\x10E\x110\x112\x114\x116");
		sb.Append("\x118\x11A\x11C\x11E\x120\x122\x124\x126\x128\x12A\x12C\x12E");
		sb.Append("\x130\x132\x134\x136\x138\x13A\x13C\x13E\x140\x142\x144\x146");
		sb.Append("\x148\x14A\x14C\x14E\x2<\x3\x2\x194\x195\x4\x2\x194\x194\x197");
		sb.Append("\x197\x4\x2\xF2\xF2\x17A\x17A\x4\x2\x194\x195\x197\x197\x4\x2");
		sb.Append("ll~~\x4\x2\n\n\x35\x35\x3\x2\x85\x86\x4\x2\x144\x145\x151\x151");
		sb.Append("\x4\x2\x7F\x7F\x160\x160\x5\x2\xFD\xFD\x163\x163\x18A\x18A\x5");
		sb.Append("\x2\xA6\xA6\xCD\xCD\xF7\xF7\x4\x2qqss\x5\x2\xEE\xEE\x113\x113");
		sb.Append("\x12D\x12D\x4\x2\x10C\x10C\x121\x121\x5\x2\xFB\xFB\x13E\x13E");
		sb.Append("\x140\x140\x3\x2\x153\x154\x5\x2\x131\x131\x15B\x15B\x16B\x16B");
		sb.Append("\x5\x2\xC5\xC5\xF8\xF8\x108\x108\x4\x2\x108\x108\x16A\x16A\x5");
		sb.Append("\x2OO\xD7\xD7\x16A\x16A\x5\x2ll\xDD\xDD\x17B\x17B\x4\x2\x12D");
		sb.Append("\x12D\x166\x166\x4\x2\xB8\xB8\x123\x123\x3\x2\x144\x145\x4\x2");
		sb.Append("\xA6\xA6\xBB\xBB\x3\x2\xAC\xAD\x6\x2\xD8\xD8\x146\x146\x167");
		sb.Append("\x167\x197\x197\x4\x2\x109\x109\x164\x164\x6\x2\xFA\xFA\x101");
		sb.Append("\x101\x11E\x11E\x16F\x16F\x5\x2\x142\x142\x153\x153\x165\x165");
		sb.Append("\x4\x2\xC3\xC3\x158\x158\x3\x2\x1B4\x1B5\x3\x2\x1B1\x1B3\x4");
		sb.Append("\x2\x1B4\x1B5\x1B7\x1B9\x5\x2\x5\x5\b\b\xA3\xA3\x4\x2\x5\x5");
		sb.Append("\x37\x37\x4\x2\x15E\x15E\x160\x160\x4\x2\x105\x105\x135\x135");
		sb.Append("\x4\x2{{\x111\x111\x5\x2hh\xE1\xE1\x111\x111\x5\x2hh\x111\x111");
		sb.Append("\x124\x124\x4\x2UU\x15F\x15F\x4\x2nn\x194\x195\x5\x2OO\x63\x63");
		sb.Append("\x93\x93\x6\x2hh\x111\x111\x124\x124\x159\x159\x4\x2\x195\x195");
		sb.Append("\x197\x197\x5\x2\xF5\xF5\x150\x150\x161\x161\a\x2\xD4\xD4\x126");
		sb.Append("\x126\x12C\x12C\x171\x173\x187\x188\x3\x2\xE5\xE6\x4\x2\x14F");
		sb.Append("\x14F\x160\x160\x5\x2OOqq\x153\x153\x4\x2\x1A\x1Akk\x4\x2\x126");
		sb.Append("\x126\x195\x195\x3\x2\x199\x19A\x4\x2\x195\x195\x199\x199-\x2");
		sb.Append("JJ\xC3\xC3\xCB\xCB\xCD\xCD\xD4\xD5\xD8\xDA\xDE\xDF\xE1\xE1\xE3");
		sb.Append("\xE6\xF2\xF2\xF4\xF5\xF7\xF7\xFA\xFA\xFD\xFD\xFF\x101\x105\x10A");
		sb.Append("\x10C\x10F\x111\x111\x114\x114\x116\x116\x118\x11A\x11C\x128");
		sb.Append("\x12C\x12C\x130\x130\x132\x132\x135\x137\x139\x139\x13B\x13C");
		sb.Append("\x13F\x146\x148\x14D\x14F\x151\x153\x153\x155\x155\x158\x15A");
		sb.Append("\x15C\x165\x167\x168\x16A\x16A\x16D\x173\x177\x17A\x17E\x17E");
		sb.Append("\x180\x184\x186\x18D\x196\x196\x3\x2\x19F\x1A6\a\x2\x10B\x10B");
		sb.Append("\x11B\x11B\x12A\x12A\x176\x176\x1B3\x1B3\xE39\x2\x153\x3\x2");
		sb.Append("\x2\x2\x4\x158\x3\x2\x2\x2\x6\x160\x3\x2\x2\x2\b\x168\x3\x2");
		sb.Append("\x2\x2\n\x16E\x3\x2\x2\x2\f\x17F\x3\x2\x2\x2\xE\x1FE\x3\x2\x2");
		sb.Append("\x2\x10\x207\x3\x2\x2\x2\x12\x20A\x3\x2\x2\x2\x14\x240\x3\x2");
		sb.Append("\x2\x2\x16\x243\x3\x2\x2\x2\x18\x271\x3\x2\x2\x2\x1A\x274\x3");
		sb.Append("\x2\x2\x2\x1C\x284\x3\x2\x2\x2\x1E\x2BF\x3\x2\x2\x2 \x2D7\x3");
		sb.Append("\x2\x2\x2\"\x2EA\x3\x2\x2\x2$\x2EC\x3\x2\x2\x2&\x31D\x3\x2\x2");
		sb.Append("\x2(\x338\x3\x2\x2\x2*\x361\x3\x2\x2\x2,\x378\x3\x2\x2\x2.\x37A");
		sb.Append("\x3\x2\x2\x2\x30\x399\x3\x2\x2\x2\x32\x3AF\x3\x2\x2\x2\x34\x3CD");
		sb.Append("\x3\x2\x2\x2\x36\x3CF\x3\x2\x2\x2\x38\x3F5\x3\x2\x2\x2:\x422");
		sb.Append("\x3\x2\x2\x2<\x435\x3\x2\x2\x2>\x437\x3\x2\x2\x2@\x450\x3\x2");
		sb.Append("\x2\x2\x42\x452\x3\x2\x2\x2\x44\x45A\x3\x2\x2\x2\x46\x45C\x3");
		sb.Append("\x2\x2\x2H\x45F\x3\x2\x2\x2J\x462\x3\x2\x2\x2L\x464\x3\x2\x2");
		sb.Append("\x2N\x466\x3\x2\x2\x2P\x468\x3\x2\x2\x2R\x485\x3\x2\x2\x2T\x487");
		sb.Append("\x3\x2\x2\x2V\x48A\x3\x2\x2\x2X\x493\x3\x2\x2\x2Z\x49B\x3\x2");
		sb.Append("\x2\x2\\\x4A2\x3\x2\x2\x2^\x4B9\x3\x2\x2\x2`\x4BB\x3\x2\x2\x2");
		sb.Append("\x62\x4C6\x3\x2\x2\x2\x64\x4C8\x3\x2\x2\x2\x66\x4D6\x3\x2\x2");
		sb.Append("\x2h\x4E0\x3\x2\x2\x2j\x4EA\x3\x2\x2\x2l\x4F4\x3\x2\x2\x2n\x505");
		sb.Append("\x3\x2\x2\x2p\x50C\x3\x2\x2\x2r\x516\x3\x2\x2\x2t\x518\x3\x2");
		sb.Append("\x2\x2v\x51F\x3\x2\x2\x2x\x545\x3\x2\x2\x2z\x561\x3\x2\x2\x2");
		sb.Append("|\x58C\x3\x2\x2\x2~\x590\x3\x2\x2\x2\x80\x59D\x3\x2\x2\x2\x82");
		sb.Append("\x5CF\x3\x2\x2\x2\x84\x5EB\x3\x2\x2\x2\x86\x614\x3\x2\x2\x2");
		sb.Append("\x88\x663\x3\x2\x2\x2\x8A\x665\x3\x2\x2\x2\x8C\x669\x3\x2\x2");
		sb.Append("\x2\x8E\x66E\x3\x2\x2\x2\x90\x672\x3\x2\x2\x2\x92\x67B\x3\x2");
		sb.Append("\x2\x2\x94\x680\x3\x2\x2\x2\x96\x68C\x3\x2\x2\x2\x98\x68E\x3");
		sb.Append("\x2\x2\x2\x9A\x6BF\x3\x2\x2\x2\x9C\x6DD\x3\x2\x2\x2\x9E\x700");
		sb.Append("\x3\x2\x2\x2\xA0\x70C\x3\x2\x2\x2\xA2\x713\x3\x2\x2\x2\xA4\x73A");
		sb.Append("\x3\x2\x2\x2\xA6\x74B\x3\x2\x2\x2\xA8\x794\x3\x2\x2\x2\xAA\x798");
		sb.Append("\x3\x2\x2\x2\xAC\x7C7\x3\x2\x2\x2\xAE\x7E3\x3\x2\x2\x2\xB0\x7E5");
		sb.Append("\x3\x2\x2\x2\xB2\x7E7\x3\x2\x2\x2\xB4\x7F4\x3\x2\x2\x2\xB6\x810");
		sb.Append("\x3\x2\x2\x2\xB8\x812\x3\x2\x2\x2\xBA\x81A\x3\x2\x2\x2\xBC\x822");
		sb.Append("\x3\x2\x2\x2\xBE\x82B\x3\x2\x2\x2\xC0\x867\x3\x2\x2\x2\xC2\x86E");
		sb.Append("\x3\x2\x2\x2\xC4\x87C\x3\x2\x2\x2\xC6\x889\x3\x2\x2\x2\xC8\x8B5");
		sb.Append("\x3\x2\x2\x2\xCA\x8DF\x3\x2\x2\x2\xCC\x8E1\x3\x2\x2\x2\xCE\x8E8");
		sb.Append("\x3\x2\x2\x2\xD0\x8EC\x3\x2\x2\x2\xD2\x8EE\x3\x2\x2\x2\xD4\x927");
		sb.Append("\x3\x2\x2\x2\xD6\x929\x3\x2\x2\x2\xD8\x92F\x3\x2\x2\x2\xDA\x94C");
		sb.Append("\x3\x2\x2\x2\xDC\x94E\x3\x2\x2\x2\xDE\x95B\x3\x2\x2\x2\xE0\x95D");
		sb.Append("\x3\x2\x2\x2\xE2\x987\x3\x2\x2\x2\xE4\x989\x3\x2\x2\x2\xE6\x9AB");
		sb.Append("\x3\x2\x2\x2\xE8\x9AD\x3\x2\x2\x2\xEA\x9CB\x3\x2\x2\x2\xEC\x9CD");
		sb.Append("\x3\x2\x2\x2\xEE\x9D6\x3\x2\x2\x2\xF0\xA39\x3\x2\x2\x2\xF2\xA3B");
		sb.Append("\x3\x2\x2\x2\xF4\xA40\x3\x2\x2\x2\xF6\xA46\x3\x2\x2\x2\xF8\xA4A");
		sb.Append("\x3\x2\x2\x2\xFA\xA4F\x3\x2\x2\x2\xFC\xA5C\x3\x2\x2\x2\xFE\xA69");
		sb.Append("\x3\x2\x2\x2\x100\xA95\x3\x2\x2\x2\x102\xA97\x3\x2\x2\x2\x104");
		sb.Append("\xAA4\x3\x2\x2\x2\x106\xAA6\x3\x2\x2\x2\x108\xAB4\x3\x2\x2\x2");
		sb.Append("\x10A\xAC6\x3\x2\x2\x2\x10C\xAE8\x3\x2\x2\x2\x10E\xAEB\x3\x2");
		sb.Append("\x2\x2\x110\xAEF\x3\x2\x2\x2\x112\xAFE\x3\x2\x2\x2\x114\xB07");
		sb.Append("\x3\x2\x2\x2\x116\xB0B\x3\x2\x2\x2\x118\xB13\x3\x2\x2\x2\x11A");
		sb.Append("\xB19\x3\x2\x2\x2\x11C\xB3D\x3\x2\x2\x2\x11E\xB3F\x3\x2\x2\x2");
		sb.Append("\x120\xB4C\x3\x2\x2\x2\x122\xB4E\x3\x2\x2\x2\x124\xB63\x3\x2");
		sb.Append("\x2\x2\x126\xBA1\x3\x2\x2\x2\x128\xBAF\x3\x2\x2\x2\x12A\xBB6");
		sb.Append("\x3\x2\x2\x2\x12C\xBC4\x3\x2\x2\x2\x12E\xBCA\x3\x2\x2\x2\x130");
		sb.Append("\xBCF\x3\x2\x2\x2\x132\xBD3\x3\x2\x2\x2\x134\xBDD\x3\x2\x2\x2");
		sb.Append("\x136\xBDF\x3\x2\x2\x2\x138\xBE1\x3\x2\x2\x2\x13A\xBE4\x3\x2");
		sb.Append("\x2\x2\x13C\xBED\x3\x2\x2\x2\x13E\xBEF\x3\x2\x2\x2\x140\xBFE");
		sb.Append("\x3\x2\x2\x2\x142\xC0F\x3\x2\x2\x2\x144\xC11\x3\x2\x2\x2\x146");
		sb.Append("\xC16\x3\x2\x2\x2\x148\xC18\x3\x2\x2\x2\x14A\xC29\x3\x2\x2\x2");
		sb.Append("\x14C\xC2B\x3\x2\x2\x2\x14E\xC2D\x3\x2\x2\x2\x150\x152\x5\x4");
		sb.Append("\x3\x2\x151\x150\x3\x2\x2\x2\x152\x155\x3\x2\x2\x2\x153\x151");
		sb.Append("\x3\x2\x2\x2\x153\x154\x3\x2\x2\x2\x154\x156\x3\x2\x2\x2\x155");
		sb.Append("\x153\x3\x2\x2\x2\x156\x157\a\x2\x2\x3\x157\x3\x3\x2\x2\x2\x158");
		sb.Append("\x15A\x5\x6\x4\x2\x159\x15B\x5\x8A\x46\x2\x15A\x159\x3\x2\x2");
		sb.Append("\x2\x15A\x15B\x3\x2\x2\x2\x15B\x5\x3\x2\x2\x2\x15C\x15E\x5\b");
		sb.Append("\x5\x2\x15D\x15F\a\x1AF\x2\x2\x15E\x15D\x3\x2\x2\x2\x15E\x15F");
		sb.Append("\x3\x2\x2\x2\x15F\x161\x3\x2\x2\x2\x160\x15C\x3\x2\x2\x2\x161");
		sb.Append("\x162\x3\x2\x2\x2\x162\x160\x3\x2\x2\x2\x162\x163\x3\x2\x2\x2");
		sb.Append("\x163\a\x3\x2\x2\x2\x164\x169\x5\n\x6\x2\x165\x169\x5\f\a\x2");
		sb.Append("\x166\x169\x5\xE\b\x2\x167\x169\x5\x10\t\x2\x168\x164\x3\x2");
		sb.Append("\x2\x2\x168\x165\x3\x2\x2\x2\x168\x166\x3\x2\x2\x2\x168\x167");
		sb.Append("\x3\x2\x2\x2\x169\t\x3\x2\x2\x2\x16A\x16F\x5\x12\n\x2\x16B\x16F");
		sb.Append("\x5\x16\f\x2\x16C\x16F\x5\x1A\xE\x2\x16D\x16F\x5\x1C\xF\x2\x16E");
		sb.Append("\x16A\x3\x2\x2\x2\x16E\x16B\x3\x2\x2\x2\x16E\x16C\x3\x2\x2\x2");
		sb.Append("\x16E\x16D\x3\x2\x2\x2\x16F\v\x3\x2\x2\x2\x170\x180\x5$\x13");
		sb.Append("\x2\x171\x180\x5&\x14\x2\x172\x180\x5(\x15\x2\x173\x180\x5.");
		sb.Append("\x18\x2\x174\x180\x5\x30\x19\x2\x175\x180\x5n\x38\x2\x176\x180");
		sb.Append("\x5\x32\x1A\x2\x177\x180\x5\x36\x1C\x2\x178\x180\x5\x38\x1D");
		sb.Append("\x2\x179\x180\x5\x64\x33\x2\x17A\x180\x5\x66\x34\x2\x17B\x180");
		sb.Append("\x5h\x35\x2\x17C\x180\x5j\x36\x2\x17D\x180\x5p\x39\x2\x17E\x180");
		sb.Append("\x5l\x37\x2\x17F\x170\x3\x2\x2\x2\x17F\x171\x3\x2\x2\x2\x17F");
		sb.Append("\x172\x3\x2\x2\x2\x17F\x173\x3\x2\x2\x2\x17F\x174\x3\x2\x2\x2");
		sb.Append("\x17F\x175\x3\x2\x2\x2\x17F\x176\x3\x2\x2\x2\x17F\x177\x3\x2");
		sb.Append("\x2\x2\x17F\x178\x3\x2\x2\x2\x17F\x179\x3\x2\x2\x2\x17F\x17A");
		sb.Append("\x3\x2\x2\x2\x17F\x17B\x3\x2\x2\x2\x17F\x17C\x3\x2\x2\x2\x17F");
		sb.Append("\x17D\x3\x2\x2\x2\x17F\x17E\x3\x2\x2\x2\x180\r\x3\x2\x2\x2\x181");
		sb.Append("\x183\a\r\x2\x2\x182\x184\a\x1AF\x2\x2\x183\x182\x3\x2\x2\x2");
		sb.Append("\x183\x184\x3\x2\x2\x2\x184\x186\x3\x2\x2\x2\x185\x187\x5\x6");
		sb.Append("\x4\x2\x186\x185\x3\x2\x2\x2\x186\x187\x3\x2\x2\x2\x187\x188");
		sb.Append("\x3\x2\x2\x2\x188\x18A\a=\x2\x2\x189\x18B\a\x1AF\x2\x2\x18A");
		sb.Append("\x189\x3\x2\x2\x2\x18A\x18B\x3\x2\x2\x2\x18B\x1FF\x3\x2\x2\x2");
		sb.Append("\x18C\x18E\a\xF\x2\x2\x18D\x18F\a\x1AF\x2\x2\x18E\x18D\x3\x2");
		sb.Append("\x2\x2\x18E\x18F\x3\x2\x2\x2\x18F\x1FF\x3\x2\x2\x2\x190\x192");
		sb.Append("\a$\x2\x2\x191\x193\a\x1AF\x2\x2\x192\x191\x3\x2\x2\x2\x192");
		sb.Append("\x193\x3\x2\x2\x2\x193\x1FF\x3\x2\x2\x2\x194\x195\aQ\x2\x2\x195");
		sb.Append("\x197\x5\x146\xA4\x2\x196\x198\a\x1AF\x2\x2\x197\x196\x3\x2");
		sb.Append("\x2\x2\x197\x198\x3\x2\x2\x2\x198\x1FF\x3\x2\x2\x2\x199\x19A");
		sb.Append("\x5\x146\xA4\x2\x19A\x19C\a\x1B0\x2\x2\x19B\x19D\a\x1AF\x2\x2");
		sb.Append("\x19C\x19B\x3\x2\x2\x2\x19C\x19D\x3\x2\x2\x2\x19D\x1FF\x3\x2");
		sb.Append("\x2\x2\x19E\x19F\aX\x2\x2\x19F\x1A0\x5\xBA^\x2\x1A0\x1A3\x5");
		sb.Append("\b\x5\x2\x1A1\x1A2\a<\x2\x2\x1A2\x1A4\x5\b\x5\x2\x1A3\x1A1\x3");
		sb.Append("\x2\x2\x2\x1A3\x1A4\x3\x2\x2\x2\x1A4\x1A6\x3\x2\x2\x2\x1A5\x1A7");
		sb.Append("\a\x1AF\x2\x2\x1A6\x1A5\x3\x2\x2\x2\x1A6\x1A7\x3\x2\x2\x2\x1A7");
		sb.Append("\x1FF\x3\x2\x2\x2\x1A8\x1AA\a\x90\x2\x2\x1A9\x1AB\x5\xACW\x2");
		sb.Append("\x1AA\x1A9\x3\x2\x2\x2\x1AA\x1AB\x3\x2\x2\x2\x1AB\x1AD\x3\x2");
		sb.Append("\x2\x2\x1AC\x1AE\a\x1AF\x2\x2\x1AD\x1AC\x3\x2\x2\x2\x1AD\x1AE");
		sb.Append("\x3\x2\x2\x2\x1AE\x1FF\x3\x2\x2\x2\x1AF\x1B5\a\x178\x2\x2\x1B0");
		sb.Append("\x1B1\t\x2\x2\x2\x1B1\x1B2\a\x1AE\x2\x2\x1B2\x1B3\t\x3\x2\x2");
		sb.Append("\x1B3\x1B4\a\x1AE\x2\x2\x1B4\x1B6\t\x2\x2\x2\x1B5\x1B0\x3\x2");
		sb.Append("\x2\x2\x1B5\x1B6\x3\x2\x2\x2\x1B6\x1B8\x3\x2\x2\x2\x1B7\x1B9");
		sb.Append("\a\x1AF\x2\x2\x1B8\x1B7\x3\x2\x2\x2\x1B8\x1B9\x3\x2\x2\x2\x1B9");
		sb.Append("\x1FF\x3\x2\x2\x2\x1BA\x1BB\a\r\x2\x2\x1BB\x1BD\a\x17E\x2\x2");
		sb.Append("\x1BC\x1BE\a\x1AF\x2\x2\x1BD\x1BC\x3\x2\x2\x2\x1BD\x1BE\x3\x2");
		sb.Append("\x2\x2\x1BE\x1C0\x3\x2\x2\x2\x1BF\x1C1\x5\x6\x4\x2\x1C0\x1BF");
		sb.Append("\x3\x2\x2\x2\x1C0\x1C1\x3\x2\x2\x2\x1C1\x1C2\x3\x2\x2\x2\x1C2");
		sb.Append("\x1C3\a=\x2\x2\x1C3\x1C5\a\x17E\x2\x2\x1C4\x1C6\a\x1AF\x2\x2");
		sb.Append("\x1C5\x1C4\x3\x2\x2\x2\x1C5\x1C6\x3\x2\x2\x2\x1C6\x1C7\x3\x2");
		sb.Append("\x2\x2\x1C7\x1C8\a\r\x2\x2\x1C8\x1CA\a\xDA\x2\x2\x1C9\x1CB\a");
		sb.Append("\x1AF\x2\x2\x1CA\x1C9\x3\x2\x2\x2\x1CA\x1CB\x3\x2\x2\x2\x1CB");
		sb.Append("\x1CD\x3\x2\x2\x2\x1CC\x1CE\x5\x6\x4\x2\x1CD\x1CC\x3\x2\x2\x2");
		sb.Append("\x1CD\x1CE\x3\x2\x2\x2\x1CE\x1CF\x3\x2\x2\x2\x1CF\x1D0\a=\x2");
		sb.Append("\x2\x1D0\x1D2\a\xDA\x2\x2\x1D1\x1D3\a\x1AF\x2\x2\x1D2\x1D1\x3");
		sb.Append("\x2\x2\x2\x1D2\x1D3\x3\x2\x2\x2\x1D3\x1FF\x3\x2\x2\x2\x1D4\x1D5");
		sb.Append("\a\xBC\x2\x2\x1D5\x1D6\t\x4\x2\x2\x1D6\x1D8\x5\xACW\x2\x1D7");
		sb.Append("\x1D9\a\x1AF\x2\x2\x1D8\x1D7\x3\x2\x2\x2\x1D8\x1D9\x3\x2\x2");
		sb.Append("\x2\x1D9\x1FF\x3\x2\x2\x2\x1DA\x1DB\a\xBF\x2\x2\x1DB\x1E5\x5");
		sb.Append("\xBA^\x2\x1DC\x1E6\x5\b\x5\x2\x1DD\x1DF\a\xF\x2\x2\x1DE\x1E0");
		sb.Append("\a\x1AF\x2\x2\x1DF\x1DE\x3\x2\x2\x2\x1DF\x1E0\x3\x2\x2\x2\x1E0");
		sb.Append("\x1E6\x3\x2\x2\x2\x1E1\x1E3\a$\x2\x2\x1E2\x1E4\a\x1AF\x2\x2");
		sb.Append("\x1E3\x1E2\x3\x2\x2\x2\x1E3\x1E4\x3\x2\x2\x2\x1E4\x1E6\x3\x2");
		sb.Append("\x2\x2\x1E5\x1DC\x3\x2\x2\x2\x1E5\x1DD\x3\x2\x2\x2\x1E5\x1E1");
		sb.Append("\x3\x2\x2\x2\x1E6\x1FF\x3\x2\x2\x2\x1E7\x1E8\a\x84\x2\x2\x1E8");
		sb.Append("\x1EA\x5\xACW\x2\x1E9\x1EB\a\x1AF\x2\x2\x1EA\x1E9\x3\x2\x2\x2");
		sb.Append("\x1EA\x1EB\x3\x2\x2\x2\x1EB\x1FF\x3\x2\x2\x2\x1EC\x1ED\a\x88");
		sb.Append("\x2\x2\x1ED\x1EE\a\x1AC\x2\x2\x1EE\x1EF\t\x5\x2\x2\x1EF\x1F0");
		sb.Append("\a\x1AE\x2\x2\x1F0\x1F1\x5\xAAV\x2\x1F1\x1F2\a\x1AE\x2\x2\x1F2");
		sb.Append("\x1F7\x5\xAAV\x2\x1F3\x1F4\a\x1AE\x2\x2\x1F4\x1F6\x5\xAAV\x2");
		sb.Append("\x1F5\x1F3\x3\x2\x2\x2\x1F6\x1F9\x3\x2\x2\x2\x1F7\x1F5\x3\x2");
		sb.Append("\x2\x2\x1F7\x1F8\x3\x2\x2\x2\x1F8\x1FA\x3\x2\x2\x2\x1F9\x1F7");
		sb.Append("\x3\x2\x2\x2\x1FA\x1FC\a\x1AD\x2\x2\x1FB\x1FD\a\x1AF\x2\x2\x1FC");
		sb.Append("\x1FB\x3\x2\x2\x2\x1FC\x1FD\x3\x2\x2\x2\x1FD\x1FF\x3\x2\x2\x2");
		sb.Append("\x1FE\x181\x3\x2\x2\x2\x1FE\x18C\x3\x2\x2\x2\x1FE\x190\x3\x2");
		sb.Append("\x2\x2\x1FE\x194\x3\x2\x2\x2\x1FE\x199\x3\x2\x2\x2\x1FE\x19E");
		sb.Append("\x3\x2\x2\x2\x1FE\x1A8\x3\x2\x2\x2\x1FE\x1AF\x3\x2\x2\x2\x1FE");
		sb.Append("\x1BA\x3\x2\x2\x2\x1FE\x1D4\x3\x2\x2\x2\x1FE\x1DA\x3\x2\x2\x2");
		sb.Append("\x1FE\x1E7\x3\x2\x2\x2\x1FE\x1EC\x3\x2\x2\x2\x1FF\xF\x3\x2\x2");
		sb.Append("\x2\x200\x208\x5x=\x2\x201\x208\x5z>\x2\x202\x208\x5|?\x2\x203");
		sb.Append("\x208\x5\x82\x42\x2\x204\x208\x5\x86\x44\x2\x205\x208\x5\x88");
		sb.Append("\x45\x2\x206\x208\x5\x8CG\x2\x207\x200\x3\x2\x2\x2\x207\x201");
		sb.Append("\x3\x2\x2\x2\x207\x202\x3\x2\x2\x2\x207\x203\x3\x2\x2\x2\x207");
		sb.Append("\x204\x3\x2\x2\x2\x207\x205\x3\x2\x2\x2\x207\x206\x3\x2\x2\x2");
		sb.Append("\x208\x11\x3\x2\x2\x2\x209\x20B\x5\xB2Z\x2\x20A\x209\x3\x2\x2");
		sb.Append("\x2\x20A\x20B\x3\x2\x2\x2\x20B\x20C\x3\x2\x2\x2\x20C\x214\a");
		sb.Append("\x33\x2\x2\x20D\x20E\a\xAB\x2\x2\x20E\x20F\a\x1AC\x2\x2\x20F");
		sb.Append("\x210\x5\xACW\x2\x210\x212\a\x1AD\x2\x2\x211\x213\a\x7F\x2\x2");
		sb.Append("\x212\x211\x3\x2\x2\x2\x212\x213\x3\x2\x2\x2\x213\x215\x3\x2");
		sb.Append("\x2\x2\x214\x20D\x3\x2\x2\x2\x214\x215\x3\x2\x2\x2\x215\x217");
		sb.Append("\x3\x2\x2\x2\x216\x218\aN\x2\x2\x217\x216\x3\x2\x2\x2\x217\x218");
		sb.Append("\x3\x2\x2\x2\x218\x219\x3\x2\x2\x2\x219\x21B\x5\x14\v\x2\x21A");
		sb.Append("\x21C\x5\xFC\x7F\x2\x21B\x21A\x3\x2\x2\x2\x21B\x21C\x3\x2\x2");
		sb.Append("\x2\x21C\x21E\x3\x2\x2\x2\x21D\x21F\x5\x1E\x10\x2\x21E\x21D");
		sb.Append("\x3\x2\x2\x2\x21E\x21F\x3\x2\x2\x2\x21F\x222\x3\x2\x2\x2\x220");
		sb.Append("\x221\aN\x2\x2\x221\x223\x5\xDCo\x2\x222\x220\x3\x2\x2\x2\x222");
		sb.Append("\x223\x3\x2\x2\x2\x223\x231\x3\x2\x2\x2\x224\x22F\a\xBE\x2\x2");
		sb.Append("\x225\x230\x5\xBA^\x2\x226\x227\a(\x2\x2\x227\x22D\ap\x2\x2");
		sb.Append("\x228\x22A\a\x10C\x2\x2\x229\x228\x3\x2\x2\x2\x229\x22A\x3\x2");
		sb.Append("\x2\x2\x22A\x22B\x3\x2\x2\x2\x22B\x22E\x5\x134\x9B\x2\x22C\x22E");
		sb.Append("\a\x194\x2\x2\x22D\x229\x3\x2\x2\x2\x22D\x22C\x3\x2\x2\x2\x22E");
		sb.Append("\x230\x3\x2\x2\x2\x22F\x225\x3\x2\x2\x2\x22F\x226\x3\x2\x2\x2");
		sb.Append("\x230\x232\x3\x2\x2\x2\x231\x224\x3\x2\x2\x2\x231\x232\x3\x2");
		sb.Append("\x2\x2\x232\x234\x3\x2\x2\x2\x233\x235\x5\xCA\x66\x2\x234\x233");
		sb.Append("\x3\x2\x2\x2\x234\x235\x3\x2\x2\x2\x235\x237\x3\x2\x2\x2\x236");
		sb.Append("\x238\x5\xD2j\x2\x237\x236\x3\x2\x2\x2\x237\x238\x3\x2\x2\x2");
		sb.Append("\x238\x23A\x3\x2\x2\x2\x239\x23B\a\x1AF\x2\x2\x23A\x239\x3\x2");
		sb.Append("\x2\x2\x23A\x23B\x3\x2\x2\x2\x23B\x13\x3\x2\x2\x2\x23C\x241");
		sb.Append("\x5\xF8}\x2\x23D\x241\x5\x12E\x98\x2\x23E\x241\x5r:\x2\x23F");
		sb.Append("\x241\a\x194\x2\x2\x240\x23C\x3\x2\x2\x2\x240\x23D\x3\x2\x2");
		sb.Append("\x2\x240\x23E\x3\x2\x2\x2\x240\x23F\x3\x2\x2\x2\x241\x15\x3");
		sb.Append("\x2\x2\x2\x242\x244\x5\xB2Z\x2\x243\x242\x3\x2\x2\x2\x243\x244");
		sb.Append("\x3\x2\x2\x2\x244\x245\x3\x2\x2\x2\x245\x24D\a\\\x2\x2\x246");
		sb.Append("\x247\a\xAB\x2\x2\x247\x248\a\x1AC\x2\x2\x248\x249\x5\xACW\x2");
		sb.Append("\x249\x24B\a\x1AD\x2\x2\x24A\x24C\a\x7F\x2\x2\x24B\x24A\x3\x2");
		sb.Append("\x2\x2\x24B\x24C\x3\x2\x2\x2\x24C\x24E\x3\x2\x2\x2\x24D\x246");
		sb.Append("\x3\x2\x2\x2\x24D\x24E\x3\x2\x2\x2\x24E\x250\x3\x2\x2\x2\x24F");
		sb.Append("\x251\a^\x2\x2\x250\x24F\x3\x2\x2\x2\x250\x251\x3\x2\x2\x2\x251");
		sb.Append("\x254\x3\x2\x2\x2\x252\x255\x5\x12E\x98\x2\x253\x255\x5r:\x2");
		sb.Append("\x254\x252\x3\x2\x2\x2\x254\x253\x3\x2\x2\x2\x255\x257\x3\x2");
		sb.Append("\x2\x2\x256\x258\x5\xFC\x7F\x2\x257\x256\x3\x2\x2\x2\x257\x258");
		sb.Append("\x3\x2\x2\x2\x258\x25D\x3\x2\x2\x2\x259\x25A\a\x1AC\x2\x2\x25A");
		sb.Append("\x25B\x5\x132\x9A\x2\x25B\x25C\a\x1AD\x2\x2\x25C\x25E\x3\x2");
		sb.Append("\x2\x2\x25D\x259\x3\x2\x2\x2\x25D\x25E\x3\x2\x2\x2\x25E\x260");
		sb.Append("\x3\x2\x2\x2\x25F\x261\x5\x1E\x10\x2\x260\x25F\x3\x2\x2\x2\x260");
		sb.Append("\x261\x3\x2\x2\x2\x261\x262\x3\x2\x2\x2\x262\x264\x5\x18\r\x2");
		sb.Append("\x263\x265\x5\xCA\x66\x2\x264\x263\x3\x2\x2\x2\x264\x265\x3");
		sb.Append("\x2\x2\x2\x265\x267\x3\x2\x2\x2\x266\x268\x5\xD2j\x2\x267\x266");
		sb.Append("\x3\x2\x2\x2\x267\x268\x3\x2\x2\x2\x268\x26A\x3\x2\x2\x2\x269");
		sb.Append("\x26B\a\x1AF\x2\x2\x26A\x269\x3\x2\x2\x2\x26A\x26B\x3\x2\x2");
		sb.Append("\x2\x26B\x17\x3\x2\x2\x2\x26C\x272\x5\x106\x84\x2\x26D\x272");
		sb.Append("\x5\xEEx\x2\x26E\x272\x5|?\x2\x26F\x270\a\x32\x2\x2\x270\x272");
		sb.Append("\a\xB9\x2\x2\x271\x26C\x3\x2\x2\x2\x271\x26D\x3\x2\x2\x2\x271");
		sb.Append("\x26E\x3\x2\x2\x2\x271\x26F\x3\x2\x2\x2\x272\x19\x3\x2\x2\x2");
		sb.Append("\x273\x275\x5\xB2Z\x2\x274\x273\x3\x2\x2\x2\x274\x275\x3\x2");
		sb.Append("\x2\x2\x275\x276\x3\x2\x2\x2\x276\x278\x5\xC2\x62\x2\x277\x279");
		sb.Append("\x5\xC8\x65\x2\x278\x277\x3\x2\x2\x2\x278\x279\x3\x2\x2\x2\x279");
		sb.Append("\x27B\x3\x2\x2\x2\x27A\x27C\x5\xCA\x66\x2\x27B\x27A\x3\x2\x2");
		sb.Append("\x2\x27B\x27C\x3\x2\x2\x2\x27C\x27E\x3\x2\x2\x2\x27D\x27F\x5");
		sb.Append("\xD2j\x2\x27E\x27D\x3\x2\x2\x2\x27E\x27F\x3\x2\x2\x2\x27F\x281");
		sb.Append("\x3\x2\x2\x2\x280\x282\a\x1AF\x2\x2\x281\x280\x3\x2\x2\x2\x281");
		sb.Append("\x282\x3\x2\x2\x2\x282\x1B\x3\x2\x2\x2\x283\x285\x5\xB2Z\x2");
		sb.Append("\x284\x283\x3\x2\x2\x2\x284\x285\x3\x2\x2\x2\x285\x286\x3\x2");
		sb.Append("\x2\x2\x286\x28E\a\xB5\x2\x2\x287\x288\a\xAB\x2\x2\x288\x289");
		sb.Append("\a\x1AC\x2\x2\x289\x28A\x5\xACW\x2\x28A\x28C\a\x1AD\x2\x2\x28B");
		sb.Append("\x28D\a\x7F\x2\x2\x28C\x28B\x3\x2\x2\x2\x28C\x28D\x3\x2\x2\x2");
		sb.Append("\x28D\x28F\x3\x2\x2\x2\x28E\x287\x3\x2\x2\x2\x28E\x28F\x3\x2");
		sb.Append("\x2\x2\x28F\x292\x3\x2\x2\x2\x290\x293\x5\x12E\x98\x2\x291\x293");
		sb.Append("\x5r:\x2\x292\x290\x3\x2\x2\x2\x292\x291\x3\x2\x2\x2\x293\x295");
		sb.Append("\x3\x2\x2\x2\x294\x296\x5\xFA~\x2\x295\x294\x3\x2\x2\x2\x295");
		sb.Append("\x296\x3\x2\x2\x2\x296\x297\x3\x2\x2\x2\x297\x298\a\xA0\x2\x2");
		sb.Append("\x298\x29D\x5\xB6\\\x2\x299\x29A\a\x1AE\x2\x2\x29A\x29C\x5\xB6");
		sb.Append("\\\x2\x29B\x299\x3\x2\x2\x2\x29C\x29F\x3\x2\x2\x2\x29D\x29B");
		sb.Append("\x3\x2\x2\x2\x29D\x29E\x3\x2\x2\x2\x29E\x2A1\x3\x2\x2\x2\x29F");
		sb.Append("\x29D\x3\x2\x2\x2\x2A0\x2A2\x5\x1E\x10\x2\x2A1\x2A0\x3\x2\x2");
		sb.Append("\x2\x2A1\x2A2\x3\x2\x2\x2\x2A2\x2A5\x3\x2\x2\x2\x2A3\x2A4\a");
		sb.Append("N\x2\x2\x2A4\x2A6\x5\xDCo\x2\x2A5\x2A3\x3\x2\x2\x2\x2A5\x2A6");
		sb.Append("\x3\x2\x2\x2\x2A6\x2B4\x3\x2\x2\x2\x2A7\x2B2\a\xBE\x2\x2\x2A8");
		sb.Append("\x2B3\x5\xB8]\x2\x2A9\x2AA\a(\x2\x2\x2AA\x2B0\ap\x2\x2\x2AB");
		sb.Append("\x2AD\a\x10C\x2\x2\x2AC\x2AB\x3\x2\x2\x2\x2AC\x2AD\x3\x2\x2");
		sb.Append("\x2\x2AD\x2AE\x3\x2\x2\x2\x2AE\x2B1\x5\x134\x9B\x2\x2AF\x2B1");
		sb.Append("\a\x194\x2\x2\x2B0\x2AC\x3\x2\x2\x2\x2B0\x2AF\x3\x2\x2\x2\x2B1");
		sb.Append("\x2B3\x3\x2\x2\x2\x2B2\x2A8\x3\x2\x2\x2\x2B2\x2A9\x3\x2\x2\x2");
		sb.Append("\x2B3\x2B5\x3\x2\x2\x2\x2B4\x2A7\x3\x2\x2\x2\x2B4\x2B5\x3\x2");
		sb.Append("\x2\x2\x2B5\x2B7\x3\x2\x2\x2\x2B6\x2B8\x5\xCA\x66\x2\x2B7\x2B6");
		sb.Append("\x3\x2\x2\x2\x2B7\x2B8\x3\x2\x2\x2\x2B8\x2BA\x3\x2\x2\x2\x2B9");
		sb.Append("\x2BB\x5\xD2j\x2\x2BA\x2B9\x3\x2\x2\x2\x2BA\x2BB\x3\x2\x2\x2");
		sb.Append("\x2BB\x2BD\x3\x2\x2\x2\x2BC\x2BE\a\x1AF\x2\x2\x2BD\x2BC\x3\x2");
		sb.Append("\x2\x2\x2BD\x2BE\x3\x2\x2\x2\x2BE\x1D\x3\x2\x2\x2\x2BF\x2C0");
		sb.Append("\a\x145\x2\x2\x2C0\x2C5\x5 \x11\x2\x2C1\x2C2\a\x1AE\x2\x2\x2C2");
		sb.Append("\x2C4\x5 \x11\x2\x2C3\x2C1\x3\x2\x2\x2\x2C4\x2C7\x3\x2\x2\x2");
		sb.Append("\x2C5\x2C3\x3\x2\x2\x2\x2C5\x2C6\x3\x2\x2\x2\x2C6\x2D3\x3\x2");
		sb.Append("\x2\x2\x2C7\x2C5\x3\x2\x2\x2\x2C8\x2CB\a^\x2\x2\x2C9\x2CC\a");
		sb.Append("\x194\x2\x2\x2CA\x2CC\x5\x128\x95\x2\x2CB\x2C9\x3\x2\x2\x2\x2CB");
		sb.Append("\x2CA\x3\x2\x2\x2\x2CC\x2D1\x3\x2\x2\x2\x2CD\x2CE\a\x1AC\x2");
		sb.Append("\x2\x2CE\x2CF\x5\x132\x9A\x2\x2CF\x2D0\a\x1AD\x2\x2\x2D0\x2D2");
		sb.Append("\x3\x2\x2\x2\x2D1\x2CD\x3\x2\x2\x2\x2D1\x2D2\x3\x2\x2\x2\x2D2");
		sb.Append("\x2D4\x3\x2\x2\x2\x2D3\x2C8\x3\x2\x2\x2\x2D3\x2D4\x3\x2\x2\x2");
		sb.Append("\x2D4\x1F\x3\x2\x2\x2\x2D5\x2D8\x5\"\x12\x2\x2D6\x2D8\x5\xAC");
		sb.Append("W\x2\x2D7\x2D5\x3\x2\x2\x2\x2D7\x2D6\x3\x2\x2\x2\x2D8\x2DD\x3");
		sb.Append("\x2\x2\x2\x2D9\x2DB\a\t\x2\x2\x2DA\x2D9\x3\x2\x2\x2\x2DA\x2DB");
		sb.Append("\x3\x2\x2\x2\x2DB\x2DC\x3\x2\x2\x2\x2DC\x2DE\x5\x104\x83\x2");
		sb.Append("\x2DD\x2DA\x3\x2\x2\x2\x2DD\x2DE\x3\x2\x2\x2\x2DE!\x3\x2\x2");
		sb.Append("\x2\x2DF\x2E3\a\xF4\x2\x2\x2E0\x2E3\a\x119\x2\x2\x2E1\x2E3\x5");
		sb.Append("\x128\x95\x2\x2E2\x2DF\x3\x2\x2\x2\x2E2\x2E0\x3\x2\x2\x2\x2E2");
		sb.Append("\x2E1\x3\x2\x2\x2\x2E3\x2E4\x3\x2\x2\x2\x2E4\x2E7\a\x1A7\x2");
		sb.Append("\x2\x2E5\x2E8\a\x1B1\x2\x2\x2E6\x2E8\x5\x146\xA4\x2\x2E7\x2E5");
		sb.Append("\x3\x2\x2\x2\x2E7\x2E6\x3\x2\x2\x2\x2E8\x2EB\x3\x2\x2\x2\x2E9");
		sb.Append("\x2EB\a\x18E\x2\x2\x2EA\x2E2\x3\x2\x2\x2\x2EA\x2E9\x3\x2\x2");
		sb.Append("\x2\x2EB#\x3\x2\x2\x2\x2EC\x2ED\a&\x2\x2\x2ED\x2EE\a.\x2\x2");
		sb.Append("\x2EE\x2F2\x5\x146\xA4\x2\x2EF\x2F0\a!\x2\x2\x2F0\x2F1\a\x19B");
		sb.Append("\x2\x2\x2F1\x2F3\t\x6\x2\x2\x2F2\x2EF\x3\x2\x2\x2\x2F2\x2F3");
		sb.Append("\x3\x2\x2\x2\x2F3\x300\x3\x2\x2\x2\x2F4\x2F6\as\x2\x2\x2F5\x2F7");
		sb.Append("\a\x83\x2\x2\x2F6\x2F5\x3\x2\x2\x2\x2F6\x2F7\x3\x2\x2\x2\x2F7");
		sb.Append("\x2F8\x3\x2\x2\x2\x2F8\x2FD\x5\x120\x91\x2\x2F9\x2FA\a\x1AE");
		sb.Append("\x2\x2\x2FA\x2FC\x5\x120\x91\x2\x2FB\x2F9\x3\x2\x2\x2\x2FC\x2FF");
		sb.Append("\x3\x2\x2\x2\x2FD\x2FB\x3\x2\x2\x2\x2FD\x2FE\x3\x2\x2\x2\x2FE");
		sb.Append("\x301\x3\x2\x2\x2\x2FF\x2FD\x3\x2\x2\x2\x300\x2F4\x3\x2\x2\x2");
		sb.Append("\x300\x301\x3\x2\x2\x2\x301\x30C\x3\x2\x2\x2\x302\x303\ag\x2");
		sb.Append("\x2\x303\x304\as\x2\x2\x304\x309\x5\x120\x91\x2\x305\x306\a");
		sb.Append("\x1AE\x2\x2\x306\x308\x5\x120\x91\x2\x307\x305\x3\x2\x2\x2\x308");
		sb.Append("\x30B\x3\x2\x2\x2\x309\x307\x3\x2\x2\x2\x309\x30A\x3\x2\x2\x2");
		sb.Append("\x30A\x30D\x3\x2\x2\x2\x30B\x309\x3\x2\x2\x2\x30C\x302\x3\x2");
		sb.Append("\x2\x2\x30C\x30D\x3\x2\x2\x2\x30D\x310\x3\x2\x2\x2\x30E\x30F");
		sb.Append("\a\x1C\x2\x2\x30F\x311\x5\x146\xA4\x2\x310\x30E\x3\x2\x2\x2");
		sb.Append("\x310\x311\x3\x2\x2\x2\x311\x31B\x3\x2\x2\x2\x312\x313\a\xC0");
		sb.Append("\x2\x2\x313\x318\x5\x11C\x8F\x2\x314\x315\a\x1AE\x2\x2\x315");
		sb.Append("\x317\x5\x11C\x8F\x2\x316\x314\x3\x2\x2\x2\x317\x31A\x3\x2\x2");
		sb.Append("\x2\x318\x316\x3\x2\x2\x2\x318\x319\x3\x2\x2\x2\x319\x31C\x3");
		sb.Append("\x2\x2\x2\x31A\x318\x3\x2\x2\x2\x31B\x312\x3\x2\x2\x2\x31B\x31C");
		sb.Append("\x3\x2\x2\x2\x31C%\x3\x2\x2\x2\x31D\x31F\a&\x2\x2\x31E\x320");
		sb.Append("\a\xB3\x2\x2\x31F\x31E\x3\x2\x2\x2\x31F\x320\x3\x2\x2\x2\x320");
		sb.Append("\x322\x3\x2\x2\x2\x321\x323\x5\x138\x9D\x2\x322\x321\x3\x2\x2");
		sb.Append("\x2\x322\x323\x3\x2\x2\x2\x323\x324\x3\x2\x2\x2\x324\x325\a");
		sb.Append("Z\x2\x2\x325\x326\x5\x146\xA4\x2\x326\x327\as\x2\x2\x327\x328");
		sb.Append("\x5\xE8u\x2\x328\x329\a\x1AC\x2\x2\x329\x32B\x5\x132\x9A\x2");
		sb.Append("\x32A\x32C\t\a\x2\x2\x32B\x32A\x3\x2\x2\x2\x32B\x32C\x3\x2\x2");
		sb.Append("\x2\x32C\x32D\x3\x2\x2\x2\x32D\x32F\a\x1AD\x2\x2\x32E\x330\x5");
		sb.Append("\x9EP\x2\x32F\x32E\x3\x2\x2\x2\x32F\x330\x3\x2\x2\x2\x330\x333");
		sb.Append("\x3\x2\x2\x2\x331\x332\as\x2\x2\x332\x334\x5\x146\xA4\x2\x333");
		sb.Append("\x331\x3\x2\x2\x2\x333\x334\x3\x2\x2\x2\x334\x336\x3\x2\x2\x2");
		sb.Append("\x335\x337\a\x1AF\x2\x2\x336\x335\x3\x2\x2\x2\x336\x337\x3\x2");
		sb.Append("\x2\x2\x337\'\x3\x2\x2\x2\x338\x339\a&\x2\x2\x339\x33A\t\b\x2");
		sb.Append("\x2\x33A\x33D\x5\x12C\x97\x2\x33B\x33C\a\x1AF\x2\x2\x33C\x33E");
		sb.Append("\a\x195\x2\x2\x33D\x33B\x3\x2\x2\x2\x33D\x33E\x3\x2\x2\x2\x33E");
		sb.Append("\x34D\x3\x2\x2\x2\x33F\x341\a\x1AC\x2\x2\x340\x33F\x3\x2\x2");
		sb.Append("\x2\x340\x341\x3\x2\x2\x2\x341\x342\x3\x2\x2\x2\x342\x347\x5");
		sb.Append("*\x16\x2\x343\x344\a\x1AE\x2\x2\x344\x346\x5*\x16\x2\x345\x343");
		sb.Append("\x3\x2\x2\x2\x346\x349\x3\x2\x2\x2\x347\x345\x3\x2\x2\x2\x347");
		sb.Append("\x348\x3\x2\x2\x2\x348\x34B\x3\x2\x2\x2\x349\x347\x3\x2\x2\x2");
		sb.Append("\x34A\x34C\a\x1AD\x2\x2\x34B\x34A\x3\x2\x2\x2\x34B\x34C\x3\x2");
		sb.Append("\x2\x2\x34C\x34E\x3\x2\x2\x2\x34D\x340\x3\x2\x2\x2\x34D\x34E");
		sb.Append("\x3\x2\x2\x2\x34E\x358\x3\x2\x2\x2\x34F\x350\a\xC0\x2\x2\x350");
		sb.Append("\x355\x5,\x17\x2\x351\x352\a\x1AE\x2\x2\x352\x354\x5,\x17\x2");
		sb.Append("\x353\x351\x3\x2\x2\x2\x354\x357\x3\x2\x2\x2\x355\x353\x3\x2");
		sb.Append("\x2\x2\x355\x356\x3\x2\x2\x2\x356\x359\x3\x2\x2\x2\x357\x355");
		sb.Append("\x3\x2\x2\x2\x358\x34F\x3\x2\x2\x2\x358\x359\x3\x2\x2\x2\x359");
		sb.Append("\x35C\x3\x2\x2\x2\x35A\x35B\aI\x2\x2\x35B\x35D\a\x8D\x2\x2\x35C");
		sb.Append("\x35A\x3\x2\x2\x2\x35C\x35D\x3\x2\x2\x2\x35D\x35E\x3\x2\x2\x2");
		sb.Append("\x35E\x35F\a\t\x2\x2\x35F\x360\x5\x6\x4\x2\x360)\x3\x2\x2\x2");
		sb.Append("\x361\x365\a\x194\x2\x2\x362\x363\x5\x146\xA4\x2\x363\x364\a");
		sb.Append("\x1A7\x2\x2\x364\x366\x3\x2\x2\x2\x365\x362\x3\x2\x2\x2\x365");
		sb.Append("\x366\x3\x2\x2\x2\x366\x368\x3\x2\x2\x2\x367\x369\a\t\x2\x2");
		sb.Append("\x368\x367\x3\x2\x2\x2\x368\x369\x3\x2\x2\x2\x369\x36A\x3\x2");
		sb.Append("\x2\x2\x36A\x36C\x5\x13E\xA0\x2\x36B\x36D\a\xBA\x2\x2\x36C\x36B");
		sb.Append("\x3\x2\x2\x2\x36C\x36D\x3\x2\x2\x2\x36D\x370\x3\x2\x2\x2\x36E");
		sb.Append("\x36F\a\x19B\x2\x2\x36F\x371\x5\x140\xA1\x2\x370\x36E\x3\x2");
		sb.Append("\x2\x2\x370\x371\x3\x2\x2\x2\x371\x373\x3\x2\x2\x2\x372\x374");
		sb.Append("\t\t\x2\x2\x373\x372\x3\x2\x2\x2\x373\x374\x3\x2\x2\x2\x374");
		sb.Append("+\x3\x2\x2\x2\x375\x379\a\xFD\x2\x2\x376\x379\a\x155\x2\x2\x377");
		sb.Append("\x379\x5\x8EH\x2\x378\x375\x3\x2\x2\x2\x378\x376\x3\x2\x2\x2");
		sb.Append("\x378\x377\x3\x2\x2\x2\x379-\x3\x2\x2\x2\x37A\x37B\a&\x2\x2");
		sb.Append("\x37B\x37C\a\xA4\x2\x2\x37C\x37D\x5\x146\xA4\x2\x37D\x37E\a");
		sb.Append("s\x2\x2\x37E\x37F\x5\xE8u\x2\x37F\x380\a\x1AC\x2\x2\x380\x381");
		sb.Append("\x5\x132\x9A\x2\x381\x394\a\x1AD\x2\x2\x382\x388\a\xC0\x2\x2");
		sb.Append("\x383\x389\a\x10A\x2\x2\x384\x385\a\x162\x2\x2\x385\x386\a\x195");
		sb.Append("\x2\x2\x386\x389\t\n\x2\x2\x387\x389\a\x170\x2\x2\x388\x383");
		sb.Append("\x3\x2\x2\x2\x388\x384\x3\x2\x2\x2\x388\x387\x3\x2\x2\x2\x389");
		sb.Append("\x38C\x3\x2\x2\x2\x38A\x38B\a\x1AE\x2\x2\x38B\x38D\a\x139\x2");
		sb.Append("\x2\x38C\x38A\x3\x2\x2\x2\x38C\x38D\x3\x2\x2\x2\x38D\x392\x3");
		sb.Append("\x2\x2\x2\x38E\x38F\a\x1AE\x2\x2\x38F\x390\a\x117\x2\x2\x390");
		sb.Append("\x391\a\x19B\x2\x2\x391\x393\x5\x136\x9C\x2\x392\x38E\x3\x2");
		sb.Append("\x2\x2\x392\x393\x3\x2\x2\x2\x393\x395\x3\x2\x2\x2\x394\x382");
		sb.Append("\x3\x2\x2\x2\x394\x395\x3\x2\x2\x2\x395\x397\x3\x2\x2\x2\x396");
		sb.Append("\x398\a\x1AF\x2\x2\x397\x396\x3\x2\x2\x2\x397\x398\x3\x2\x2");
		sb.Append("\x2\x398/\x3\x2\x2\x2\x399\x39A\a&\x2\x2\x39A\x39B\a\xA6\x2");
		sb.Append("\x2\x39B\x39C\x5\x128\x95\x2\x39C\x39D\a\x1AC\x2\x2\x39D\x39F");
		sb.Append("\x5\x94K\x2\x39E\x3A0\a\x1AE\x2\x2\x39F\x39E\x3\x2\x2\x2\x39F");
		sb.Append("\x3A0\x3\x2\x2\x2\x3A0\x3A1\x3\x2\x2\x2\x3A1\x3A5\a\x1AD\x2");
		sb.Append("\x2\x3A2\x3A3\as\x2\x2\x3A3\x3A6\x5\x146\xA4\x2\x3A4\x3A6\a");
		sb.Append("\x32\x2\x2\x3A5\x3A2\x3\x2\x2\x2\x3A5\x3A4\x3\x2\x2\x2\x3A5");
		sb.Append("\x3A6\x3\x2\x2\x2\x3A6\x3AA\x3\x2\x2\x2\x3A7\x3A8\a\x177\x2");
		sb.Append("\x2\x3A8\x3AB\x5\x146\xA4\x2\x3A9\x3AB\a\x32\x2\x2\x3AA\x3A7");
		sb.Append("\x3\x2\x2\x2\x3AA\x3A9\x3\x2\x2\x2\x3AA\x3AB\x3\x2\x2\x2\x3AB");
		sb.Append("\x3AD\x3\x2\x2\x2\x3AC\x3AE\a\x1AF\x2\x2\x3AD\x3AC\x3\x2\x2");
		sb.Append("\x2\x3AD\x3AE\x3\x2\x2\x2\x3AE\x31\x3\x2\x2\x2\x3AF\x3B0\a&");
		sb.Append("\x2\x2\x3B0\x3B1\a\xBB\x2\x2\x3B1\x3B6\x5\x12A\x96\x2\x3B2\x3B3");
		sb.Append("\a\x1AC\x2\x2\x3B3\x3B4\x5\x132\x9A\x2\x3B4\x3B5\a\x1AD\x2\x2");
		sb.Append("\x3B5\x3B7\x3\x2\x2\x2\x3B6\x3B2\x3\x2\x2\x2\x3B6\x3B7\x3\x2");
		sb.Append("\x2\x2\x3B7\x3C1\x3\x2\x2\x2\x3B8\x3B9\a\xC0\x2\x2\x3B9\x3BE");
		sb.Append("\x5\x34\x1B\x2\x3BA\x3BB\a\x1AE\x2\x2\x3BB\x3BD\x5\x34\x1B\x2");
		sb.Append("\x3BC\x3BA\x3\x2\x2\x2\x3BD\x3C0\x3\x2\x2\x2\x3BE\x3BC\x3\x2");
		sb.Append("\x2\x2\x3BE\x3BF\x3\x2\x2\x2\x3BF\x3C2\x3\x2\x2\x2\x3C0\x3BE");
		sb.Append("\x3\x2\x2\x2\x3C1\x3B8\x3\x2\x2\x2\x3C1\x3C2\x3\x2\x2\x2\x3C2");
		sb.Append("\x3C3\x3\x2\x2\x2\x3C3\x3C4\a\t\x2\x2\x3C4\x3C8\x5\x1A\xE\x2");
		sb.Append("\x3C5\x3C6\a\xC0\x2\x2\x3C6\x3C7\a\x17\x2\x2\x3C7\x3C9\ay\x2");
		sb.Append("\x2\x3C8\x3C5\x3\x2\x2\x2\x3C8\x3C9\x3\x2\x2\x2\x3C9\x3CB\x3");
		sb.Append("\x2\x2\x2\x3CA\x3CC\a\x1AF\x2\x2\x3CB\x3CA\x3\x2\x2\x2\x3CB");
		sb.Append("\x3CC\x3\x2\x2\x2\x3CC\x33\x3\x2\x2\x2\x3CD\x3CE\t\v\x2\x2\x3CE");
		sb.Append("\x35\x3\x2\x2\x2\x3CF\x3D0\a\x6\x2\x2\x3D0\x3D1\a\xA6\x2\x2");
		sb.Append("\x3D1\x3F0\x5\x128\x95\x2\x3D2\x3D3\a\xA0\x2\x2\x3D3\x3D4\a");
		sb.Append("\x1AC\x2\x2\x3D4\x3D5\a\x122\x2\x2\x3D5\x3D6\a\x19B\x2\x2\x3D6");
		sb.Append("\x3D7\t\f\x2\x2\x3D7\x3F1\a\x1AD\x2\x2\x3D8\x3D9\a\x4\x2\x2");
		sb.Append("\x3D9\x3F1\x5\x96L\x2\x3DA\x3DB\a:\x2\x2\x3DB\x3DC\a \x2\x2");
		sb.Append("\x3DC\x3F1\x5\x146\xA4\x2\x3DD\x3DE\a\xC0\x2\x2\x3DE\x3DF\a");
		sb.Append("\x17\x2\x2\x3DF\x3E0\a\x4\x2\x2\x3E0\x3E1\a \x2\x2\x3E1\x3E2");
		sb.Append("\x5\x146\xA4\x2\x3E2\x3E3\aK\x2\x2\x3E3\x3E4\a\x61\x2\x2\x3E4");
		sb.Append("\x3E5\a\x1AC\x2\x2\x3E5\x3E6\x5\x132\x9A\x2\x3E6\x3E7\a\x1AD");
		sb.Append("\x2\x2\x3E7\x3E8\a\x8C\x2\x2\x3E8\x3E9\x5\x128\x95\x2\x3E9\x3EA");
		sb.Append("\a\x1AC\x2\x2\x3EA\x3EB\x5\x132\x9A\x2\x3EB\x3EC\a\x1AD\x2\x2");
		sb.Append("\x3EC\x3F1\x3\x2\x2\x2\x3ED\x3EE\a\x17\x2\x2\x3EE\x3EF\a \x2");
		sb.Append("\x2\x3EF\x3F1\x5\x146\xA4\x2\x3F0\x3D2\x3\x2\x2\x2\x3F0\x3D8");
		sb.Append("\x3\x2\x2\x2\x3F0\x3DA\x3\x2\x2\x2\x3F0\x3DD\x3\x2\x2\x2\x3F0");
		sb.Append("\x3ED\x3\x2\x2\x2\x3F1\x3F3\x3\x2\x2\x2\x3F2\x3F4\a\x1AF\x2");
		sb.Append("\x2\x3F3\x3F2\x3\x2\x2\x2\x3F3\x3F4\x3\x2\x2\x2\x3F4\x37\x3");
		sb.Append("\x2\x2\x2\x3F5\x3F6\a\x6\x2\x2\x3F6\x3F9\a.\x2\x2\x3F7\x3FA");
		sb.Append("\x5\x146\xA4\x2\x3F8\x3FA\a(\x2\x2\x3F9\x3F7\x3\x2\x2\x2\x3F9");
		sb.Append("\x3F8\x3\x2\x2\x2\x3FA\x407\x3\x2\x2\x2\x3FB\x3FC\a\x130\x2");
		sb.Append("\x2\x3FC\x3FD\a\x132\x2\x2\x3FD\x3FE\a\x19B\x2\x2\x3FE\x408");
		sb.Append("\x5\x146\xA4\x2\x3FF\x400\a\x1C\x2\x2\x400\x408\x5\x146\xA4");
		sb.Append("\x2\x401\x402\a\xA0\x2\x2\x402\x405\x5:\x1E\x2\x403\x404\a\xC0");
		sb.Append("\x2\x2\x404\x406\x5\x62\x32\x2\x405\x403\x3\x2\x2\x2\x405\x406");
		sb.Append("\x3\x2\x2\x2\x406\x408\x3\x2\x2\x2\x407\x3FB\x3\x2\x2\x2\x407");
		sb.Append("\x3FF\x3\x2\x2\x2\x407\x401\x3\x2\x2\x2\x408\x40A\x3\x2\x2\x2");
		sb.Append("\x409\x40B\a\x1AF\x2\x2\x40A\x409\x3\x2\x2\x2\x40A\x40B\x3\x2");
		sb.Append("\x2\x2\x40B\x39\x3\x2\x2\x2\x40C\x423\x5<\x1F\x2\x40D\x423\x5");
		sb.Append("> \x2\x40E\x423\x5\x42\"\x2\x40F\x423\x5\x44#\x2\x410\x423\x5");
		sb.Append("\x46$\x2\x411\x423\x5H%\x2\x412\x423\x5J&\x2\x413\x423\x5L\'");
		sb.Append("\x2\x414\x423\x5N(\x2\x415\x423\x5P)\x2\x416\x423\x5R*\x2\x417");
		sb.Append("\x418\a\x104\x2\x2\x418\x423\x5\x11E\x90\x2\x419\x423\a\x3\x2");
		sb.Append("\x2\x41A\x423\x5T+\x2\x41B\x423\x5V,\x2\x41C\x423\x5X-\x2\x41D");
		sb.Append("\x423\x5Z.\x2\x41E\x423\x5\\/\x2\x41F\x423\x5^\x30\x2\x420\x423");
		sb.Append("\x5`\x31\x2\x421\x423\x5\x62\x32\x2\x422\x40C\x3\x2\x2\x2\x422");
		sb.Append("\x40D\x3\x2\x2\x2\x422\x40E\x3\x2\x2\x2\x422\x40F\x3\x2\x2\x2");
		sb.Append("\x422\x410\x3\x2\x2\x2\x422\x411\x3\x2\x2\x2\x422\x412\x3\x2");
		sb.Append("\x2\x2\x422\x413\x3\x2\x2\x2\x422\x414\x3\x2\x2\x2\x422\x415");
		sb.Append("\x3\x2\x2\x2\x422\x416\x3\x2\x2\x2\x422\x417\x3\x2\x2\x2\x422");
		sb.Append("\x419\x3\x2\x2\x2\x422\x41A\x3\x2\x2\x2\x422\x41B\x3\x2\x2\x2");
		sb.Append("\x422\x41C\x3\x2\x2\x2\x422\x41D\x3\x2\x2\x2\x422\x41E\x3\x2");
		sb.Append("\x2\x2\x422\x41F\x3\x2\x2\x2\x422\x420\x3\x2\x2\x2\x422\x421");
		sb.Append("\x3\x2\x2\x2\x423;\x3\x2\x2\x2\x424\x425\a\xCF\x2\x2\x425\x436");
		sb.Append("\x5\x136\x9C\x2\x426\x427\a\xD0\x2\x2\x427\x436\aq\x2\x2\x428");
		sb.Append("\x42D\as\x2\x2\x429\x42A\a\x117\x2\x2\x42A\x42B\a\x19B\x2\x2");
		sb.Append("\x42B\x42E\as\x2\x2\x42C\x42E\aq\x2\x2\x42D\x429\x3\x2\x2\x2");
		sb.Append("\x42D\x42C\x3\x2\x2\x2\x42E\x436\x3\x2\x2\x2\x42F\x430\a\xD1");
		sb.Append("\x2\x2\x430\x436\x5\x136\x9C\x2\x431\x432\a\xD2\x2\x2\x432\x436");
		sb.Append("\x5\x136\x9C\x2\x433\x434\a\xD3\x2\x2\x434\x436\t\r\x2\x2\x435");
		sb.Append("\x424\x3\x2\x2\x2\x435\x426\x3\x2\x2\x2\x435\x428\x3\x2\x2\x2");
		sb.Append("\x435\x42F\x3\x2\x2\x2\x435\x431\x3\x2\x2\x2\x435\x433\x3\x2");
		sb.Append("\x2\x2\x436=\x3\x2\x2\x2\x437\x438\a\xDC\x2\x2\x438\x448\a\x19B");
		sb.Append("\x2\x2\x439\x449\aq\x2\x2\x43A\x445\as\x2\x2\x43B\x440\x5@!");
		sb.Append("\x2\x43C\x43D\a\x1AE\x2\x2\x43D\x43F\x5@!\x2\x43E\x43C\x3\x2");
		sb.Append("\x2\x2\x43F\x442\x3\x2\x2\x2\x440\x43E\x3\x2\x2\x2\x440\x441");
		sb.Append("\x3\x2\x2\x2\x441\x444\x3\x2\x2\x2\x442\x440\x3\x2\x2\x2\x443");
		sb.Append("\x43B\x3\x2\x2\x2\x444\x447\x3\x2\x2\x2\x445\x443\x3\x2\x2\x2");
		sb.Append("\x445\x446\x3\x2\x2\x2\x446\x449\x3\x2\x2\x2\x447\x445\x3\x2");
		sb.Append("\x2\x2\x448\x439\x3\x2\x2\x2\x448\x43A\x3\x2\x2\x2\x449?\x3");
		sb.Append("\x2\x2\x2\x44A\x44B\a\xCE\x2\x2\x44B\x44C\a\x19B\x2\x2\x44C");
		sb.Append("\x451\x5\x136\x9C\x2\x44D\x44E\a\xDB\x2\x2\x44E\x44F\a\x19B");
		sb.Append("\x2\x2\x44F\x451\t\xE\x2\x2\x450\x44A\x3\x2\x2\x2\x450\x44D");
		sb.Append("\x3\x2\x2\x2\x451\x41\x3\x2\x2\x2\x452\x453\a!\x2\x2\x453\x454");
		sb.Append("\a\x19B\x2\x2\x454\x455\t\x6\x2\x2\x455\x43\x3\x2\x2\x2\x456");
		sb.Append("\x457\a\xE7\x2\x2\x457\x45B\x5\x136\x9C\x2\x458\x459\a\xE8\x2");
		sb.Append("\x2\x459\x45B\t\xF\x2\x2\x45A\x456\x3\x2\x2\x2\x45A\x458\x3");
		sb.Append("\x2\x2\x2\x45B\x45\x3\x2\x2\x2\x45C\x45D\a\xED\x2\x2\x45D\x45E");
		sb.Append("\x5\x136\x9C\x2\x45EG\x3\x2\x2\x2\x45F\x460\a\xFD\x2\x2\x460");
		sb.Append("\x461\x5\x136\x9C\x2\x461I\x3\x2\x2\x2\x462\x463\t\x10\x2\x2");
		sb.Append("\x463K\x3\x2\x2\x2\x464\x465\t\x11\x2\x2\x465M\x3\x2\x2\x2\x466");
		sb.Append("\x467\t\x12\x2\x2\x467O\x3\x2\x2\x2\x468\x469\a\xF3\x2\x2\x469");
		sb.Append("\x46A\a\x19B\x2\x2\x46A\x46B\t\x13\x2\x2\x46BQ\x3\x2\x2\x2\x46C");
		sb.Append("\x46D\a\xEF\x2\x2\x46D\x486\x5\x136\x9C\x2\x46E\x46F\a\x17D");
		sb.Append("\x2\x2\x46F\x486\x5\x136\x9C\x2\x470\x471\a\xF1\x2\x2\x471\x474");
		sb.Append("\a\x19B\x2\x2\x472\x475\x5\x146\xA4\x2\x473\x475\a\x197\x2\x2");
		sb.Append("\x474\x472\x3\x2\x2\x2\x474\x473\x3\x2\x2\x2\x475\x486\x3\x2");
		sb.Append("\x2\x2\x476\x477\a\xF0\x2\x2\x477\x47A\a\x19B\x2\x2\x478\x47B");
		sb.Append("\x5\x146\xA4\x2\x479\x47B\a\x197\x2\x2\x47A\x478\x3\x2\x2\x2");
		sb.Append("\x47A\x479\x3\x2\x2\x2\x47B\x486\x3\x2\x2\x2\x47C\x47D\a\x133");
		sb.Append("\x2\x2\x47D\x47E\a\x19B\x2\x2\x47E\x486\t\r\x2\x2\x47F\x480");
		sb.Append("\a\x17C\x2\x2\x480\x481\a\x19B\x2\x2\x481\x486\t\r\x2\x2\x482");
		sb.Append("\x483\a\x17F\x2\x2\x483\x484\a\x19B\x2\x2\x484\x486\a\x195\x2");
		sb.Append("\x2\x485\x46C\x3\x2\x2\x2\x485\x46E\x3\x2\x2\x2\x485\x470\x3");
		sb.Append("\x2\x2\x2\x485\x476\x3\x2\x2\x2\x485\x47C\x3\x2\x2\x2\x485\x47F");
		sb.Append("\x3\x2\x2\x2\x485\x482\x3\x2\x2\x2\x486S\x3\x2\x2\x2\x487\x488");
		sb.Append("\a\x12F\x2\x2\x488\x489\t\r\x2\x2\x489U\x3\x2\x2\x2\x48A\x48B");
		sb.Append("\a\x148\x2\x2\x48B\x48C\t\x14\x2\x2\x48CW\x3\x2\x2\x2\x48D\x48E");
		sb.Append("\a\x156\x2\x2\x48E\x494\t\x15\x2\x2\x48F\x490\a\x17B\x2\x2\x490");
		sb.Append("\x494\x5\x136\x9C\x2\x491\x492\a\x147\x2\x2\x492\x494\t\x16");
		sb.Append("\x2\x2\x493\x48D\x3\x2\x2\x2\x493\x48F\x3\x2\x2\x2\x493\x491");
		sb.Append("\x3\x2\x2\x2\x494Y\x3\x2\x2\x2\x495\x49C\a\xFC\x2\x2\x496\x49C");
		sb.Append("\a\xF9\x2\x2\x497\x49C\a\x134\x2\x2\x498\x49C\a\xFE\x2\x2\x499");
		sb.Append("\x49A\a\x112\x2\x2\x49A\x49C\x5\x136\x9C\x2\x49B\x495\x3\x2");
		sb.Append("\x2\x2\x49B\x496\x3\x2\x2\x2\x49B\x497\x3\x2\x2\x2\x49B\x498");
		sb.Append("\x3\x2\x2\x2\x49B\x499\x3\x2\x2\x2\x49C[\x3\x2\x2\x2\x49D\x49E");
		sb.Append("\a\xC6\x2\x2\x49E\x4A3\x5\x136\x9C\x2\x49F\x4A0\a\x152\x2\x2");
		sb.Append("\x4A0\x4A3\t\r\x2\x2\x4A1\x4A3\t\r\x2\x2\x4A2\x49D\x3\x2\x2");
		sb.Append("\x2\x4A2\x49F\x3\x2\x2\x2\x4A2\x4A1\x3\x2\x2\x2\x4A3]\x3\x2");
		sb.Append("\x2\x2\x4A4\x4A5\a\xC8\x2\x2\x4A5\x4BA\x5\x136\x9C\x2\x4A6\x4A7");
		sb.Append("\a\xC7\x2\x2\x4A7\x4BA\x5\x136\x9C\x2\x4A8\x4A9\a\xC9\x2\x2");
		sb.Append("\x4A9\x4BA\x5\x136\x9C\x2\x4AA\x4AB\a\xCA\x2\x2\x4AB\x4BA\x5");
		sb.Append("\x136\x9C\x2\x4AC\x4AD\a\xCC\x2\x2\x4AD\x4BA\x5\x136\x9C\x2");
		sb.Append("\x4AE\x4AF\a\xE0\x2\x2\x4AF\x4B0\a\x19B\x2\x2\x4B0\x4BA\a\x195");
		sb.Append("\x2\x2\x4B1\x4B2\a\xE2\x2\x2\x4B2\x4BA\x5\x136\x9C\x2\x4B3\x4B4");
		sb.Append("\a\x13D\x2\x2\x4B4\x4BA\x5\x136\x9C\x2\x4B5\x4B6\a\x14E\x2\x2");
		sb.Append("\x4B6\x4BA\x5\x136\x9C\x2\x4B7\x4B8\a\x157\x2\x2\x4B8\x4BA\x5");
		sb.Append("\x136\x9C\x2\x4B9\x4A4\x3\x2\x2\x2\x4B9\x4A6\x3\x2\x2\x2\x4B9");
		sb.Append("\x4A8\x3\x2\x2\x2\x4B9\x4AA\x3\x2\x2\x2\x4B9\x4AC\x3\x2\x2\x2");
		sb.Append("\x4B9\x4AE\x3\x2\x2\x2\x4B9\x4B1\x3\x2\x2\x2\x4B9\x4B3\x3\x2");
		sb.Append("\x2\x2\x4B9\x4B5\x3\x2\x2\x2\x4B9\x4B7\x3\x2\x2\x2\x4BA_\x3");
		sb.Append("\x2\x2\x2\x4BB\x4BC\a\x175\x2\x2\x4BC\x4BD\a\x19B\x2\x2\x4BD");
		sb.Append("\x4BE\a\x195\x2\x2\x4BE\x4BF\t\x17\x2\x2\x4BF\x61\x3\x2\x2\x2");
		sb.Append("\x4C0\x4C1\a\x94\x2\x2\x4C1\x4C2\a\xC4\x2\x2\x4C2\x4C7\a\x195");
		sb.Append("\x2\x2\x4C3\x4C4\a\x94\x2\x2\x4C4\x4C7\a\x115\x2\x2\x4C5\x4C7");
		sb.Append("\a\x13A\x2\x2\x4C6\x4C0\x3\x2\x2\x2\x4C6\x4C3\x3\x2\x2\x2\x4C6");
		sb.Append("\x4C5\x3\x2\x2\x2\x4C7\x63\x3\x2\x2\x2\x4C8\x4C9\a:\x2\x2\x4C9");
		sb.Append("\x4CC\aZ\x2\x2\x4CA\x4CB\aX\x2\x2\x4CB\x4CD\a\x42\x2\x2\x4CC");
		sb.Append("\x4CA\x3\x2\x2\x2\x4CC\x4CD\x3\x2\x2\x2\x4CD\x4CE\x3\x2\x2\x2");
		sb.Append("\x4CE\x4D1\x5\x146\xA4\x2\x4CF\x4D0\as\x2\x2\x4D0\x4D2\x5\x128");
		sb.Append("\x95\x2\x4D1\x4CF\x3\x2\x2\x2\x4D1\x4D2\x3\x2\x2\x2\x4D2\x4D4");
		sb.Append("\x3\x2\x2\x2\x4D3\x4D5\a\x1AF\x2\x2\x4D4\x4D3\x3\x2\x2\x2\x4D4");
		sb.Append("\x4D5\x3\x2\x2\x2\x4D5\x65\x3\x2\x2\x2\x4D6\x4D7\a:\x2\x2\x4D7");
		sb.Append("\x4DA\a\x86\x2\x2\x4D8\x4D9\aX\x2\x2\x4D9\x4DB\a\x42\x2\x2\x4DA");
		sb.Append("\x4D8\x3\x2\x2\x2\x4DA\x4DB\x3\x2\x2\x2\x4DB\x4DC\x3\x2\x2\x2");
		sb.Append("\x4DC\x4DE\x5\x12C\x97\x2\x4DD\x4DF\a\x1AF\x2\x2\x4DE\x4DD\x3");
		sb.Append("\x2\x2\x2\x4DE\x4DF\x3\x2\x2\x2\x4DFg\x3\x2\x2\x2\x4E0\x4E1");
		sb.Append("\a:\x2\x2\x4E1\x4E5\a\xA4\x2\x2\x4E2\x4E3\x5\x128\x95\x2\x4E3");
		sb.Append("\x4E4\a\x1A7\x2\x2\x4E4\x4E6\x3\x2\x2\x2\x4E5\x4E2\x3\x2\x2");
		sb.Append("\x2\x4E5\x4E6\x3\x2\x2\x2\x4E6\x4E7\x3\x2\x2\x2\x4E7\x4E8\x5");
		sb.Append("\x146\xA4\x2\x4E8\x4E9\a\x1AF\x2\x2\x4E9i\x3\x2\x2\x2\x4EA\x4EB");
		sb.Append("\a:\x2\x2\x4EB\x4EE\a\xA6\x2\x2\x4EC\x4ED\aX\x2\x2\x4ED\x4EF");
		sb.Append("\a\x42\x2\x2\x4EE\x4EC\x3\x2\x2\x2\x4EE\x4EF\x3\x2\x2\x2\x4EF");
		sb.Append("\x4F0\x3\x2\x2\x2\x4F0\x4F2\x5\x128\x95\x2\x4F1\x4F3\a\x1AF");
		sb.Append("\x2\x2\x4F2\x4F1\x3\x2\x2\x2\x4F2\x4F3\x3\x2\x2\x2\x4F3k\x3");
		sb.Append("\x2\x2\x2\x4F4\x4F5\a:\x2\x2\x4F5\x4F8\a\xBB\x2\x2\x4F6\x4F7");
		sb.Append("\aX\x2\x2\x4F7\x4F9\a\x42\x2\x2\x4F8\x4F6\x3\x2\x2\x2\x4F8\x4F9");
		sb.Append("\x3\x2\x2\x2\x4F9\x4FA\x3\x2\x2\x2\x4FA\x4FF\x5\x12A\x96\x2");
		sb.Append("\x4FB\x4FC\a\x1AE\x2\x2\x4FC\x4FE\x5\x12A\x96\x2\x4FD\x4FB\x3");
		sb.Append("\x2\x2\x2\x4FE\x501\x3\x2\x2\x2\x4FF\x4FD\x3\x2\x2\x2\x4FF\x500");
		sb.Append("\x3\x2\x2\x2\x500\x503\x3\x2\x2\x2\x501\x4FF\x3\x2\x2\x2\x502");
		sb.Append("\x504\a\x1AF\x2\x2\x503\x502\x3\x2\x2\x2\x503\x504\x3\x2\x2");
		sb.Append("\x2\x504m\x3\x2\x2\x2\x505\x506\a&\x2\x2\x506\x507\a\x180\x2");
		sb.Append("\x2\x507\x508\x5\x12A\x96\x2\x508\x509\aN\x2\x2\x509\x50A\x5");
		sb.Append("\x13E\xA0\x2\x50A\x50B\x5\x140\xA1\x2\x50Bo\x3\x2\x2\x2\x50C");
		sb.Append("\x50D\a:\x2\x2\x50D\x510\a\x180\x2\x2\x50E\x50F\aX\x2\x2\x50F");
		sb.Append("\x511\a\x42\x2\x2\x510\x50E\x3\x2\x2\x2\x510\x511\x3\x2\x2\x2");
		sb.Append("\x511\x512\x3\x2\x2\x2\x512\x513\x5\x12A\x96\x2\x513q\x3\x2");
		sb.Append("\x2\x2\x514\x517\x5t;\x2\x515\x517\x5v<\x2\x516\x514\x3\x2\x2");
		sb.Append("\x2\x516\x515\x3\x2\x2\x2\x517s\x3\x2\x2\x2\x518\x519\av\x2");
		sb.Append("\x2\x519\x51A\a\x1AC\x2\x2\x51A\x51B\x5\x146\xA4\x2\x51B\x51C");
		sb.Append("\a\x1AE\x2\x2\x51C\x51D\a\x197\x2\x2\x51D\x51E\a\x1AD\x2\x2");
		sb.Append("\x51Eu\x3\x2\x2\x2\x51F\x520\au\x2\x2\x520\x521\a\x1AC\x2\x2");
		sb.Append("\x521\x522\a\x197\x2\x2\x522\x523\a\x1AE\x2\x2\x523\x524\a\x197");
		sb.Append("\x2\x2\x524\x525\a\x1AD\x2\x2\x525\x527\a\x1A7\x2\x2\x526\x528");
		sb.Append("\x5\x146\xA4\x2\x527\x526\x3\x2\x2\x2\x527\x528\x3\x2\x2\x2");
		sb.Append("\x528\x529\x3\x2\x2\x2\x529\x52B\a\x1A7\x2\x2\x52A\x52C\x5\x146");
		sb.Append("\xA4\x2\x52B\x52A\x3\x2\x2\x2\x52B\x52C\x3\x2\x2\x2\x52C\x52D");
		sb.Append("\x3\x2\x2\x2\x52D\x52E\a\x1A7\x2\x2\x52E\x52F\x5\x146\xA4\x2");
		sb.Append("\x52Fw\x3\x2\x2\x2\x530\x531\a\x31\x2\x2\x531\x533\a\x194\x2");
		sb.Append("\x2\x532\x534\a\t\x2\x2\x533\x532\x3\x2\x2\x2\x533\x534\x3\x2");
		sb.Append("\x2\x2\x534\x535\x3\x2\x2\x2\x535\x537\x5\x92J\x2\x536\x538");
		sb.Append("\a\x1AF\x2\x2\x537\x536\x3\x2\x2\x2\x537\x538\x3\x2\x2\x2\x538");
		sb.Append("\x546\x3\x2\x2\x2\x539\x53A\a\x31\x2\x2\x53A\x53F\x5\x90I\x2");
		sb.Append("\x53B\x53C\a\x1AE\x2\x2\x53C\x53E\x5\x90I\x2\x53D\x53B\x3\x2");
		sb.Append("\x2\x2\x53E\x541\x3\x2\x2\x2\x53F\x53D\x3\x2\x2\x2\x53F\x540");
		sb.Append("\x3\x2\x2\x2\x540\x543\x3\x2\x2\x2\x541\x53F\x3\x2\x2\x2\x542");
		sb.Append("\x544\a\x1AF\x2\x2\x543\x542\x3\x2\x2\x2\x543\x544\x3\x2\x2");
		sb.Append("\x2\x544\x546\x3\x2\x2\x2\x545\x530\x3\x2\x2\x2\x545\x539\x3");
		sb.Append("\x2\x2\x2\x546y\x3\x2\x2\x2\x547\x549\a\x19\x2\x2\x548\x54A");
		sb.Append("\a\x10C\x2\x2\x549\x548\x3\x2\x2\x2\x549\x54A\x3\x2\x2\x2\x54A");
		sb.Append("\x54B\x3\x2\x2\x2\x54B\x54D\x5\x134\x9B\x2\x54C\x54E\a\x1AF");
		sb.Append("\x2\x2\x54D\x54C\x3\x2\x2\x2\x54D\x54E\x3\x2\x2\x2\x54E\x562");
		sb.Append("\x3\x2\x2\x2\x54F\x551\a\x30\x2\x2\x550\x552\a\x10C\x2\x2\x551");
		sb.Append("\x550\x3\x2\x2\x2\x551\x552\x3\x2\x2\x2\x552\x553\x3\x2\x2\x2");
		sb.Append("\x553\x555\x5\x134\x9B\x2\x554\x556\a\x1AF\x2\x2\x555\x554\x3");
		sb.Append("\x2\x2\x2\x555\x556\x3\x2\x2\x2\x556\x562\x3\x2\x2\x2\x557\x562");
		sb.Append("\x5\xA2R\x2\x558\x562\x5\xA6T\x2\x559\x55B\at\x2\x2\x55A\x55C");
		sb.Append("\a\x10C\x2\x2\x55B\x55A\x3\x2\x2\x2\x55B\x55C\x3\x2\x2\x2\x55C");
		sb.Append("\x55D\x3\x2\x2\x2\x55D\x55F\x5\x134\x9B\x2\x55E\x560\a\x1AF");
		sb.Append("\x2\x2\x55F\x55E\x3\x2\x2\x2\x55F\x560\x3\x2\x2\x2\x560\x562");
		sb.Append("\x3\x2\x2\x2\x561\x547\x3\x2\x2\x2\x561\x54F\x3\x2\x2\x2\x561");
		sb.Append("\x557\x3\x2\x2\x2\x561\x558\x3\x2\x2\x2\x561\x559\x3\x2\x2\x2");
		sb.Append("\x562{\x3\x2\x2\x2\x563\x566\a\x41\x2\x2\x564\x565\a\x194\x2");
		sb.Append("\x2\x565\x567\a\x19B\x2\x2\x566\x564\x3\x2\x2\x2\x566\x567\x3");
		sb.Append("\x2\x2\x2\x567\x568\x3\x2\x2\x2\x568\x571\x5\x12C\x97\x2\x569");
		sb.Append("\x56E\x5~@\x2\x56A\x56B\a\x1AE\x2\x2\x56B\x56D\x5~@\x2\x56C");
		sb.Append("\x56A\x3\x2\x2\x2\x56D\x570\x3\x2\x2\x2\x56E\x56C\x3\x2\x2\x2");
		sb.Append("\x56E\x56F\x3\x2\x2\x2\x56F\x572\x3\x2\x2\x2\x570\x56E\x3\x2");
		sb.Append("\x2\x2\x571\x569\x3\x2\x2\x2\x571\x572\x3\x2\x2\x2\x572\x574");
		sb.Append("\x3\x2\x2\x2\x573\x575\a\x1AF\x2\x2\x574\x573\x3\x2\x2\x2\x574");
		sb.Append("\x575\x3\x2\x2\x2\x575\x58D\x3\x2\x2\x2\x576\x577\a\x41\x2\x2");
		sb.Append("\x577\x578\a\x1AC\x2\x2\x578\x57D\x5\x80\x41\x2\x579\x57A\a");
		sb.Append("\x1B4\x2\x2\x57A\x57C\x5\x80\x41\x2\x57B\x579\x3\x2\x2\x2\x57C");
		sb.Append("\x57F\x3\x2\x2\x2\x57D\x57B\x3\x2\x2\x2\x57D\x57E\x3\x2\x2\x2");
		sb.Append("\x57E\x580\x3\x2\x2\x2\x57F\x57D\x3\x2\x2\x2\x580\x587\a\x1AD");
		sb.Append("\x2\x2\x581\x583\a\t\x2\x2\x582\x581\x3\x2\x2\x2\x582\x583\x3");
		sb.Append("\x2\x2\x2\x583\x584\x3\x2\x2\x2\x584\x585\t\x18\x2\x2\x585\x586");
		sb.Append("\a\x19B\x2\x2\x586\x588\a\x197\x2\x2\x587\x582\x3\x2\x2\x2\x587");
		sb.Append("\x588\x3\x2\x2\x2\x588\x58A\x3\x2\x2\x2\x589\x58B\a\x1AF\x2");
		sb.Append("\x2\x58A\x589\x3\x2\x2\x2\x58A\x58B\x3\x2\x2\x2\x58B\x58D\x3");
		sb.Append("\x2\x2\x2\x58C\x563\x3\x2\x2\x2\x58C\x576\x3\x2\x2\x2\x58D}");
		sb.Append("\x3\x2\x2\x2\x58E\x58F\a\x194\x2\x2\x58F\x591\a\x19B\x2\x2\x590");
		sb.Append("\x58E\x3\x2\x2\x2\x590\x591\x3\x2\x2\x2\x591\x59B\x3\x2\x2\x2");
		sb.Append("\x592\x595\x5\xAAV\x2\x593\x595\x5\x146\xA4\x2\x594\x592\x3");
		sb.Append("\x2\x2\x2\x594\x593\x3\x2\x2\x2\x595\x597\x3\x2\x2\x2\x596\x598");
		sb.Append("\t\x19\x2\x2\x597\x596\x3\x2\x2\x2\x597\x598\x3\x2\x2\x2\x598");
		sb.Append("\x59C\x3\x2\x2\x2\x599\x59C\a\x32\x2\x2\x59A\x59C\an\x2\x2\x59B");
		sb.Append("\x594\x3\x2\x2\x2\x59B\x599\x3\x2\x2\x2\x59B\x59A\x3\x2\x2\x2");
		sb.Append("\x59C\x7F\x3\x2\x2\x2\x59D\x59E\t\x3\x2\x2\x59E\x81\x3\x2\x2");
		sb.Append("\x2\x59F\x5A1\x5\x8EH\x2\x5A0\x5A2\a\x1AF\x2\x2\x5A1\x5A0\x3");
		sb.Append("\x2\x2\x2\x5A1\x5A2\x3\x2\x2\x2\x5A2\x5D0\x3\x2\x2\x2\x5A3\x5AF");
		sb.Append("\aR\x2\x2\x5A4\x5A6\a\x5\x2\x2\x5A5\x5A7\a\x14D\x2\x2\x5A6\x5A5");
		sb.Append("\x3\x2\x2\x2\x5A6\x5A7\x3\x2\x2\x2\x5A7\x5B0\x3\x2\x2\x2\x5A8");
		sb.Append("\x5AD\x5\x84\x43\x2\x5A9\x5AA\a\x1AC\x2\x2\x5AA\x5AB\x5\x132");
		sb.Append("\x9A\x2\x5AB\x5AC\a\x1AD\x2\x2\x5AC\x5AE\x3\x2\x2\x2\x5AD\x5A9");
		sb.Append("\x3\x2\x2\x2\x5AD\x5AE\x3\x2\x2\x2\x5AE\x5B0\x3\x2\x2\x2\x5AF");
		sb.Append("\x5A4\x3\x2\x2\x2\x5AF\x5A8\x3\x2\x2\x2\x5B0\x5B3\x3\x2\x2\x2");
		sb.Append("\x5B1\x5B2\as\x2\x2\x5B2\x5B4\x5\x128\x95\x2\x5B3\x5B1\x3\x2");
		sb.Append("\x2\x2\x5B3\x5B4\x3\x2\x2\x2\x5B4\x5B5\x3\x2\x2\x2\x5B5\x5B6");
		sb.Append("\a\xAA\x2\x2\x5B6\x5BA\x5\x146\xA4\x2\x5B7\x5B8\a\xC0\x2\x2");
		sb.Append("\x5B8\x5B9\aR\x2\x2\x5B9\x5BB\ay\x2\x2\x5BA\x5B7\x3\x2\x2\x2");
		sb.Append("\x5BA\x5BB\x3\x2\x2\x2\x5BB\x5BE\x3\x2\x2\x2\x5BC\x5BD\a\t\x2");
		sb.Append("\x2\x5BD\x5BF\x5\x146\xA4\x2\x5BE\x5BC\x3\x2\x2\x2\x5BE\x5BF");
		sb.Append("\x3\x2\x2\x2\x5BF\x5C1\x3\x2\x2\x2\x5C0\x5C2\a\x1AF\x2\x2\x5C1");
		sb.Append("\x5C0\x3\x2\x2\x2\x5C1\x5C2\x3\x2\x2\x2\x5C2\x5D0\x3\x2\x2\x2");
		sb.Append("\x5C3\x5CA\a\x91\x2\x2\x5C4\x5C5\a\x1AC\x2\x2\x5C5\x5C6\a\xC0");
		sb.Append("\x2\x2\x5C6\x5C7\a\xE4\x2\x2\x5C7\x5C8\a\x19B\x2\x2\x5C8\x5C9");
		sb.Append("\a\x194\x2\x2\x5C9\x5CB\a\x1AD\x2\x2\x5CA\x5C4\x3\x2\x2\x2\x5CA");
		sb.Append("\x5CB\x3\x2\x2\x2\x5CB\x5CD\x3\x2\x2\x2\x5CC\x5CE\a\x1AF\x2");
		sb.Append("\x2\x5CD\x5CC\x3\x2\x2\x2\x5CD\x5CE\x3\x2\x2\x2\x5CE\x5D0\x3");
		sb.Append("\x2\x2\x2\x5CF\x59F\x3\x2\x2\x2\x5CF\x5A3\x3\x2\x2\x2\x5CF\x5C3");
		sb.Append("\x3\x2\x2\x2\x5D0\x83\x3\x2\x2\x2\x5D1\x5EC\a\x41\x2\x2\x5D2");
		sb.Append("\x5D3\a\xBB\x2\x2\x5D3\x5EC\x5\x146\xA4\x2\x5D4\x5D5\a\x174");
		sb.Append("\x2\x2\x5D5\x5EC\x5\x146\xA4\x2\x5D6\x5D8\a\xE3\x2\x2\x5D7\x5D9");
		sb.Append("\x5\x146\xA4\x2\x5D8\x5D7\x3\x2\x2\x2\x5D8\x5D9\x3\x2\x2\x2");
		sb.Append("\x5D9\x5EC\x3\x2\x2\x2\x5DA\x5DB\a&\x2\x2\x5DB\x5EC\t\x1A\x2");
		sb.Append("\x2\x5DC\x5EC\a\x169\x2\x2\x5DD\x5EC\a\x116\x2\x2\x5DE\x5EC");
		sb.Append("\a\x9B\x2\x2\x5DF\x5EC\a\x8C\x2\x2\x5E0\x5EC\a\\\x2\x2\x5E1");
		sb.Append("\x5E9\a\x6\x2\x2\x5E2\x5E4\a\b\x2\x2\x5E3\x5E2\x3\x2\x2\x2\x5E3");
		sb.Append("\x5E4\x3\x2\x2\x2\x5E4\x5E7\x3\x2\x2\x2\x5E5\x5E8\x5\x146\xA4");
		sb.Append("\x2\x5E6\x5E8\a.\x2\x2\x5E7\x5E5\x3\x2\x2\x2\x5E7\x5E6\x3\x2");
		sb.Append("\x2\x2\x5E8\x5EA\x3\x2\x2\x2\x5E9\x5E3\x3\x2\x2\x2\x5E9\x5EA");
		sb.Append("\x3\x2\x2\x2\x5EA\x5EC\x3\x2\x2\x2\x5EB\x5D1\x3\x2\x2\x2\x5EB");
		sb.Append("\x5D2\x3\x2\x2\x2\x5EB\x5D4\x3\x2\x2\x2\x5EB\x5D6\x3\x2\x2\x2");
		sb.Append("\x5EB\x5DA\x3\x2\x2\x2\x5EB\x5DC\x3\x2\x2\x2\x5EB\x5DD\x3\x2");
		sb.Append("\x2\x2\x5EB\x5DE\x3\x2\x2\x2\x5EB\x5DF\x3\x2\x2\x2\x5EB\x5E0");
		sb.Append("\x3\x2\x2\x2\x5EB\x5E1\x3\x2\x2\x2\x5EC\x85\x3\x2\x2\x2\x5ED");
		sb.Append("\x5EE\a\xA0\x2\x2\x5EE\x5F1\a\x194\x2\x2\x5EF\x5F0\a\x1A7\x2");
		sb.Append("\x2\x5F0\x5F2\x5\x146\xA4\x2\x5F1\x5EF\x3\x2\x2\x2\x5F1\x5F2");
		sb.Append("\x3\x2\x2\x2\x5F2\x5F3\x3\x2\x2\x2\x5F3\x5F4\a\x19B\x2\x2\x5F4");
		sb.Append("\x5F6\x5\xACW\x2\x5F5\x5F7\a\x1AF\x2\x2\x5F6\x5F5\x3\x2\x2\x2");
		sb.Append("\x5F6\x5F7\x3\x2\x2\x2\x5F7\x615\x3\x2\x2\x2\x5F8\x5F9\a\xA0");
		sb.Append("\x2\x2\x5F9\x5FA\a\x194\x2\x2\x5FA\x5FB\x5\x14C\xA7\x2\x5FB");
		sb.Append("\x5FD\x5\xACW\x2\x5FC\x5FE\a\x1AF\x2\x2\x5FD\x5FC\x3\x2\x2\x2");
		sb.Append("\x5FD\x5FE\x3\x2\x2\x2\x5FE\x615\x3\x2\x2\x2\x5FF\x600\a\xA0");
		sb.Append("\x2\x2\x600\x601\a\x194\x2\x2\x601\x602\a\x19B\x2\x2\x602\x603");
		sb.Append("\a-\x2\x2\x603\x60E\x5\xA4S\x2\x604\x60C\aI\x2\x2\x605\x606");
		sb.Append("\a\x89\x2\x2\x606\x60D\a\x141\x2\x2\x607\x60A\a\xB5\x2\x2\x608");
		sb.Append("\x609\ap\x2\x2\x609\x60B\x5\x132\x9A\x2\x60A\x608\x3\x2\x2\x2");
		sb.Append("\x60A\x60B\x3\x2\x2\x2\x60B\x60D\x3\x2\x2\x2\x60C\x605\x3\x2");
		sb.Append("\x2\x2\x60C\x607\x3\x2\x2\x2\x60D\x60F\x3\x2\x2\x2\x60E\x604");
		sb.Append("\x3\x2\x2\x2\x60E\x60F\x3\x2\x2\x2\x60F\x611\x3\x2\x2\x2\x610");
		sb.Append("\x612\a\x1AF\x2\x2\x611\x610\x3\x2\x2\x2\x611\x612\x3\x2\x2");
		sb.Append("\x2\x612\x615\x3\x2\x2\x2\x613\x615\x5\xA8U\x2\x614\x5ED\x3");
		sb.Append("\x2\x2\x2\x614\x5F8\x3\x2\x2\x2\x614\x5FF\x3\x2\x2\x2\x614\x613");
		sb.Append("\x3\x2\x2\x2\x615\x87\x3\x2\x2\x2\x616\x617\a\r\x2\x2\x617\x618");
		sb.Append("\a\x38\x2\x2\x618\x61B\t\x1B\x2\x2\x619\x61C\x5\x146\xA4\x2");
		sb.Append("\x61A\x61C\a\x194\x2\x2\x61B\x619\x3\x2\x2\x2\x61B\x61A\x3\x2");
		sb.Append("\x2\x2\x61B\x61C\x3\x2\x2\x2\x61C\x61E\x3\x2\x2\x2\x61D\x61F");
		sb.Append("\a\x1AF\x2\x2\x61E\x61D\x3\x2\x2\x2\x61E\x61F\x3\x2\x2\x2\x61F");
		sb.Append("\x664\x3\x2\x2\x2\x620\x621\a\r\x2\x2\x621\x62B\t\x1B\x2\x2");
		sb.Append("\x622\x625\x5\x146\xA4\x2\x623\x625\a\x194\x2\x2\x624\x622\x3");
		sb.Append("\x2\x2\x2\x624\x623\x3\x2\x2\x2\x625\x629\x3\x2\x2\x2\x626\x627");
		sb.Append("\a\xC0\x2\x2\x627\x628\a\x125\x2\x2\x628\x62A\a\x197\x2\x2\x629");
		sb.Append("\x626\x3\x2\x2\x2\x629\x62A\x3\x2\x2\x2\x62A\x62C\x3\x2\x2\x2");
		sb.Append("\x62B\x624\x3\x2\x2\x2\x62B\x62C\x3\x2\x2\x2\x62C\x62E\x3\x2");
		sb.Append("\x2\x2\x62D\x62F\a\x1AF\x2\x2\x62E\x62D\x3\x2\x2\x2\x62E\x62F");
		sb.Append("\x3\x2\x2\x2\x62F\x664\x3\x2\x2\x2\x630\x631\a\x1E\x2\x2\x631");
		sb.Append("\x63E\t\x1B\x2\x2\x632\x635\x5\x146\xA4\x2\x633\x635\a\x194");
		sb.Append("\x2\x2\x634\x632\x3\x2\x2\x2\x634\x633\x3\x2\x2\x2\x635\x63C");
		sb.Append("\x3\x2\x2\x2\x636\x637\a\xC0\x2\x2\x637\x638\a\x1AC\x2\x2\x638");
		sb.Append("\x639\a\xF3\x2\x2\x639\x63A\a\x19B\x2\x2\x63A\x63B\t\r\x2\x2");
		sb.Append("\x63B\x63D\a\x1AD\x2\x2\x63C\x636\x3\x2\x2\x2\x63C\x63D\x3\x2");
		sb.Append("\x2\x2\x63D\x63F\x3\x2\x2\x2\x63E\x634\x3\x2\x2\x2\x63E\x63F");
		sb.Append("\x3\x2\x2\x2\x63F\x641\x3\x2\x2\x2\x640\x642\a\x1AF\x2\x2\x641");
		sb.Append("\x640\x3\x2\x2\x2\x641\x642\x3\x2\x2\x2\x642\x664\x3\x2\x2\x2");
		sb.Append("\x643\x645\a\x1E\x2\x2\x644\x646\a\x18B\x2\x2\x645\x644\x3\x2");
		sb.Append("\x2\x2\x645\x646\x3\x2\x2\x2\x646\x648\x3\x2\x2\x2\x647\x649");
		sb.Append("\a\x1AF\x2\x2\x648\x647\x3\x2\x2\x2\x648\x649\x3\x2\x2\x2\x649");
		sb.Append("\x664\x3\x2\x2\x2\x64A\x64B\a\x94\x2\x2\x64B\x64E\t\x1B\x2\x2");
		sb.Append("\x64C\x64F\x5\x146\xA4\x2\x64D\x64F\a\x194\x2\x2\x64E\x64C\x3");
		sb.Append("\x2\x2\x2\x64E\x64D\x3\x2\x2\x2\x64E\x64F\x3\x2\x2\x2\x64F\x651");
		sb.Append("\x3\x2\x2\x2\x650\x652\a\x1AF\x2\x2\x651\x650\x3\x2\x2\x2\x651");
		sb.Append("\x652\x3\x2\x2\x2\x652\x664\x3\x2\x2\x2\x653\x655\a\x94\x2\x2");
		sb.Append("\x654\x656\a\x18B\x2\x2\x655\x654\x3\x2\x2\x2\x655\x656\x3\x2");
		sb.Append("\x2\x2\x656\x658\x3\x2\x2\x2\x657\x659\a\x1AF\x2\x2\x658\x657");
		sb.Append("\x3\x2\x2\x2\x658\x659\x3\x2\x2\x2\x659\x664\x3\x2\x2\x2\x65A");
		sb.Append("\x65B\a\x98\x2\x2\x65B\x65E\t\x1B\x2\x2\x65C\x65F\x5\x146\xA4");
		sb.Append("\x2\x65D\x65F\a\x194\x2\x2\x65E\x65C\x3\x2\x2\x2\x65E\x65D\x3");
		sb.Append("\x2\x2\x2\x65E\x65F\x3\x2\x2\x2\x65F\x661\x3\x2\x2\x2\x660\x662");
		sb.Append("\a\x1AF\x2\x2\x661\x660\x3\x2\x2\x2\x661\x662\x3\x2\x2\x2\x662");
		sb.Append("\x664\x3\x2\x2\x2\x663\x616\x3\x2\x2\x2\x663\x620\x3\x2\x2\x2");
		sb.Append("\x663\x630\x3\x2\x2\x2\x663\x643\x3\x2\x2\x2\x663\x64A\x3\x2");
		sb.Append("\x2\x2\x663\x653\x3\x2\x2\x2\x663\x65A\x3\x2\x2\x2\x664\x89");
		sb.Append("\x3\x2\x2\x2\x665\x667\a\x10D\x2\x2\x666\x668\a\x195\x2\x2\x667");
		sb.Append("\x666\x3\x2\x2\x2\x667\x668\x3\x2\x2\x2\x668\x8B\x3\x2\x2\x2");
		sb.Append("\x669\x66A\a\xB7\x2\x2\x66A\x66C\x5\x146\xA4\x2\x66B\x66D\a");
		sb.Append("\x1AF\x2\x2\x66C\x66B\x3\x2\x2\x2\x66C\x66D\x3\x2\x2\x2\x66D");
		sb.Append("\x8D\x3\x2\x2\x2\x66E\x66F\a\x41\x2\x2\x66F\x670\a\t\x2\x2\x670");
		sb.Append("\x671\t\x1C\x2\x2\x671\x8F\x3\x2\x2\x2\x672\x674\a\x194\x2\x2");
		sb.Append("\x673\x675\a\t\x2\x2\x674\x673\x3\x2\x2\x2\x674\x675\x3\x2\x2");
		sb.Append("\x2\x675\x676\x3\x2\x2\x2\x676\x679\x5\x13E\xA0\x2\x677\x678");
		sb.Append("\a\x19B\x2\x2\x678\x67A\x5\xACW\x2\x679\x677\x3\x2\x2\x2\x679");
		sb.Append("\x67A\x3\x2\x2\x2\x67A\x91\x3\x2\x2\x2\x67B\x67C\a\xA6\x2\x2");
		sb.Append("\x67C\x67D\a\x1AC\x2\x2\x67D\x67E\x5\x94K\x2\x67E\x67F\a\x1AD");
		sb.Append("\x2\x2\x67F\x93\x3\x2\x2\x2\x680\x687\x5\x96L\x2\x681\x683\a");
		sb.Append("\x1AE\x2\x2\x682\x681\x3\x2\x2\x2\x682\x683\x3\x2\x2\x2\x683");
		sb.Append("\x684\x3\x2\x2\x2\x684\x686\x5\x96L\x2\x685\x682\x3\x2\x2\x2");
		sb.Append("\x686\x689\x3\x2\x2\x2\x687\x685\x3\x2\x2\x2\x687\x688\x3\x2");
		sb.Append("\x2\x2\x688\x95\x3\x2\x2\x2\x689\x687\x3\x2\x2\x2\x68A\x68D");
		sb.Append("\x5\x98M\x2\x68B\x68D\x5\x9CO\x2\x68C\x68A\x3\x2\x2\x2\x68C");
		sb.Append("\x68B\x3\x2\x2\x2\x68D\x97\x3\x2\x2\x2\x68E\x692\x5\x146\xA4");
		sb.Append("\x2\x68F\x693\x5\x13E\xA0\x2\x690\x691\a\t\x2\x2\x691\x693\x5");
		sb.Append("\xACW\x2\x692\x68F\x3\x2\x2\x2\x692\x690\x3\x2\x2\x2\x693\x696");
		sb.Append("\x3\x2\x2\x2\x694\x695\a\x1C\x2\x2\x695\x697\x5\x146\xA4\x2");
		sb.Append("\x696\x694\x3\x2\x2\x2\x696\x697\x3\x2\x2\x2\x697\x699\x3\x2");
		sb.Append("\x2\x2\x698\x69A\x5\x13A\x9E\x2\x699\x698\x3\x2\x2\x2\x699\x69A");
		sb.Append("\x3\x2\x2\x2\x69A\x6B2\x3\x2\x2\x2\x69B\x69C\a \x2\x2\x69C\x69E");
		sb.Append("\x5\x146\xA4\x2\x69D\x69B\x3\x2\x2\x2\x69D\x69E\x3\x2\x2\x2");
		sb.Append("\x69E\x69F\x3\x2\x2\x2\x69F\x6A0\a\x32\x2\x2\x6A0\x6A3\x5\xAE");
		sb.Append("X\x2\x6A1\x6A2\a\xC0\x2\x2\x6A2\x6A4\a\xB9\x2\x2\x6A3\x6A1\x3");
		sb.Append("\x2\x2\x2\x6A3\x6A4\x3\x2\x2\x2\x6A4\x6B3\x3\x2\x2\x2\x6A5\x6AB");
		sb.Append("\aU\x2\x2\x6A6\x6A7\a\x1AC\x2\x2\x6A7\x6A8\a\x195\x2\x2\x6A8");
		sb.Append("\x6A9\a\x1AE\x2\x2\x6A9\x6AA\a\x195\x2\x2\x6AA\x6AC\a\x1AD\x2");
		sb.Append("\x2\x6AB\x6A6\x3\x2\x2\x2\x6AB\x6AC\x3\x2\x2\x2\x6AC\x6B0\x3");
		sb.Append("\x2\x2\x2\x6AD\x6AE\am\x2\x2\x6AE\x6AF\aI\x2\x2\x6AF\x6B1\a");
		sb.Append("\x8D\x2\x2\x6B0\x6AD\x3\x2\x2\x2\x6B0\x6B1\x3\x2\x2\x2\x6B1");
		sb.Append("\x6B3\x3\x2\x2\x2\x6B2\x69D\x3\x2\x2\x2\x6B2\x6A5\x3\x2\x2\x2");
		sb.Append("\x6B2\x6B3\x3\x2\x2\x2\x6B3\x6B5\x3\x2\x2\x2\x6B4\x6B6\a\x96");
		sb.Append("\x2\x2\x6B5\x6B4\x3\x2\x2\x2\x6B5\x6B6\x3\x2\x2\x2\x6B6\x6BA");
		sb.Append("\x3\x2\x2\x2\x6B7\x6B9\x5\x9AN\x2\x6B8\x6B7\x3\x2\x2\x2\x6B9");
		sb.Append("\x6BC\x3\x2\x2\x2\x6BA\x6B8\x3\x2\x2\x2\x6BA\x6BB\x3\x2\x2\x2");
		sb.Append("\x6BB\x99\x3\x2\x2\x2\x6BC\x6BA\x3\x2\x2\x2\x6BD\x6BE\a \x2");
		sb.Append("\x2\x6BE\x6C0\x5\x146\xA4\x2\x6BF\x6BD\x3\x2\x2\x2\x6BF\x6C0");
		sb.Append("\x3\x2\x2\x2\x6C0\x6C2\x3\x2\x2\x2\x6C1\x6C3\x5\x13A\x9E\x2");
		sb.Append("\x6C2\x6C1\x3\x2\x2\x2\x6C2\x6C3\x3\x2\x2\x2\x6C3\x6D9\x3\x2");
		sb.Append("\x2\x2\x6C4\x6C5\a\x83\x2\x2\x6C5\x6C8\a\x61\x2\x2\x6C6\x6C8");
		sb.Append("\a\xB3\x2\x2\x6C7\x6C4\x3\x2\x2\x2\x6C7\x6C6\x3\x2\x2\x2\x6C8");
		sb.Append("\x6CA\x3\x2\x2\x2\x6C9\x6CB\x5\x138\x9D\x2\x6CA\x6C9\x3\x2\x2");
		sb.Append("\x2\x6CA\x6CB\x3\x2\x2\x2\x6CB\x6CD\x3\x2\x2\x2\x6CC\x6CE\x5");
		sb.Append("\x9EP\x2\x6CD\x6CC\x3\x2\x2\x2\x6CD\x6CE\x3\x2\x2\x2\x6CE\x6DA");
		sb.Append("\x3\x2\x2\x2\x6CF\x6D3\a\x17\x2\x2\x6D0\x6D1\am\x2\x2\x6D1\x6D2");
		sb.Append("\aI\x2\x2\x6D2\x6D4\a\x8D\x2\x2\x6D3\x6D0\x3\x2\x2\x2\x6D3\x6D4");
		sb.Append("\x3\x2\x2\x2\x6D4\x6D5\x3\x2\x2\x2\x6D5\x6D6\a\x1AC\x2\x2\x6D6");
		sb.Append("\x6D7\x5\xBA^\x2\x6D7\x6D8\a\x1AD\x2\x2\x6D8\x6DA\x3\x2\x2\x2");
		sb.Append("\x6D9\x6C7\x3\x2\x2\x2\x6D9\x6CF\x3\x2\x2\x2\x6DA\x9B\x3\x2");
		sb.Append("\x2\x2\x6DB\x6DC\a \x2\x2\x6DC\x6DE\x5\x146\xA4\x2\x6DD\x6DB");
		sb.Append("\x3\x2\x2\x2\x6DD\x6DE\x3\x2\x2\x2\x6DE\x6FE\x3\x2\x2\x2\x6DF");
		sb.Append("\x6E0\a\x83\x2\x2\x6E0\x6E3\a\x61\x2\x2\x6E1\x6E3\a\xB3\x2\x2");
		sb.Append("\x6E2\x6DF\x3\x2\x2\x2\x6E2\x6E1\x3\x2\x2\x2\x6E3\x6E5\x3\x2");
		sb.Append("\x2\x2\x6E4\x6E6\x5\x138\x9D\x2\x6E5\x6E4\x3\x2\x2\x2\x6E5\x6E6");
		sb.Append("\x3\x2\x2\x2\x6E6\x6E7\x3\x2\x2\x2\x6E7\x6E8\a\x1AC\x2\x2\x6E8");
		sb.Append("\x6EA\x5\x132\x9A\x2\x6E9\x6EB\t\a\x2\x2\x6EA\x6E9\x3\x2\x2");
		sb.Append("\x2\x6EA\x6EB\x3\x2\x2\x2\x6EB\x6EC\x3\x2\x2\x2\x6EC\x6EE\a");
		sb.Append("\x1AD\x2\x2\x6ED\x6EF\x5\x9EP\x2\x6EE\x6ED\x3\x2\x2\x2\x6EE");
		sb.Append("\x6EF\x3\x2\x2\x2\x6EF\x6F2\x3\x2\x2\x2\x6F0\x6F1\as\x2\x2\x6F1");
		sb.Append("\x6F3\x5\x146\xA4\x2\x6F2\x6F0\x3\x2\x2\x2\x6F2\x6F3\x3\x2\x2");
		sb.Append("\x2\x6F3\x6FF\x3\x2\x2\x2\x6F4\x6F8\a\x17\x2\x2\x6F5\x6F6\a");
		sb.Append("m\x2\x2\x6F6\x6F7\aI\x2\x2\x6F7\x6F9\a\x8D\x2\x2\x6F8\x6F5\x3");
		sb.Append("\x2\x2\x2\x6F8\x6F9\x3\x2\x2\x2\x6F9\x6FA\x3\x2\x2\x2\x6FA\x6FB");
		sb.Append("\a\x1AC\x2\x2\x6FB\x6FC\x5\xBA^\x2\x6FC\x6FD\a\x1AD\x2\x2\x6FD");
		sb.Append("\x6FF\x3\x2\x2\x2\x6FE\x6E2\x3\x2\x2\x2\x6FE\x6F4\x3\x2\x2\x2");
		sb.Append("\x6FF\x9D\x3\x2\x2\x2\x700\x701\a\xC0\x2\x2\x701\x702\a\x1AC");
		sb.Append("\x2\x2\x702\x707\x5\xA0Q\x2\x703\x704\a\x1AE\x2\x2\x704\x706");
		sb.Append("\x5\xA0Q\x2\x705\x703\x3\x2\x2\x2\x706\x709\x3\x2\x2\x2\x707");
		sb.Append("\x705\x3\x2\x2\x2\x707\x708\x3\x2\x2\x2\x708\x70A\x3\x2\x2\x2");
		sb.Append("\x709\x707\x3\x2\x2\x2\x70A\x70B\a\x1AD\x2\x2\x70B\x9F\x3\x2");
		sb.Append("\x2\x2\x70C\x70D\x5\x148\xA5\x2\x70D\x711\a\x19B\x2\x2\x70E");
		sb.Append("\x712\x5\x148\xA5\x2\x70F\x712\x5\x136\x9C\x2\x710\x712\a\x195");
		sb.Append("\x2\x2\x711\x70E\x3\x2\x2\x2\x711\x70F\x3\x2\x2\x2\x711\x710");
		sb.Append("\x3\x2\x2\x2\x712\xA1\x3\x2\x2\x2\x713\x714\a\x31\x2\x2\x714");
		sb.Append("\x734\x5\x134\x9B\x2\x715\x71F\a-\x2\x2\x716\x71D\x5\xA4S\x2");
		sb.Append("\x717\x718\aI\x2\x2\x718\x71B\a\xB5\x2\x2\x719\x71A\ap\x2\x2");
		sb.Append("\x71A\x71C\x5\x132\x9A\x2\x71B\x719\x3\x2\x2\x2\x71B\x71C\x3");
		sb.Append("\x2\x2\x2\x71C\x71E\x3\x2\x2\x2\x71D\x717\x3\x2\x2\x2\x71D\x71E");
		sb.Append("\x3\x2\x2\x2\x71E\x720\x3\x2\x2\x2\x71F\x716\x3\x2\x2\x2\x71F");
		sb.Append("\x720\x3\x2\x2\x2\x720\x735\x3\x2\x2\x2\x721\x723\a\x118\x2");
		sb.Append("\x2\x722\x721\x3\x2\x2\x2\x722\x723\x3\x2\x2\x2\x723\x725\x3");
		sb.Append("\x2\x2\x2\x724\x726\a\x164\x2\x2\x725\x724\x3\x2\x2\x2\x725");
		sb.Append("\x726\x3\x2\x2\x2\x726\x727\x3\x2\x2\x2\x727\x728\a-\x2\x2\x728");
		sb.Append("\x729\aI\x2\x2\x729\x732\x5\x1A\xE\x2\x72A\x730\aI\x2\x2\x72B");
		sb.Append("\x72C\a\x89\x2\x2\x72C\x731\a\x141\x2\x2\x72D\x731\a\xB5\x2");
		sb.Append("\x2\x72E\x72F\ap\x2\x2\x72F\x731\x5\x132\x9A\x2\x730\x72B\x3");
		sb.Append("\x2\x2\x2\x730\x72D\x3\x2\x2\x2\x730\x72E\x3\x2\x2\x2\x731\x733");
		sb.Append("\x3\x2\x2\x2\x732\x72A\x3\x2\x2\x2\x732\x733\x3\x2\x2\x2\x733");
		sb.Append("\x735\x3\x2\x2\x2\x734\x715\x3\x2\x2\x2\x734\x722\x3\x2\x2\x2");
		sb.Append("\x735\x737\x3\x2\x2\x2\x736\x738\a\x1AF\x2\x2\x737\x736\x3\x2");
		sb.Append("\x2\x2\x737\x738\x3\x2\x2\x2\x738\xA3\x3\x2\x2\x2\x739\x73B");
		sb.Append("\t\xF\x2\x2\x73A\x739\x3\x2\x2\x2\x73A\x73B\x3\x2\x2\x2\x73B");
		sb.Append("\x73D\x3\x2\x2\x2\x73C\x73E\t\x1D\x2\x2\x73D\x73C\x3\x2\x2\x2");
		sb.Append("\x73D\x73E\x3\x2\x2\x2\x73E\x740\x3\x2\x2\x2\x73F\x741\t\x1E");
		sb.Append("\x2\x2\x740\x73F\x3\x2\x2\x2\x740\x741\x3\x2\x2\x2\x741\x743");
		sb.Append("\x3\x2\x2\x2\x742\x744\t\x1F\x2\x2\x743\x742\x3\x2\x2\x2\x743");
		sb.Append("\x744\x3\x2\x2\x2\x744\x746\x3\x2\x2\x2\x745\x747\a\x181\x2");
		sb.Append("\x2\x746\x745\x3\x2\x2\x2\x746\x747\x3\x2\x2\x2\x747\x748\x3");
		sb.Append("\x2\x2\x2\x748\x749\aI\x2\x2\x749\x74A\x5\x1A\xE\x2\x74A\xA5");
		sb.Append("\x3\x2\x2\x2\x74B\x755\a\x45\x2\x2\x74C\x753\a\x135\x2\x2\x74D");
		sb.Append("\x753\a\x14C\x2\x2\x74E\x753\a\x105\x2\x2\x74F\x753\a\x11F\x2");
		sb.Append("\x2\x750\x751\t \x2\x2\x751\x753\x5\xACW\x2\x752\x74C\x3\x2");
		sb.Append("\x2\x2\x752\x74D\x3\x2\x2\x2\x752\x74E\x3\x2\x2\x2\x752\x74F");
		sb.Append("\x3\x2\x2\x2\x752\x750\x3\x2\x2\x2\x752\x753\x3\x2\x2\x2\x753");
		sb.Append("\x754\x3\x2\x2\x2\x754\x756\aN\x2\x2\x755\x752\x3\x2\x2\x2\x755");
		sb.Append("\x756\x3\x2\x2\x2\x756\x758\x3\x2\x2\x2\x757\x759\a\x10C\x2");
		sb.Append("\x2\x758\x757\x3\x2\x2\x2\x758\x759\x3\x2\x2\x2\x759\x75A\x3");
		sb.Append("\x2\x2\x2\x75A\x764\x5\x134\x9B\x2\x75B\x75C\a^\x2\x2\x75C\x761");
		sb.Append("\a\x194\x2\x2\x75D\x75E\a\x1AE\x2\x2\x75E\x760\a\x194\x2\x2");
		sb.Append("\x75F\x75D\x3\x2\x2\x2\x760\x763\x3\x2\x2\x2\x761\x75F\x3\x2");
		sb.Append("\x2\x2\x761\x762\x3\x2\x2\x2\x762\x765\x3\x2\x2\x2\x763\x761");
		sb.Append("\x3\x2\x2\x2\x764\x75B\x3\x2\x2\x2\x764\x765\x3\x2\x2\x2\x765");
		sb.Append("\x767\x3\x2\x2\x2\x766\x768\a\x1AF\x2\x2\x767\x766\x3\x2\x2");
		sb.Append("\x2\x767\x768\x3\x2\x2\x2\x768\xA7\x3\x2\x2\x2\x769\x76A\a\xA0");
		sb.Append("\x2\x2\x76A\x76E\x5\x146\xA4\x2\x76B\x76F\x5\x146\xA4\x2\x76C");
		sb.Append("\x76F\x5\xAAV\x2\x76D\x76F\x5\x136\x9C\x2\x76E\x76B\x3\x2\x2");
		sb.Append("\x2\x76E\x76C\x3\x2\x2\x2\x76E\x76D\x3\x2\x2\x2\x76F\x771\x3");
		sb.Append("\x2\x2\x2\x770\x772\a\x1AF\x2\x2\x771\x770\x3\x2\x2\x2\x771");
		sb.Append("\x772\x3\x2\x2\x2\x772\x795\x3\x2\x2\x2\x773\x774\a\xA0\x2\x2");
		sb.Append("\x774\x775\a\xAD\x2\x2\x775\x776\a\x11A\x2\x2\x776\x77F\a\x120");
		sb.Append("\x2\x2\x777\x778\a\x89\x2\x2\x778\x780\a\x183\x2\x2\x779\x77A");
		sb.Append("\a\x89\x2\x2\x77A\x780\a\xDF\x2\x2\x77B\x77C\a\x15A\x2\x2\x77C");
		sb.Append("\x780\a\x89\x2\x2\x77D\x780\a\x16D\x2\x2\x77E\x780\a\x168\x2");
		sb.Append("\x2\x77F\x777\x3\x2\x2\x2\x77F\x779\x3\x2\x2\x2\x77F\x77B\x3");
		sb.Append("\x2\x2\x2\x77F\x77D\x3\x2\x2\x2\x77F\x77E\x3\x2\x2\x2\x780\x782");
		sb.Append("\x3\x2\x2\x2\x781\x783\a\x1AF\x2\x2\x782\x781\x3\x2\x2\x2\x782");
		sb.Append("\x783\x3\x2\x2\x2\x783\x795\x3\x2\x2\x2\x784\x785\a\xA0\x2\x2");
		sb.Append("\x785\x786\aW\x2\x2\x786\x787\x5\x128\x95\x2\x787\x789\x5\x136");
		sb.Append("\x9C\x2\x788\x78A\a\x1AF\x2\x2\x789\x788\x3\x2\x2\x2\x789\x78A");
		sb.Append("\x3\x2\x2\x2\x78A\x795\x3\x2\x2\x2\x78B\x78C\a\xA0\x2\x2\x78C");
		sb.Append("\x78D\a\xC7\x2\x2\x78D\x795\x5\x136\x9C\x2\x78E\x78F\a\xA0\x2");
		sb.Append("\x2\x78F\x790\a\x14E\x2\x2\x790\x795\x5\x136\x9C\x2\x791\x792");
		sb.Append("\a\xA0\x2\x2\x792\x793\a\xC9\x2\x2\x793\x795\x5\x136\x9C\x2");
		sb.Append("\x794\x769\x3\x2\x2\x2\x794\x773\x3\x2\x2\x2\x794\x784\x3\x2");
		sb.Append("\x2\x2\x794\x78B\x3\x2\x2\x2\x794\x78E\x3\x2\x2\x2\x794\x791");
		sb.Append("\x3\x2\x2\x2\x795\xA9\x3\x2\x2\x2\x796\x799\x5\x142\xA2\x2\x797");
		sb.Append("\x799\a\x194\x2\x2\x798\x796\x3\x2\x2\x2\x798\x797\x3\x2\x2");
		sb.Append("\x2\x799\xAB\x3\x2\x2\x2\x79A\x79B\bW\x1\x2\x79B\x7C8\a\x32");
		sb.Append("\x2\x2\x79C\x7C8\an\x2\x2\x79D\x7C8\a\x194\x2\x2\x79E\x7C8\x5");
		sb.Append("\x142\xA2\x2\x79F\x7C8\x5\xF0y\x2\x7A0\x7A1\a\x14\x2\x2\x7A1");
		sb.Append("\x7A3\x5\xACW\x2\x7A2\x7A4\x5\xF2z\x2\x7A3\x7A2\x3\x2\x2\x2");
		sb.Append("\x7A4\x7A5\x3\x2\x2\x2\x7A5\x7A3\x3\x2\x2\x2\x7A5\x7A6\x3\x2");
		sb.Append("\x2\x2\x7A6\x7A9\x3\x2\x2\x2\x7A7\x7A8\a<\x2\x2\x7A8\x7AA\x5");
		sb.Append("\xACW\x2\x7A9\x7A7\x3\x2\x2\x2\x7A9\x7AA\x3\x2\x2\x2\x7AA\x7AB");
		sb.Append("\x3\x2\x2\x2\x7AB\x7AC\a=\x2\x2\x7AC\x7C8\x3\x2\x2\x2\x7AD\x7AF");
		sb.Append("\a\x14\x2\x2\x7AE\x7B0\x5\xF4{\x2\x7AF\x7AE\x3\x2\x2\x2\x7B0");
		sb.Append("\x7B1\x3\x2\x2\x2\x7B1\x7AF\x3\x2\x2\x2\x7B1\x7B2\x3\x2\x2\x2");
		sb.Append("\x7B2\x7B5\x3\x2\x2\x2\x7B3\x7B4\a<\x2\x2\x7B4\x7B6\x5\xACW");
		sb.Append("\x2\x7B5\x7B3\x3\x2\x2\x2\x7B5\x7B6\x3\x2\x2\x2\x7B6\x7B7\x3");
		sb.Append("\x2\x2\x2\x7B7\x7B8\a=\x2\x2\x7B8\x7C8\x3\x2\x2\x2\x7B9\x7C8");
		sb.Append("\x5\x130\x99\x2\x7BA\x7BB\a\x1AC\x2\x2\x7BB\x7BC\x5\xACW\x2");
		sb.Append("\x7BC\x7BD\a\x1AD\x2\x2\x7BD\x7C8\x3\x2\x2\x2\x7BE\x7BF\a\x1AC");
		sb.Append("\x2\x2\x7BF\x7C0\x5\xB0Y\x2\x7C0\x7C1\a\x1AD\x2\x2\x7C1\x7C8");
		sb.Append("\x3\x2\x2\x2\x7C2\x7C3\a\x1B6\x2\x2\x7C3\x7C8\x5\xACW\b\x7C4");
		sb.Append("\x7C5\t!\x2\x2\x7C5\x7C8\x5\xACW\x6\x7C6\x7C8\x5\x110\x89\x2");
		sb.Append("\x7C7\x79A\x3\x2\x2\x2\x7C7\x79C\x3\x2\x2\x2\x7C7\x79D\x3\x2");
		sb.Append("\x2\x2\x7C7\x79E\x3\x2\x2\x2\x7C7\x79F\x3\x2\x2\x2\x7C7\x7A0");
		sb.Append("\x3\x2\x2\x2\x7C7\x7AD\x3\x2\x2\x2\x7C7\x7B9\x3\x2\x2\x2\x7C7");
		sb.Append("\x7BA\x3\x2\x2\x2\x7C7\x7BE\x3\x2\x2\x2\x7C7\x7C2\x3\x2\x2\x2");
		sb.Append("\x7C7\x7C4\x3\x2\x2\x2\x7C7\x7C6\x3\x2\x2\x2\x7C8\x7D8\x3\x2");
		sb.Append("\x2\x2\x7C9\x7CA\f\a\x2\x2\x7CA\x7CB\t\"\x2\x2\x7CB\x7D7\x5");
		sb.Append("\xACW\b\x7CC\x7CD\f\x5\x2\x2\x7CD\x7CE\t#\x2\x2\x7CE\x7D7\x5");
		sb.Append("\xACW\x6\x7CF\x7D0\f\x4\x2\x2\x7D0\x7D1\x5\x14A\xA6\x2\x7D1");
		sb.Append("\x7D2\x5\xACW\x5\x7D2\x7D7\x3\x2\x2\x2\x7D3\x7D4\f\xE\x2\x2");
		sb.Append("\x7D4\x7D5\a\x1C\x2\x2\x7D5\x7D7\x5\x146\xA4\x2\x7D6\x7C9\x3");
		sb.Append("\x2\x2\x2\x7D6\x7CC\x3\x2\x2\x2\x7D6\x7CF\x3\x2\x2\x2\x7D6\x7D3");
		sb.Append("\x3\x2\x2\x2\x7D7\x7DA\x3\x2\x2\x2\x7D8\x7D6\x3\x2\x2\x2\x7D8");
		sb.Append("\x7D9\x3\x2\x2\x2\x7D9\xAD\x3\x2\x2\x2\x7DA\x7D8\x3\x2\x2\x2");
		sb.Append("\x7DB\x7E4\an\x2\x2\x7DC\x7E4\x5\x142\xA2\x2\x7DD\x7E4\x5\xF0");
		sb.Append("y\x2\x7DE\x7E4\a\x194\x2\x2\x7DF\x7E0\a\x1AC\x2\x2\x7E0\x7E1");
		sb.Append("\x5\xAEX\x2\x7E1\x7E2\a\x1AD\x2\x2\x7E2\x7E4\x3\x2\x2\x2\x7E3");
		sb.Append("\x7DB\x3\x2\x2\x2\x7E3\x7DC\x3\x2\x2\x2\x7E3\x7DD\x3\x2\x2\x2");
		sb.Append("\x7E3\x7DE\x3\x2\x2\x2\x7E3\x7DF\x3\x2\x2\x2\x7E4\xAF\x3\x2");
		sb.Append("\x2\x2\x7E5\x7E6\x5\x1A\xE\x2\x7E6\xB1\x3\x2\x2\x2\x7E7\x7EA");
		sb.Append("\a\xC0\x2\x2\x7E8\x7E9\a\x18D\x2\x2\x7E9\x7EB\a\x1AE\x2\x2\x7EA");
		sb.Append("\x7E8\x3\x2\x2\x2\x7EA\x7EB\x3\x2\x2\x2\x7EB\x7EC\x3\x2\x2\x2");
		sb.Append("\x7EC\x7F1\x5\xB4[\x2\x7ED\x7EE\a\x1AE\x2\x2\x7EE\x7F0\x5\xB4");
		sb.Append("[\x2\x7EF\x7ED\x3\x2\x2\x2\x7F0\x7F3\x3\x2\x2\x2\x7F1\x7EF\x3");
		sb.Append("\x2\x2\x2\x7F1\x7F2\x3\x2\x2\x2\x7F2\xB3\x3\x2\x2\x2\x7F3\x7F1");
		sb.Append("\x3\x2\x2\x2\x7F4\x7F9\x5\x146\xA4\x2\x7F5\x7F6\a\x1AC\x2\x2");
		sb.Append("\x7F6\x7F7\x5\x132\x9A\x2\x7F7\x7F8\a\x1AD\x2\x2\x7F8\x7FA\x3");
		sb.Append("\x2\x2\x2\x7F9\x7F5\x3\x2\x2\x2\x7F9\x7FA\x3\x2\x2\x2\x7FA\x7FB");
		sb.Append("\x3\x2\x2\x2\x7FB\x7FC\a\t\x2\x2\x7FC\x7FD\a\x1AC\x2\x2\x7FD");
		sb.Append("\x7FE\x5\x1A\xE\x2\x7FE\x7FF\a\x1AD\x2\x2\x7FF\xB5\x3\x2\x2");
		sb.Append("\x2\x800\x803\x5\x130\x99\x2\x801\x803\a\x194\x2\x2\x802\x800");
		sb.Append("\x3\x2\x2\x2\x802\x801\x3\x2\x2\x2\x803\x806\x3\x2\x2\x2\x804");
		sb.Append("\x807\a\x19B\x2\x2\x805\x807\x5\x14C\xA7\x2\x806\x804\x3\x2");
		sb.Append("\x2\x2\x806\x805\x3\x2\x2\x2\x807\x808\x3\x2\x2\x2\x808\x811");
		sb.Append("\x5\xACW\x2\x809\x80A\x5\x146\xA4\x2\x80A\x80B\a\x1A7\x2\x2");
		sb.Append("\x80B\x80C\x5\x146\xA4\x2\x80C\x80D\a\x1AC\x2\x2\x80D\x80E\x5");
		sb.Append("\x108\x85\x2\x80E\x80F\a\x1AD\x2\x2\x80F\x811\x3\x2\x2\x2\x810");
		sb.Append("\x802\x3\x2\x2\x2\x810\x809\x3\x2\x2\x2\x811\xB7\x3\x2\x2\x2");
		sb.Append("\x812\x817\x5\xBA^\x2\x813\x814\a\x1AE\x2\x2\x814\x816\x5\xBA");
		sb.Append("^\x2\x815\x813\x3\x2\x2\x2\x816\x819\x3\x2\x2\x2\x817\x815\x3");
		sb.Append("\x2\x2\x2\x817\x818\x3\x2\x2\x2\x818\xB9\x3\x2\x2\x2\x819\x817");
		sb.Append("\x3\x2\x2\x2\x81A\x81F\x5\xBC_\x2\x81B\x81C\az\x2\x2\x81C\x81E");
		sb.Append("\x5\xBC_\x2\x81D\x81B\x3\x2\x2\x2\x81E\x821\x3\x2\x2\x2\x81F");
		sb.Append("\x81D\x3\x2\x2\x2\x81F\x820\x3\x2\x2\x2\x820\xBB\x3\x2\x2\x2");
		sb.Append("\x821\x81F\x3\x2\x2\x2\x822\x827\x5\xBE`\x2\x823\x824\a\a\x2");
		sb.Append("\x2\x824\x826\x5\xBE`\x2\x825\x823\x3\x2\x2\x2\x826\x829\x3");
		sb.Append("\x2\x2\x2\x827\x825\x3\x2\x2\x2\x827\x828\x3\x2\x2\x2\x828\xBD");
		sb.Append("\x3\x2\x2\x2\x829\x827\x3\x2\x2\x2\x82A\x82C\am\x2\x2\x82B\x82A");
		sb.Append("\x3\x2\x2\x2\x82B\x82C\x3\x2\x2\x2\x82C\x82D\x3\x2\x2\x2\x82D");
		sb.Append("\x82E\x5\xC0\x61\x2\x82E\xBF\x3\x2\x2\x2\x82F\x830\a\x42\x2");
		sb.Append("\x2\x830\x831\a\x1AC\x2\x2\x831\x832\x5\xB0Y\x2\x832\x833\a");
		sb.Append("\x1AD\x2\x2\x833\x868\x3\x2\x2\x2\x834\x835\x5\xACW\x2\x835");
		sb.Append("\x836\x5\x14A\xA6\x2\x836\x837\x5\xACW\x2\x837\x868\x3\x2\x2");
		sb.Append("\x2\x838\x839\x5\xACW\x2\x839\x83A\x5\x14A\xA6\x2\x83A\x83B");
		sb.Append("\t$\x2\x2\x83B\x83C\a\x1AC\x2\x2\x83C\x83D\x5\xB0Y\x2\x83D\x83E");
		sb.Append("\a\x1AD\x2\x2\x83E\x868\x3\x2\x2\x2\x83F\x841\x5\xACW\x2\x840");
		sb.Append("\x842\am\x2\x2\x841\x840\x3\x2\x2\x2\x841\x842\x3\x2\x2\x2\x842");
		sb.Append("\x843\x3\x2\x2\x2\x843\x844\a\xE\x2\x2\x844\x845\x5\xACW\x2");
		sb.Append("\x845\x846\a\a\x2\x2\x846\x847\x5\xACW\x2\x847\x868\x3\x2\x2");
		sb.Append("\x2\x848\x84A\x5\xACW\x2\x849\x84B\am\x2\x2\x84A\x849\x3\x2");
		sb.Append("\x2\x2\x84A\x84B\x3\x2\x2\x2\x84B\x84C\x3\x2\x2\x2\x84C\x84D");
		sb.Append("\aY\x2\x2\x84D\x850\a\x1AC\x2\x2\x84E\x851\x5\xB0Y\x2\x84F\x851");
		sb.Append("\x5\x108\x85\x2\x850\x84E\x3\x2\x2\x2\x850\x84F\x3\x2\x2\x2");
		sb.Append("\x851\x852\x3\x2\x2\x2\x852\x853\a\x1AD\x2\x2\x853\x868\x3\x2");
		sb.Append("\x2\x2\x854\x856\x5\xACW\x2\x855\x857\am\x2\x2\x856\x855\x3");
		sb.Append("\x2\x2\x2\x856\x857\x3\x2\x2\x2\x857\x858\x3\x2\x2\x2\x858\x859");
		sb.Append("\a\x64\x2\x2\x859\x85C\x5\xACW\x2\x85A\x85B\a?\x2\x2\x85B\x85D");
		sb.Append("\x5\xACW\x2\x85C\x85A\x3\x2\x2\x2\x85C\x85D\x3\x2\x2\x2\x85D");
		sb.Append("\x868\x3\x2\x2\x2\x85E\x85F\x5\xACW\x2\x85F\x860\a_\x2\x2\x860");
		sb.Append("\x861\x5\x13A\x9E\x2\x861\x868\x3\x2\x2\x2\x862\x863\a\x1AC");
		sb.Append("\x2\x2\x863\x864\x5\xBA^\x2\x864\x865\a\x1AD\x2\x2\x865\x868");
		sb.Append("\x3\x2\x2\x2\x866\x868\a\x195\x2\x2\x867\x82F\x3\x2\x2\x2\x867");
		sb.Append("\x834\x3\x2\x2\x2\x867\x838\x3\x2\x2\x2\x867\x83F\x3\x2\x2\x2");
		sb.Append("\x867\x848\x3\x2\x2\x2\x867\x854\x3\x2\x2\x2\x867\x85E\x3\x2");
		sb.Append("\x2\x2\x867\x862\x3\x2\x2\x2\x867\x866\x3\x2\x2\x2\x868\xC1");
		sb.Append("\x3\x2\x2\x2\x869\x86F\x5\xC6\x64\x2\x86A\x86B\a\x1AC\x2\x2");
		sb.Append("\x86B\x86C\x5\xC2\x62\x2\x86C\x86D\a\x1AD\x2\x2\x86D\x86F\x3");
		sb.Append("\x2\x2\x2\x86E\x869\x3\x2\x2\x2\x86E\x86A\x3\x2\x2\x2\x86F\x873");
		sb.Append("\x3\x2\x2\x2\x870\x872\x5\xC4\x63\x2\x871\x870\x3\x2\x2\x2\x872");
		sb.Append("\x875\x3\x2\x2\x2\x873\x871\x3\x2\x2\x2\x873\x874\x3\x2\x2\x2");
		sb.Append("\x874\xC3\x3\x2\x2\x2\x875\x873\x3\x2\x2\x2\x876\x878\a\xB2");
		sb.Append("\x2\x2\x877\x879\a\x5\x2\x2\x878\x877\x3\x2\x2\x2\x878\x879");
		sb.Append("\x3\x2\x2\x2\x879\x87D\x3\x2\x2\x2\x87A\x87D\a@\x2\x2\x87B\x87D");
		sb.Append("\a]\x2\x2\x87C\x876\x3\x2\x2\x2\x87C\x87A\x3\x2\x2\x2\x87C\x87B");
		sb.Append("\x3\x2\x2\x2\x87D\x887\x3\x2\x2\x2\x87E\x888\x5\xC6\x64\x2\x87F");
		sb.Append("\x880\a\x1AC\x2\x2\x880\x881\x5\xC2\x62\x2\x881\x882\a\x1AD");
		sb.Append("\x2\x2\x882\x884\x3\x2\x2\x2\x883\x87F\x3\x2\x2\x2\x884\x885");
		sb.Append("\x3\x2\x2\x2\x885\x883\x3\x2\x2\x2\x885\x886\x3\x2\x2\x2\x886");
		sb.Append("\x888\x3\x2\x2\x2\x887\x87E\x3\x2\x2\x2\x887\x883\x3\x2\x2\x2");
		sb.Append("\x888\xC5\x3\x2\x2\x2\x889\x88B\a\x9B\x2\x2\x88A\x88C\t%\x2");
		sb.Append("\x2\x88B\x88A\x3\x2\x2\x2\x88B\x88C\x3\x2\x2\x2\x88C\x896\x3");
		sb.Append("\x2\x2\x2\x88D\x88E\a\xAB\x2\x2\x88E\x890\x5\xACW\x2\x88F\x891");
		sb.Append("\a\x7F\x2\x2\x890\x88F\x3\x2\x2\x2\x890\x891\x3\x2\x2\x2\x891");
		sb.Append("\x894\x3\x2\x2\x2\x892\x893\a\xC0\x2\x2\x893\x895\a\x179\x2");
		sb.Append("\x2\x894\x892\x3\x2\x2\x2\x894\x895\x3\x2\x2\x2\x895\x897\x3");
		sb.Append("\x2\x2\x2\x896\x88D\x3\x2\x2\x2\x896\x897\x3\x2\x2\x2\x897\x898");
		sb.Append("\x3\x2\x2\x2\x898\x89B\x5\xD8m\x2\x899\x89A\a^\x2\x2\x89A\x89C");
		sb.Append("\x5\x128\x95\x2\x89B\x899\x3\x2\x2\x2\x89B\x89C\x3\x2\x2\x2");
		sb.Append("\x89C\x89F\x3\x2\x2\x2\x89D\x89E\aN\x2\x2\x89E\x8A0\x5\xDCo");
		sb.Append("\x2\x89F\x89D\x3\x2\x2\x2\x89F\x8A0\x3\x2\x2\x2\x8A0\x8A3\x3");
		sb.Append("\x2\x2\x2\x8A1\x8A2\a\xBE\x2\x2\x8A2\x8A4\x5\xBA^\x2\x8A3\x8A1");
		sb.Append("\x3\x2\x2\x2\x8A3\x8A4\x3\x2\x2\x2\x8A4\x8AF\x3\x2\x2\x2\x8A5");
		sb.Append("\x8A6\aS\x2\x2\x8A6\x8A7\a\x12\x2\x2\x8A7\x8AC\x5\xD0i\x2\x8A8");
		sb.Append("\x8A9\a\x1AE\x2\x2\x8A9\x8AB\x5\xD0i\x2\x8AA\x8A8\x3\x2\x2\x2");
		sb.Append("\x8AB\x8AE\x3\x2\x2\x2\x8AC\x8AA\x3\x2\x2\x2\x8AC\x8AD\x3\x2");
		sb.Append("\x2\x2\x8AD\x8B0\x3\x2\x2\x2\x8AE\x8AC\x3\x2\x2\x2\x8AF\x8A5");
		sb.Append("\x3\x2\x2\x2\x8AF\x8B0\x3\x2\x2\x2\x8B0\x8B3\x3\x2\x2\x2\x8B1");
		sb.Append("\x8B2\aT\x2\x2\x8B2\x8B4\x5\xBA^\x2\x8B3\x8B1\x3\x2\x2\x2\x8B3");
		sb.Append("\x8B4\x3\x2\x2\x2\x8B4\xC7\x3\x2\x2\x2\x8B5\x8B6\a{\x2\x2\x8B6");
		sb.Append("\x8B7\a\x12\x2\x2\x8B7\x8BC\x5\xCEh\x2\x8B8\x8B9\a\x1AE\x2\x2");
		sb.Append("\x8B9\x8BB\x5\xCEh\x2\x8BA\x8B8\x3\x2\x2\x2\x8BB\x8BE\x3\x2");
		sb.Append("\x2\x2\x8BC\x8BA\x3\x2\x2\x2\x8BC\x8BD\x3\x2\x2\x2\x8BD\x8CA");
		sb.Append("\x3\x2\x2\x2\x8BE\x8BC\x3\x2\x2\x2\x8BF\x8C0\a\x13F\x2\x2\x8C0");
		sb.Append("\x8C1\x5\xACW\x2\x8C1\x8C8\t&\x2\x2\x8C2\x8C3\a\x45\x2\x2\x8C3");
		sb.Append("\x8C4\t\'\x2\x2\x8C4\x8C5\x5\xACW\x2\x8C5\x8C6\t&\x2\x2\x8C6");
		sb.Append("\x8C7\a\x141\x2\x2\x8C7\x8C9\x3\x2\x2\x2\x8C8\x8C2\x3\x2\x2");
		sb.Append("\x2\x8C8\x8C9\x3\x2\x2\x2\x8C9\x8CB\x3\x2\x2\x2\x8CA\x8BF\x3");
		sb.Append("\x2\x2\x2\x8CA\x8CB\x3\x2\x2\x2\x8CB\xC9\x3\x2\x2\x2\x8CC\x8CD");
		sb.Append("\aI\x2\x2\x8CD\x8E0\a\x10\x2\x2\x8CE\x8CF\aI\x2\x2\x8CF\x8D0");
		sb.Append("\a\x18C\x2\x2\x8D0\x8D2\a\xCD\x2\x2\x8D1\x8D3\x5\xCCg\x2\x8D2");
		sb.Append("\x8D1\x3\x2\x2\x2\x8D2\x8D3\x3\x2\x2\x2\x8D3\x8E0\x3\x2\x2\x2");
		sb.Append("\x8D4\x8D5\aI\x2\x2\x8D5\x8D6\a\x18C\x2\x2\x8D6\x8DA\a\x14A");
		sb.Append("\x2\x2\x8D7\x8D8\a\x1AC\x2\x2\x8D8\x8D9\a\x197\x2\x2\x8D9\x8DB");
		sb.Append("\a\x1AD\x2\x2\x8DA\x8D7\x3\x2\x2\x2\x8DA\x8DB\x3\x2\x2\x2\x8DB");
		sb.Append("\x8DD\x3\x2\x2\x2\x8DC\x8DE\x5\xCCg\x2\x8DD\x8DC\x3\x2\x2\x2");
		sb.Append("\x8DD\x8DE\x3\x2\x2\x2\x8DE\x8E0\x3\x2\x2\x2\x8DF\x8CC\x3\x2");
		sb.Append("\x2\x2\x8DF\x8CE\x3\x2\x2\x2\x8DF\x8D4\x3\x2\x2\x2\x8E0\xCB");
		sb.Append("\x3\x2\x2\x2\x8E1\x8E6\a\x1AE\x2\x2\x8E2\x8E3\a\x198\x2\x2\x8E3");
		sb.Append("\x8E7\a\xD5\x2\x2\x8E4\x8E7\a\x180\x2\x2\x8E5\x8E7\a\x15D\x2");
		sb.Append("\x2\x8E6\x8E2\x3\x2\x2\x2\x8E6\x8E4\x3\x2\x2\x2\x8E6\x8E5\x3");
		sb.Append("\x2\x2\x2\x8E7\xCD\x3\x2\x2\x2\x8E8\x8EA\x5\xACW\x2\x8E9\x8EB");
		sb.Append("\t\a\x2\x2\x8EA\x8E9\x3\x2\x2\x2\x8EA\x8EB\x3\x2\x2\x2\x8EB");
		sb.Append("\xCF\x3\x2\x2\x2\x8EC\x8ED\x5\xACW\x2\x8ED\xD1\x3\x2\x2\x2\x8EE");
		sb.Append("\x8EF\ay\x2\x2\x8EF\x8F0\a\x1AC\x2\x2\x8F0\x8F5\x5\xD4k\x2\x8F1");
		sb.Append("\x8F2\a\x1AE\x2\x2\x8F2\x8F4\x5\xD4k\x2\x8F3\x8F1\x3\x2\x2\x2");
		sb.Append("\x8F4\x8F7\x3\x2\x2\x2\x8F5\x8F3\x3\x2\x2\x2\x8F5\x8F6\x3\x2");
		sb.Append("\x2\x2\x8F6\x8F8\x3\x2\x2\x2\x8F7\x8F5\x3\x2\x2\x2\x8F8\x8F9");
		sb.Append("\a\x1AD\x2\x2\x8F9\xD3\x3\x2\x2\x2\x8FA\x8FB\a\x100\x2\x2\x8FB");
		sb.Append("\x928\a\x195\x2\x2\x8FC\x8FD\t(\x2\x2\x8FD\x928\aS\x2\x2\x8FE");
		sb.Append("\x8FF\t)\x2\x2\x8FF\x928\a\xB2\x2\x2\x900\x901\t*\x2\x2\x901");
		sb.Append("\x928\a`\x2\x2\x902\x903\a\xFF\x2\x2\x903\x928\a\x189\x2\x2");
		sb.Append("\x904\x905\a\x107\x2\x2\x905\x928\a{\x2\x2\x906\x928\a\x114");
		sb.Append("\x2\x2\x907\x908\a\x11C\x2\x2\x908\x928\a\x81\x2\x2\x909\x90A");
		sb.Append("\a\x11D\x2\x2\x90A\x928\a\x81\x2\x2\x90B\x90C\a\x127\x2\x2\x90C");
		sb.Append("\x928\a\x195\x2\x2\x90D\x90E\a\x128\x2\x2\x90E\x928\a\x195\x2");
		sb.Append("\x2\x90F\x910\a\x143\x2\x2\x910\x911\aI\x2\x2\x911\x912\a\x1AC");
		sb.Append("\x2\x2\x912\x917\x5\xD6l\x2\x913\x914\a\x1AE\x2\x2\x914\x916");
		sb.Append("\x5\xD6l\x2\x915\x913\x3\x2\x2\x2\x916\x919\x3\x2\x2\x2\x917");
		sb.Append("\x915\x3\x2\x2\x2\x917\x918\x3\x2\x2\x2\x918\x91A\x3\x2\x2\x2");
		sb.Append("\x919\x917\x3\x2\x2\x2\x91A\x91B\a\x1AD\x2\x2\x91B\x928\x3\x2");
		sb.Append("\x2\x2\x91C\x91D\a\x143\x2\x2\x91D\x91E\aI\x2\x2\x91E\x928\a");
		sb.Append("\x184\x2\x2\x91F\x920\a\x148\x2\x2\x920\x928\t\x14\x2\x2\x921");
		sb.Append("\x928\a\x155\x2\x2\x922\x923\a\x15C\x2\x2\x923\x928\a\x81\x2");
		sb.Append("\x2\x924\x925\a\xB7\x2\x2\x925\x926\a\x81\x2\x2\x926\x928\a");
		sb.Append("\x197\x2\x2\x927\x8FA\x3\x2\x2\x2\x927\x8FC\x3\x2\x2\x2\x927");
		sb.Append("\x8FE\x3\x2\x2\x2\x927\x900\x3\x2\x2\x2\x927\x902\x3\x2\x2\x2");
		sb.Append("\x927\x904\x3\x2\x2\x2\x927\x906\x3\x2\x2\x2\x927\x907\x3\x2");
		sb.Append("\x2\x2\x927\x909\x3\x2\x2\x2\x927\x90B\x3\x2\x2\x2\x927\x90D");
		sb.Append("\x3\x2\x2\x2\x927\x90F\x3\x2\x2\x2\x927\x91C\x3\x2\x2\x2\x927");
		sb.Append("\x91F\x3\x2\x2\x2\x927\x921\x3\x2\x2\x2\x927\x922\x3\x2\x2\x2");
		sb.Append("\x927\x924\x3\x2\x2\x2\x928\xD5\x3\x2\x2\x2\x929\x92D\a\x194");
		sb.Append("\x2\x2\x92A\x92E\a\x184\x2\x2\x92B\x92C\a\x19B\x2\x2\x92C\x92E");
		sb.Append("\x5\x142\xA2\x2\x92D\x92A\x3\x2\x2\x2\x92D\x92B\x3\x2\x2\x2");
		sb.Append("\x92E\xD7\x3\x2\x2\x2\x92F\x934\x5\xDAn\x2\x930\x931\a\x1AE");
		sb.Append("\x2\x2\x931\x933\x5\xDAn\x2\x932\x930\x3\x2\x2\x2\x933\x936");
		sb.Append("\x3\x2\x2\x2\x934\x932\x3\x2\x2\x2\x934\x935\x3\x2\x2\x2\x935");
		sb.Append("\xD9\x3\x2\x2\x2\x936\x934\x3\x2\x2\x2\x937\x938\x5\x128\x95");
		sb.Append("\x2\x938\x939\a\x1A7\x2\x2\x939\x93B\x3\x2\x2\x2\x93A\x937\x3");
		sb.Append("\x2\x2\x2\x93A\x93B\x3\x2\x2\x2\x93B\x93F\x3\x2\x2\x2\x93C\x940");
		sb.Append("\a\x1B1\x2\x2\x93D\x93E\a\x1AB\x2\x2\x93E\x940\t+\x2\x2\x93F");
		sb.Append("\x93C\x3\x2\x2\x2\x93F\x93D\x3\x2\x2\x2\x940\x94D\x3\x2\x2\x2");
		sb.Append("\x941\x942\x5\x104\x83\x2\x942\x943\a\x19B\x2\x2\x943\x944\x5");
		sb.Append("\xACW\x2\x944\x94D\x3\x2\x2\x2\x945\x94A\x5\xACW\x2\x946\x948");
		sb.Append("\a\t\x2\x2\x947\x946\x3\x2\x2\x2\x947\x948\x3\x2\x2\x2\x948");
		sb.Append("\x949\x3\x2\x2\x2\x949\x94B\x5\x104\x83\x2\x94A\x947\x3\x2\x2");
		sb.Append("\x2\x94A\x94B\x3\x2\x2\x2\x94B\x94D\x3\x2\x2\x2\x94C\x93A\x3");
		sb.Append("\x2\x2\x2\x94C\x941\x3\x2\x2\x2\x94C\x945\x3\x2\x2\x2\x94D\xDB");
		sb.Append("\x3\x2\x2\x2\x94E\x953\x5\xDEp\x2\x94F\x950\a\x1AE\x2\x2\x950");
		sb.Append("\x952\x5\xDEp\x2\x951\x94F\x3\x2\x2\x2\x952\x955\x3\x2\x2\x2");
		sb.Append("\x953\x951\x3\x2\x2\x2\x953\x954\x3\x2\x2\x2\x954\xDD\x3\x2");
		sb.Append("\x2\x2\x955\x953\x3\x2\x2\x2\x956\x95C\x5\xE0q\x2\x957\x958");
		sb.Append("\a\x1AC\x2\x2\x958\x959\x5\xE0q\x2\x959\x95A\a\x1AD\x2\x2\x95A");
		sb.Append("\x95C\x3\x2\x2\x2\x95B\x956\x3\x2\x2\x2\x95B\x957\x3\x2\x2\x2");
		sb.Append("\x95C\xDF\x3\x2\x2\x2\x95D\x961\x5\xE2r\x2\x95E\x960\x5\xE6");
		sb.Append("t\x2\x95F\x95E\x3\x2\x2\x2\x960\x963\x3\x2\x2\x2\x961\x95F\x3");
		sb.Append("\x2\x2\x2\x961\x962\x3\x2\x2\x2\x962\xE1\x3\x2\x2\x2\x963\x961");
		sb.Append("\x3\x2\x2\x2\x964\x966\x5\xE8u\x2\x965\x967\x5\xF6|\x2\x966");
		sb.Append("\x965\x3\x2\x2\x2\x966\x967\x3\x2\x2\x2\x967\x988\x3\x2\x2\x2");
		sb.Append("\x968\x96A\x5\xEAv\x2\x969\x96B\x5\xF6|\x2\x96A\x969\x3\x2\x2");
		sb.Append("\x2\x96A\x96B\x3\x2\x2\x2\x96B\x988\x3\x2\x2\x2\x96C\x971\x5");
		sb.Append("\xEEx\x2\x96D\x96F\x5\xF6|\x2\x96E\x970\x5\x102\x82\x2\x96F");
		sb.Append("\x96E\x3\x2\x2\x2\x96F\x970\x3\x2\x2\x2\x970\x972\x3\x2\x2\x2");
		sb.Append("\x971\x96D\x3\x2\x2\x2\x971\x972\x3\x2\x2\x2\x972\x988\x3\x2");
		sb.Append("\x2\x2\x973\x974\x5\xE4s\x2\x974\x975\x5\xF6|\x2\x975\x988\x3");
		sb.Append("\x2\x2\x2\x976\x978\x5\xF0y\x2\x977\x979\x5\xF6|\x2\x978\x977");
		sb.Append("\x3\x2\x2\x2\x978\x979\x3\x2\x2\x2\x979\x988\x3\x2\x2\x2\x97A");
		sb.Append("\x97C\a\x194\x2\x2\x97B\x97D\x5\xF6|\x2\x97C\x97B\x3\x2\x2\x2");
		sb.Append("\x97C\x97D\x3\x2\x2\x2\x97D\x988\x3\x2\x2\x2\x97E\x97F\a\x194");
		sb.Append("\x2\x2\x97F\x980\a\x1A7\x2\x2\x980\x985\x5\xF0y\x2\x981\x983");
		sb.Append("\x5\xF6|\x2\x982\x984\x5\x102\x82\x2\x983\x982\x3\x2\x2\x2\x983");
		sb.Append("\x984\x3\x2\x2\x2\x984\x986\x3\x2\x2\x2\x985\x981\x3\x2\x2\x2");
		sb.Append("\x985\x986\x3\x2\x2\x2\x986\x988\x3\x2\x2\x2\x987\x964\x3\x2");
		sb.Append("\x2\x2\x987\x968\x3\x2\x2\x2\x987\x96C\x3\x2\x2\x2\x987\x973");
		sb.Append("\x3\x2\x2\x2\x987\x976\x3\x2\x2\x2\x987\x97A\x3\x2\x2\x2\x987");
		sb.Append("\x97E\x3\x2\x2\x2\x988\xE3\x3\x2\x2\x2\x989\x98A\a\x15\x2\x2");
		sb.Append("\x98A\x98B\a\x1AC\x2\x2\x98B\x98C\a\x16\x2\x2\x98C\x98D\x5\x128");
		sb.Append("\x95\x2\x98D\x98E\a\x1AE\x2\x2\x98E\x98F\t,\x2\x2\x98F\x990");
		sb.Append("\a\x1AD\x2\x2\x990\xE5\x3\x2\x2\x2\x991\x993\a[\x2\x2\x992\x991");
		sb.Append("\x3\x2\x2\x2\x992\x993\x3\x2\x2\x2\x993\x999\x3\x2\x2\x2\x994");
		sb.Append("\x996\t-\x2\x2\x995\x997\a|\x2\x2\x996\x995\x3\x2\x2\x2\x996");
		sb.Append("\x997\x3\x2\x2\x2\x997\x999\x3\x2\x2\x2\x998\x992\x3\x2\x2\x2");
		sb.Append("\x998\x994\x3\x2\x2\x2\x999\x99B\x3\x2\x2\x2\x99A\x99C\t.\x2");
		sb.Append("\x2\x99B\x99A\x3\x2\x2\x2\x99B\x99C\x3\x2\x2\x2\x99C\x99D\x3");
		sb.Append("\x2\x2\x2\x99D\x99E\a`\x2\x2\x99E\x99F\x5\xDEp\x2\x99F\x9A0");
		sb.Append("\as\x2\x2\x9A0\x9A1\x5\xBA^\x2\x9A1\x9AC\x3\x2\x2\x2\x9A2\x9A3");
		sb.Append("\a\'\x2\x2\x9A3\x9A4\a`\x2\x2\x9A4\x9AC\x5\xDEp\x2\x9A5\x9A6");
		sb.Append("\a\'\x2\x2\x9A6\x9A7\a\xCB\x2\x2\x9A7\x9AC\x5\xDEp\x2\x9A8\x9A9");
		sb.Append("\a|\x2\x2\x9A9\x9AA\a\xCB\x2\x2\x9AA\x9AC\x5\xDEp\x2\x9AB\x998");
		sb.Append("\x3\x2\x2\x2\x9AB\x9A2\x3\x2\x2\x2\x9AB\x9A5\x3\x2\x2\x2\x9AB");
		sb.Append("\x9A8\x3\x2\x2\x2\x9AC\xE7\x3\x2\x2\x2\x9AD\x9AF\x5\x128\x95");
		sb.Append("\x2\x9AE\x9B0\x5\xFA~\x2\x9AF\x9AE\x3\x2\x2\x2\x9AF\x9B0\x3");
		sb.Append("\x2\x2\x2\x9B0\xE9\x3\x2\x2\x2\x9B1\x9B2\aw\x2\x2\x9B2\x9B3");
		sb.Append("\a\x1AC\x2\x2\x9B3\x9B4\a\x197\x2\x2\x9B4\x9B5\a\x1AE\x2\x2");
		sb.Append("\x9B5\x9B6\a\x197\x2\x2\x9B6\x9B7\a\x1AE\x2\x2\x9B7\x9B8\a\x197");
		sb.Append("\x2\x2\x9B8\x9CC\a\x1AD\x2\x2\x9B9\x9BA\aw\x2\x2\x9BA\x9BB\a");
		sb.Append("\x1AC\x2\x2\x9BB\x9BC\a\x11\x2\x2\x9BC\x9BD\a\x197\x2\x2\x9BD");
		sb.Append("\x9C7\a\x1AE\x2\x2\x9BE\x9C3\x5\xECw\x2\x9BF\x9C0\a\x1AE\x2");
		sb.Append("\x2\x9C0\x9C2\x5\xECw\x2\x9C1\x9BF\x3\x2\x2\x2\x9C2\x9C5\x3");
		sb.Append("\x2\x2\x2\x9C3\x9C1\x3\x2\x2\x2\x9C3\x9C4\x3\x2\x2\x2\x9C4\x9C8");
		sb.Append("\x3\x2\x2\x2\x9C5\x9C3\x3\x2\x2\x2\x9C6\x9C8\x5\x146\xA4\x2");
		sb.Append("\x9C7\x9BE\x3\x2\x2\x2\x9C7\x9C6\x3\x2\x2\x2\x9C8\x9C9\x3\x2");
		sb.Append("\x2\x2\x9C9\x9CA\a\x1AD\x2\x2\x9CA\x9CC\x3\x2\x2\x2\x9CB\x9B1");
		sb.Append("\x3\x2\x2\x2\x9CB\x9B9\x3\x2\x2\x2\x9CC\xEB\x3\x2\x2\x2\x9CD");
		sb.Append("\x9CE\x5\x146\xA4\x2\x9CE\x9CF\a\x19B\x2\x2\x9CF\x9D0\t/\x2");
		sb.Append("\x2\x9D0\xED\x3\x2\x2\x2\x9D1\x9D7\x5\xB0Y\x2\x9D2\x9D3\a\x1AC");
		sb.Append("\x2\x2\x9D3\x9D4\x5\xB0Y\x2\x9D4\x9D5\a\x1AD\x2\x2\x9D5\x9D7");
		sb.Append("\x3\x2\x2\x2\x9D6\x9D1\x3\x2\x2\x2\x9D6\x9D2\x3\x2\x2\x2\x9D7");
		sb.Append("\xEF\x3\x2\x2\x2\x9D8\xA3A\x5\x10A\x86\x2\x9D9\xA3A\x5\x10C");
		sb.Append("\x87\x2\x9DA\x9DB\x5\x13C\x9F\x2\x9DB\x9DD\a\x1AC\x2\x2\x9DC");
		sb.Append("\x9DE\x5\x108\x85\x2\x9DD\x9DC\x3\x2\x2\x2\x9DD\x9DE\x3\x2\x2");
		sb.Append("\x2\x9DE\x9DF\x3\x2\x2\x2\x9DF\x9E0\a\x1AD\x2\x2\x9E0\xA3A\x3");
		sb.Append("\x2\x2\x2\x9E1\x9E2\a\xD6\x2\x2\x9E2\x9E3\a\x1AC\x2\x2\x9E3");
		sb.Append("\x9E4\a\x1B1\x2\x2\x9E4\xA3A\a\x1AD\x2\x2\x9E5\x9E6\a\xD9\x2");
		sb.Append("\x2\x9E6\x9E7\a\x1AC\x2\x2\x9E7\x9E8\x5\xACW\x2\x9E8\x9E9\a");
		sb.Append("\t\x2\x2\x9E9\x9EA\x5\x13E\xA0\x2\x9EA\x9EB\a\x1AD\x2\x2\x9EB");
		sb.Append("\xA3A\x3\x2\x2\x2\x9EC\x9ED\a%\x2\x2\x9ED\x9EE\a\x1AC\x2\x2");
		sb.Append("\x9EE\x9EF\x5\x13E\xA0\x2\x9EF\x9F0\a\x1AE\x2\x2\x9F0\x9F3\x5");
		sb.Append("\xACW\x2\x9F1\x9F2\a\x1AE\x2\x2\x9F2\x9F4\x5\xACW\x2\x9F3\x9F1");
		sb.Append("\x3\x2\x2\x2\x9F3\x9F4\x3\x2\x2\x2\x9F4\x9F5\x3\x2\x2\x2\x9F5");
		sb.Append("\x9F6\a\x1AD\x2\x2\x9F6\xA3A\x3\x2\x2\x2\x9F7\x9F8\a\xDD\x2");
		sb.Append("\x2\x9F8\x9F9\a\x1AC\x2\x2\x9F9\x9FA\a\x1B1\x2\x2\x9FA\xA3A");
		sb.Append("\a\x1AD\x2\x2\x9FB\x9FC\a\x1B\x2\x2\x9FC\x9FD\a\x1AC\x2\x2\x9FD");
		sb.Append("\x9FE\x5\x108\x85\x2\x9FE\x9FF\a\x1AD\x2\x2\x9FF\xA3A\x3\x2");
		sb.Append("\x2\x2\xA00\xA3A\a+\x2\x2\xA01\xA3A\a,\x2\x2\xA02\xA03\a\xE9");
		sb.Append("\x2\x2\xA03\xA04\a\x1AC\x2\x2\xA04\xA05\a\x196\x2\x2\xA05\xA06");
		sb.Append("\a\x1AE\x2\x2\xA06\xA07\x5\xACW\x2\xA07\xA08\a\x1AE\x2\x2\xA08");
		sb.Append("\xA09\x5\xACW\x2\xA09\xA0A\a\x1AD\x2\x2\xA0A\xA3A\x3\x2\x2\x2");
		sb.Append("\xA0B\xA0C\a\xEA\x2\x2\xA0C\xA0D\a\x1AC\x2\x2\xA0D\xA0E\a\x196");
		sb.Append("\x2\x2\xA0E\xA0F\a\x1AE\x2\x2\xA0F\xA10\x5\xACW\x2\xA10\xA11");
		sb.Append("\a\x1AE\x2\x2\xA11\xA12\x5\xACW\x2\xA12\xA13\a\x1AD\x2\x2\xA13");
		sb.Append("\xA3A\x3\x2\x2\x2\xA14\xA15\a\xEB\x2\x2\xA15\xA16\a\x1AC\x2");
		sb.Append("\x2\xA16\xA17\a\x196\x2\x2\xA17\xA18\a\x1AE\x2\x2\xA18\xA19");
		sb.Append("\x5\xACW\x2\xA19\xA1A\a\x1AD\x2\x2\xA1A\xA3A\x3\x2\x2\x2\xA1B");
		sb.Append("\xA1C\a\xEC\x2\x2\xA1C\xA1D\a\x1AC\x2\x2\xA1D\xA1E\a\x196\x2");
		sb.Append("\x2\xA1E\xA1F\a\x1AE\x2\x2\xA1F\xA20\x5\xACW\x2\xA20\xA21\a");
		sb.Append("\x1AD\x2\x2\xA21\xA3A\x3\x2\x2\x2\xA22\xA23\aU\x2\x2\xA23\xA24");
		sb.Append("\a\x1AC\x2\x2\xA24\xA27\x5\x13E\xA0\x2\xA25\xA26\a\x1AE\x2\x2");
		sb.Append("\xA26\xA28\a\x195\x2\x2\xA27\xA25\x3\x2\x2\x2\xA27\xA28\x3\x2");
		sb.Append("\x2\x2\xA28\xA2B\x3\x2\x2\x2\xA29\xA2A\a\x1AE\x2\x2\xA2A\xA2C");
		sb.Append("\a\x195\x2\x2\xA2B\xA29\x3\x2\x2\x2\xA2B\xA2C\x3\x2\x2\x2\xA2C");
		sb.Append("\xA2D\x3\x2\x2\x2\xA2D\xA2E\a\x1AD\x2\x2\xA2E\xA3A\x3\x2\x2");
		sb.Append("\x2\xA2F\xA3A\a\x12E\x2\x2\xA30\xA31\ao\x2\x2\xA31\xA32\a\x1AC");
		sb.Append("\x2\x2\xA32\xA33\x5\xACW\x2\xA33\xA34\a\x1AE\x2\x2\xA34\xA35");
		sb.Append("\x5\xACW\x2\xA35\xA36\a\x1AD\x2\x2\xA36\xA3A\x3\x2\x2\x2\xA37");
		sb.Append("\xA3A\a\x9F\x2\x2\xA38\xA3A\a\xA5\x2\x2\xA39\x9D8\x3\x2\x2\x2");
		sb.Append("\xA39\x9D9\x3\x2\x2\x2\xA39\x9DA\x3\x2\x2\x2\xA39\x9E1\x3\x2");
		sb.Append("\x2\x2\xA39\x9E5\x3\x2\x2\x2\xA39\x9EC\x3\x2\x2\x2\xA39\x9F7");
		sb.Append("\x3\x2\x2\x2\xA39\x9FB\x3\x2\x2\x2\xA39\xA00\x3\x2\x2\x2\xA39");
		sb.Append("\xA01\x3\x2\x2\x2\xA39\xA02\x3\x2\x2\x2\xA39\xA0B\x3\x2\x2\x2");
		sb.Append("\xA39\xA14\x3\x2\x2\x2\xA39\xA1B\x3\x2\x2\x2\xA39\xA22\x3\x2");
		sb.Append("\x2\x2\xA39\xA2F\x3\x2\x2\x2\xA39\xA30\x3\x2\x2\x2\xA39\xA37");
		sb.Append("\x3\x2\x2\x2\xA39\xA38\x3\x2\x2\x2\xA3A\xF1\x3\x2\x2\x2\xA3B");
		sb.Append("\xA3C\a\xBD\x2\x2\xA3C\xA3D\x5\xACW\x2\xA3D\xA3E\a\xA9\x2\x2");
		sb.Append("\xA3E\xA3F\x5\xACW\x2\xA3F\xF3\x3\x2\x2\x2\xA40\xA41\a\xBD\x2");
		sb.Append("\x2\xA41\xA42\x5\xBA^\x2\xA42\xA43\a\xA9\x2\x2\xA43\xA44\x5");
		sb.Append("\xACW\x2\xA44\xF5\x3\x2\x2\x2\xA45\xA47\a\t\x2\x2\xA46\xA45");
		sb.Append("\x3\x2\x2\x2\xA46\xA47\x3\x2\x2\x2\xA47\xA48\x3\x2\x2\x2\xA48");
		sb.Append("\xA49\x5\xF8}\x2\xA49\xF7\x3\x2\x2\x2\xA4A\xA4C\x5\x146\xA4");
		sb.Append("\x2\xA4B\xA4D\x5\xFA~\x2\xA4C\xA4B\x3\x2\x2\x2\xA4C\xA4D\x3");
		sb.Append("\x2\x2\x2\xA4D\xF9\x3\x2\x2\x2\xA4E\xA50\a\xC0\x2\x2\xA4F\xA4E");
		sb.Append("\x3\x2\x2\x2\xA4F\xA50\x3\x2\x2\x2\xA50\xA51\x3\x2\x2\x2\xA51");
		sb.Append("\xA52\a\x1AC\x2\x2\xA52\xA57\x5\xFE\x80\x2\xA53\xA54\a\x1AE");
		sb.Append("\x2\x2\xA54\xA56\x5\xFE\x80\x2\xA55\xA53\x3\x2\x2\x2\xA56\xA59");
		sb.Append("\x3\x2\x2\x2\xA57\xA55\x3\x2\x2\x2\xA57\xA58\x3\x2\x2\x2\xA58");
		sb.Append("\xA5A\x3\x2\x2\x2\xA59\xA57\x3\x2\x2\x2\xA5A\xA5B\a\x1AD\x2");
		sb.Append("\x2\xA5B\xFB\x3\x2\x2\x2\xA5C\xA5D\a\xC0\x2\x2\xA5D\xA5E\a\x1AC");
		sb.Append("\x2\x2\xA5E\xA63\x5\xFE\x80\x2\xA5F\xA60\a\x1AE\x2\x2\xA60\xA62");
		sb.Append("\x5\xFE\x80\x2\xA61\xA5F\x3\x2\x2\x2\xA62\xA65\x3\x2\x2\x2\xA63");
		sb.Append("\xA61\x3\x2\x2\x2\xA63\xA64\x3\x2\x2\x2\xA64\xA66\x3\x2\x2\x2");
		sb.Append("\xA65\xA63\x3\x2\x2\x2\xA66\xA67\a\x1AD\x2\x2\xA67\xFD\x3\x2");
		sb.Append("\x2\x2\xA68\xA6A\a\x137\x2\x2\xA69\xA68\x3\x2\x2\x2\xA69\xA6A");
		sb.Append("\x3\x2\x2\x2\xA6A\xA91\x3\x2\x2\x2\xA6B\xA6C\aZ\x2\x2\xA6C\xA6D");
		sb.Append("\a\x1AC\x2\x2\xA6D\xA72\x5\x100\x81\x2\xA6E\xA6F\a\x1AE\x2\x2");
		sb.Append("\xA6F\xA71\x5\x100\x81\x2\xA70\xA6E\x3\x2\x2\x2\xA71\xA74\x3");
		sb.Append("\x2\x2\x2\xA72\xA70\x3\x2\x2\x2\xA72\xA73\x3\x2\x2\x2\xA73\xA75");
		sb.Append("\x3\x2\x2\x2\xA74\xA72\x3\x2\x2\x2\xA75\xA76\a\x1AD\x2\x2\xA76");
		sb.Append("\xA92\x3\x2\x2\x2\xA77\xA78\aZ\x2\x2\xA78\xA79\a\x19B\x2\x2");
		sb.Append("\xA79\xA92\x5\x100\x81\x2\xA7A\xA89\aJ\x2\x2\xA7B\xA7C\a\x1AC");
		sb.Append("\x2\x2\xA7C\xA7D\x5\x100\x81\x2\xA7D\xA7E\a\x1AC\x2\x2\xA7E");
		sb.Append("\xA83\a\x196\x2\x2\xA7F\xA80\a\x1AE\x2\x2\xA80\xA82\a\x196\x2");
		sb.Append("\x2\xA81\xA7F\x3\x2\x2\x2\xA82\xA85\x3\x2\x2\x2\xA83\xA81\x3");
		sb.Append("\x2\x2\x2\xA83\xA84\x3\x2\x2\x2\xA84\xA86\x3\x2\x2\x2\xA85\xA83");
		sb.Append("\x3\x2\x2\x2\xA86\xA87\a\x1AD\x2\x2\xA87\xA88\a\x1AD\x2\x2\xA88");
		sb.Append("\xA8A\x3\x2\x2\x2\xA89\xA7B\x3\x2\x2\x2\xA89\xA8A\x3\x2\x2\x2");
		sb.Append("\xA8A\xA92\x3\x2\x2\x2\xA8B\xA92\a\x168\x2\x2\xA8C\xA92\a\x16D");
		sb.Append("\x2\x2\xA8D\xA8E\a\x16E\x2\x2\xA8E\xA8F\a\x19B\x2\x2\xA8F\xA92");
		sb.Append("\a\x195\x2\x2\xA90\xA92\a\x196\x2\x2\xA91\xA6B\x3\x2\x2\x2\xA91");
		sb.Append("\xA77\x3\x2\x2\x2\xA91\xA7A\x3\x2\x2\x2\xA91\xA8B\x3\x2\x2\x2");
		sb.Append("\xA91\xA8C\x3\x2\x2\x2\xA91\xA8D\x3\x2\x2\x2\xA91\xA90\x3\x2");
		sb.Append("\x2\x2\xA91\xA92\x3\x2\x2\x2\xA92\xFF\x3\x2\x2\x2\xA93\xA96");
		sb.Append("\x5\x146\xA4\x2\xA94\xA96\a\x195\x2\x2\xA95\xA93\x3\x2\x2\x2");
		sb.Append("\xA95\xA94\x3\x2\x2\x2\xA96\x101\x3\x2\x2\x2\xA97\xA98\a\x1AC");
		sb.Append("\x2\x2\xA98\xA9D\x5\x104\x83\x2\xA99\xA9A\a\x1AE\x2\x2\xA9A");
		sb.Append("\xA9C\x5\x104\x83\x2\xA9B\xA99\x3\x2\x2\x2\xA9C\xA9F\x3\x2\x2");
		sb.Append("\x2\xA9D\xA9B\x3\x2\x2\x2\xA9D\xA9E\x3\x2\x2\x2\xA9E\xAA0\x3");
		sb.Append("\x2\x2\x2\xA9F\xA9D\x3\x2\x2\x2\xAA0\xAA1\a\x1AD\x2\x2\xAA1");
		sb.Append("\x103\x3\x2\x2\x2\xAA2\xAA5\x5\x146\xA4\x2\xAA3\xAA5\a\x197");
		sb.Append("\x2\x2\xAA4\xAA2\x3\x2\x2\x2\xAA4\xAA3\x3\x2\x2\x2\xAA5\x105");
		sb.Append("\x3\x2\x2\x2\xAA6\xAA7\a\xB9\x2\x2\xAA7\xAA8\a\x1AC\x2\x2\xAA8");
		sb.Append("\xAA9\x5\x108\x85\x2\xAA9\xAB1\a\x1AD\x2\x2\xAAA\xAAB\a\x1AE");
		sb.Append("\x2\x2\xAAB\xAAC\a\x1AC\x2\x2\xAAC\xAAD\x5\x108\x85\x2\xAAD");
		sb.Append("\xAAE\a\x1AD\x2\x2\xAAE\xAB0\x3\x2\x2\x2\xAAF\xAAA\x3\x2\x2");
		sb.Append("\x2\xAB0\xAB3\x3\x2\x2\x2\xAB1\xAAF\x3\x2\x2\x2\xAB1\xAB2\x3");
		sb.Append("\x2\x2\x2\xAB2\x107\x3\x2\x2\x2\xAB3\xAB1\x3\x2\x2\x2\xAB4\xAB9");
		sb.Append("\x5\xACW\x2\xAB5\xAB6\a\x1AE\x2\x2\xAB6\xAB8\x5\xACW\x2\xAB7");
		sb.Append("\xAB5\x3\x2\x2\x2\xAB8\xABB\x3\x2\x2\x2\xAB9\xAB7\x3\x2\x2\x2");
		sb.Append("\xAB9\xABA\x3\x2\x2\x2\xABA\x109\x3\x2\x2\x2\xABB\xAB9\x3\x2");
		sb.Append("\x2\x2\xABC\xABD\t\x30\x2\x2\xABD\xABE\a\x1AC\x2\x2\xABE\xABF");
		sb.Append("\a\x1AD\x2\x2\xABF\xAC7\x5\x110\x89\x2\xAC0\xAC1\a\x13B\x2\x2");
		sb.Append("\xAC1\xAC2\a\x1AC\x2\x2\xAC2\xAC3\x5\xACW\x2\xAC3\xAC4\a\x1AD");
		sb.Append("\x2\x2\xAC4\xAC5\x5\x110\x89\x2\xAC5\xAC7\x3\x2\x2\x2\xAC6\xABC");
		sb.Append("\x3\x2\x2\x2\xAC6\xAC0\x3\x2\x2\x2\xAC7\x10B\x3\x2\x2\x2\xAC8");
		sb.Append("\xAC9\t\x31\x2\x2\xAC9\xACA\a\x1AC\x2\x2\xACA\xACB\x5\x10E\x88");
		sb.Append("\x2\xACB\xACD\a\x1AD\x2\x2\xACC\xACE\x5\x110\x89\x2\xACD\xACC");
		sb.Append("\x3\x2\x2\x2\xACD\xACE\x3\x2\x2\x2\xACE\xAE9\x3\x2\x2\x2\xACF");
		sb.Append("\xAD0\t\x32\x2\x2\xAD0\xAD3\a\x1AC\x2\x2\xAD1\xAD4\a\x1B1\x2");
		sb.Append("\x2\xAD2\xAD4\x5\x10E\x88\x2\xAD3\xAD1\x3\x2\x2\x2\xAD3\xAD2");
		sb.Append("\x3\x2\x2\x2\xAD4\xAD5\x3\x2\x2\x2\xAD5\xAD7\a\x1AD\x2\x2\xAD6");
		sb.Append("\xAD8\x5\x110\x89\x2\xAD7\xAD6\x3\x2\x2\x2\xAD7\xAD8\x3\x2\x2");
		sb.Append("\x2\xAD8\xAE9\x3\x2\x2\x2\xAD9\xADA\a\xDE\x2\x2\xADA\xADB\a");
		sb.Append("\x1AC\x2\x2\xADB\xADC\x5\x10E\x88\x2\xADC\xADD\a\x1AD\x2\x2");
		sb.Append("\xADD\xAE9\x3\x2\x2\x2\xADE\xADF\a\x10E\x2\x2\xADF\xAE0\a\x1AC");
		sb.Append("\x2\x2\xAE0\xAE1\x5\xACW\x2\xAE1\xAE2\a\x1AD\x2\x2\xAE2\xAE9");
		sb.Append("\x3\x2\x2\x2\xAE3\xAE4\a\x10F\x2\x2\xAE4\xAE5\a\x1AC\x2\x2\xAE5");
		sb.Append("\xAE6\x5\x108\x85\x2\xAE6\xAE7\a\x1AD\x2\x2\xAE7\xAE9\x3\x2");
		sb.Append("\x2\x2\xAE8\xAC8\x3\x2\x2\x2\xAE8\xACF\x3\x2\x2\x2\xAE8\xAD9");
		sb.Append("\x3\x2\x2\x2\xAE8\xADE\x3\x2\x2\x2\xAE8\xAE3\x3\x2\x2\x2\xAE9");
		sb.Append("\x10D\x3\x2\x2\x2\xAEA\xAEC\t%\x2\x2\xAEB\xAEA\x3\x2\x2\x2\xAEB");
		sb.Append("\xAEC\x3\x2\x2\x2\xAEC\xAED\x3\x2\x2\x2\xAED\xAEE\x5\xACW\x2");
		sb.Append("\xAEE\x10F\x3\x2\x2\x2\xAEF\xAF0\a}\x2\x2\xAF0\xAF4\a\x1AC\x2");
		sb.Append("\x2\xAF1\xAF2\a\x149\x2\x2\xAF2\xAF3\a\x12\x2\x2\xAF3\xAF5\x5");
		sb.Append("\x108\x85\x2\xAF4\xAF1\x3\x2\x2\x2\xAF4\xAF5\x3\x2\x2\x2\xAF5");
		sb.Append("\xAF7\x3\x2\x2\x2\xAF6\xAF8\x5\xC8\x65\x2\xAF7\xAF6\x3\x2\x2");
		sb.Append("\x2\xAF7\xAF8\x3\x2\x2\x2\xAF8\xAFA\x3\x2\x2\x2\xAF9\xAFB\x5");
		sb.Append("\x112\x8A\x2\xAFA\xAF9\x3\x2\x2\x2\xAFA\xAFB\x3\x2\x2\x2\xAFB");
		sb.Append("\xAFC\x3\x2\x2\x2\xAFC\xAFD\a\x1AD\x2\x2\xAFD\x111\x3\x2\x2");
		sb.Append("\x2\xAFE\xAFF\t\x33\x2\x2\xAFF\xB00\x5\x114\x8B\x2\xB00\x113");
		sb.Append("\x3\x2\x2\x2\xB01\xB08\x5\x118\x8D\x2\xB02\xB03\a\xE\x2\x2\xB03");
		sb.Append("\xB04\x5\x116\x8C\x2\xB04\xB05\a\a\x2\x2\xB05\xB06\x5\x116\x8C");
		sb.Append("\x2\xB06\xB08\x3\x2\x2\x2\xB07\xB01\x3\x2\x2\x2\xB07\xB02\x3");
		sb.Append("\x2\x2\x2\xB08\x115\x3\x2\x2\x2\xB09\xB0C\x5\x118\x8D\x2\xB0A");
		sb.Append("\xB0C\x5\x11A\x8E\x2\xB0B\xB09\x3\x2\x2\x2\xB0B\xB0A\x3\x2\x2");
		sb.Append("\x2\xB0C\x117\x3\x2\x2\x2\xB0D\xB0E\a\x182\x2\x2\xB0E\xB14\a");
		sb.Append("\x14B\x2\x2\xB0F\xB10\a\x195\x2\x2\xB10\xB14\a\x14B\x2\x2\xB11");
		sb.Append("\xB12\a(\x2\x2\xB12\xB14\a\x15E\x2\x2\xB13\xB0D\x3\x2\x2\x2");
		sb.Append("\xB13\xB0F\x3\x2\x2\x2\xB13\xB11\x3\x2\x2\x2\xB14\x119\x3\x2");
		sb.Append("\x2\x2\xB15\xB16\a\x182\x2\x2\xB16\xB1A\a\x106\x2\x2\xB17\xB18");
		sb.Append("\a\x195\x2\x2\xB18\xB1A\a\x106\x2\x2\xB19\xB15\x3\x2\x2\x2\xB19");
		sb.Append("\xB17\x3\x2\x2\x2\xB1A\x11B\x3\x2\x2\x2\xB1B\xB1C\a\x104\x2");
		sb.Append("\x2\xB1C\xB21\x5\x11E\x90\x2\xB1D\xB1E\a\x1AE\x2\x2\xB1E\xB20");
		sb.Append("\x5\x11E\x90\x2\xB1F\xB1D\x3\x2\x2\x2\xB20\xB23\x3\x2\x2\x2");
		sb.Append("\xB21\xB1F\x3\x2\x2\x2\xB21\xB22\x3\x2\x2\x2\xB22\xB3E\x3\x2");
		sb.Append("\x2\x2\xB23\xB21\x3\x2\x2\x2\xB24\xB25\a\xF1\x2\x2\xB25\xB28");
		sb.Append("\a\x19B\x2\x2\xB26\xB29\x5\x146\xA4\x2\xB27\xB29\a\x197\x2\x2");
		sb.Append("\xB28\xB26\x3\x2\x2\x2\xB28\xB27\x3\x2\x2\x2\xB29\xB3E\x3\x2");
		sb.Append("\x2\x2\xB2A\xB2B\a\xF0\x2\x2\xB2B\xB2E\a\x19B\x2\x2\xB2C\xB2F");
		sb.Append("\x5\x146\xA4\x2\xB2D\xB2F\a\x197\x2\x2\xB2E\xB2C\x3\x2\x2\x2");
		sb.Append("\xB2E\xB2D\x3\x2\x2\x2\xB2F\xB3E\x3\x2\x2\x2\xB30\xB31\a\x133");
		sb.Append("\x2\x2\xB31\xB32\a\x19B\x2\x2\xB32\xB3E\t\r\x2\x2\xB33\xB34");
		sb.Append("\a\x17C\x2\x2\xB34\xB35\a\x19B\x2\x2\xB35\xB3E\t\r\x2\x2\xB36");
		sb.Append("\xB37\a\x17F\x2\x2\xB37\xB38\a\x19B\x2\x2\xB38\xB3E\a\x195\x2");
		sb.Append("\x2\xB39\xB3A\a\xEF\x2\x2\xB3A\xB3E\t\r\x2\x2\xB3B\xB3C\a\x17D");
		sb.Append("\x2\x2\xB3C\xB3E\t\r\x2\x2\xB3D\xB1B\x3\x2\x2\x2\xB3D\xB24\x3");
		sb.Append("\x2\x2\x2\xB3D\xB2A\x3\x2\x2\x2\xB3D\xB30\x3\x2\x2\x2\xB3D\xB33");
		sb.Append("\x3\x2\x2\x2\xB3D\xB36\x3\x2\x2\x2\xB3D\xB39\x3\x2\x2\x2\xB3D");
		sb.Append("\xB3B\x3\x2\x2\x2\xB3E\x11D\x3\x2\x2\x2\xB3F\xB46\a\x1AC\x2");
		sb.Append("\x2\xB40\xB41\a\x138\x2\x2\xB41\xB42\a\x19B\x2\x2\xB42\xB47");
		sb.Append("\t\x34\x2\x2\xB43\xB44\a\xF6\x2\x2\xB44\xB45\a\x19B\x2\x2\xB45");
		sb.Append("\xB47\a\x197\x2\x2\xB46\xB40\x3\x2\x2\x2\xB46\xB43\x3\x2\x2");
		sb.Append("\x2\xB47\xB48\x3\x2\x2\x2\xB48\xB49\a\x1AD\x2\x2\xB49\x11F\x3");
		sb.Append("\x2\x2\x2\xB4A\xB4D\x5\x122\x92\x2\xB4B\xB4D\x5\x124\x93\x2");
		sb.Append("\xB4C\xB4A\x3\x2\x2\x2\xB4C\xB4B\x3\x2\x2\x2\xB4D\x121\x3\x2");
		sb.Append("\x2\x2\xB4E\xB4F\a\x102\x2\x2\xB4F\xB52\x5\x146\xA4\x2\xB50");
		sb.Append("\xB51\a\"\x2\x2\xB51\xB53\a\x104\x2\x2\xB52\xB50\x3\x2\x2\x2");
		sb.Append("\xB52\xB53\x3\x2\x2\x2\xB53\xB55\x3\x2\x2\x2\xB54\xB56\a\x32");
		sb.Append("\x2\x2\xB55\xB54\x3\x2\x2\x2\xB55\xB56\x3\x2\x2\x2\xB56\xB59");
		sb.Append("\x3\x2\x2\x2\xB57\xB58\a\"\x2\x2\xB58\xB5A\a\x12B\x2\x2\xB59");
		sb.Append("\xB57\x3\x2\x2\x2\xB59\xB5A\x3\x2\x2\x2\xB5A\xB5B\x3\x2\x2\x2");
		sb.Append("\xB5B\xB60\x5\x124\x93\x2\xB5C\xB5D\a\x1AE\x2\x2\xB5D\xB5F\x5");
		sb.Append("\x124\x93\x2\xB5E\xB5C\x3\x2\x2\x2\xB5F\xB62\x3\x2\x2\x2\xB60");
		sb.Append("\xB5E\x3\x2\x2\x2\xB60\xB61\x3\x2\x2\x2\xB61\x123\x3\x2\x2\x2");
		sb.Append("\xB62\xB60\x3\x2\x2\x2\xB63\xB64\a\x1AC\x2\x2\xB64\xB65\a\x132");
		sb.Append("\x2\x2\xB65\xB68\a\x19B\x2\x2\xB66\xB69\x5\x146\xA4\x2\xB67");
		sb.Append("\xB69\a\x197\x2\x2\xB68\xB66\x3\x2\x2\x2\xB68\xB67\x3\x2\x2");
		sb.Append("\x2\xB69\xB6B\x3\x2\x2\x2\xB6A\xB6C\a\x1AE\x2\x2\xB6B\xB6A\x3");
		sb.Append("\x2\x2\x2\xB6B\xB6C\x3\x2\x2\x2\xB6C\xB6D\x3\x2\x2\x2\xB6D\xB6E");
		sb.Append("\aG\x2\x2\xB6E\xB6F\a\x19B\x2\x2\xB6F\xB71\a\x197\x2\x2\xB70");
		sb.Append("\xB72\a\x1AE\x2\x2\xB71\xB70\x3\x2\x2\x2\xB71\xB72\x3\x2\x2");
		sb.Append("\x2\xB72\xB79\x3\x2\x2\x2\xB73\xB74\a\x16C\x2\x2\xB74\xB75\a");
		sb.Append("\x19B\x2\x2\xB75\xB77\x5\x14E\xA8\x2\xB76\xB78\a\x1AE\x2\x2");
		sb.Append("\xB77\xB76\x3\x2\x2\x2\xB77\xB78\x3\x2\x2\x2\xB78\xB7A\x3\x2");
		sb.Append("\x2\x2\xB79\xB73\x3\x2\x2\x2\xB79\xB7A\x3\x2\x2\x2\xB7A\xB84");
		sb.Append("\x3\x2\x2\x2\xB7B\xB7C\a\x129\x2\x2\xB7C\xB7F\a\x19B\x2\x2\xB7D");
		sb.Append("\xB80\x5\x14E\xA8\x2\xB7E\xB80\a\x185\x2\x2\xB7F\xB7D\x3\x2");
		sb.Append("\x2\x2\xB7F\xB7E\x3\x2\x2\x2\xB80\xB82\x3\x2\x2\x2\xB81\xB83");
		sb.Append("\a\x1AE\x2\x2\xB82\xB81\x3\x2\x2\x2\xB82\xB83\x3\x2\x2\x2\xB83");
		sb.Append("\xB85\x3\x2\x2\x2\xB84\xB7B\x3\x2\x2\x2\xB84\xB85\x3\x2\x2\x2");
		sb.Append("\xB85\xB8C\x3\x2\x2\x2\xB86\xB87\a\x103\x2\x2\xB87\xB88\a\x19B");
		sb.Append("\x2\x2\xB88\xB8A\x5\x14E\xA8\x2\xB89\xB8B\a\x1AE\x2\x2\xB8A");
		sb.Append("\xB89\x3\x2\x2\x2\xB8A\xB8B\x3\x2\x2\x2\xB8B\xB8D\x3\x2\x2\x2");
		sb.Append("\xB8C\xB86\x3\x2\x2\x2\xB8C\xB8D\x3\x2\x2\x2\xB8D\xB8E\x3\x2");
		sb.Append("\x2\x2\xB8E\xB8F\a\x1AD\x2\x2\xB8F\x125\x3\x2\x2\x2\xB90\xB91");
		sb.Append("\x5\x146\xA4\x2\xB91\xB92\a\x1A7\x2\x2\xB92\xB93\x5\x146\xA4");
		sb.Append("\x2\xB93\xB94\a\x1A7\x2\x2\xB94\xB95\x5\x146\xA4\x2\xB95\xB96");
		sb.Append("\a\x1A7\x2\x2\xB96\xBA2\x3\x2\x2\x2\xB97\xB98\x5\x146\xA4\x2");
		sb.Append("\xB98\xB9A\a\x1A7\x2\x2\xB99\xB9B\x5\x146\xA4\x2\xB9A\xB99\x3");
		sb.Append("\x2\x2\x2\xB9A\xB9B\x3\x2\x2\x2\xB9B\xB9C\x3\x2\x2\x2\xB9C\xB9D");
		sb.Append("\a\x1A7\x2\x2\xB9D\xBA2\x3\x2\x2\x2\xB9E\xB9F\x5\x146\xA4\x2");
		sb.Append("\xB9F\xBA0\a\x1A7\x2\x2\xBA0\xBA2\x3\x2\x2\x2\xBA1\xB90\x3\x2");
		sb.Append("\x2\x2\xBA1\xB97\x3\x2\x2\x2\xBA1\xB9E\x3\x2\x2\x2\xBA1\xBA2");
		sb.Append("\x3\x2\x2\x2\xBA2\xBA3\x3\x2\x2\x2\xBA3\xBA4\x5\x146\xA4\x2");
		sb.Append("\xBA4\x127\x3\x2\x2\x2\xBA5\xBA6\x5\x146\xA4\x2\xBA6\xBA8\a");
		sb.Append("\x1A7\x2\x2\xBA7\xBA9\x5\x146\xA4\x2\xBA8\xBA7\x3\x2\x2\x2\xBA8");
		sb.Append("\xBA9\x3\x2\x2\x2\xBA9\xBAA\x3\x2\x2\x2\xBAA\xBAB\a\x1A7\x2");
		sb.Append("\x2\xBAB\xBB0\x3\x2\x2\x2\xBAC\xBAD\x5\x146\xA4\x2\xBAD\xBAE");
		sb.Append("\a\x1A7\x2\x2\xBAE\xBB0\x3\x2\x2\x2\xBAF\xBA5\x3\x2\x2\x2\xBAF");
		sb.Append("\xBAC\x3\x2\x2\x2\xBAF\xBB0\x3\x2\x2\x2\xBB0\xBB1\x3\x2\x2\x2");
		sb.Append("\xBB1\xBB2\x5\x146\xA4\x2\xBB2\x129\x3\x2\x2\x2\xBB3\xBB4\x5");
		sb.Append("\x146\xA4\x2\xBB4\xBB5\a\x1A7\x2\x2\xBB5\xBB7\x3\x2\x2\x2\xBB6");
		sb.Append("\xBB3\x3\x2\x2\x2\xBB6\xBB7\x3\x2\x2\x2\xBB7\xBB8\x3\x2\x2\x2");
		sb.Append("\xBB8\xBB9\x5\x146\xA4\x2\xBB9\x12B\x3\x2\x2\x2\xBBA\xBBB\x5");
		sb.Append("\x146\xA4\x2\xBBB\xBBD\a\x1A7\x2\x2\xBBC\xBBE\x5\x146\xA4\x2");
		sb.Append("\xBBD\xBBC\x3\x2\x2\x2\xBBD\xBBE\x3\x2\x2\x2\xBBE\xBBF\x3\x2");
		sb.Append("\x2\x2\xBBF\xBC0\a\x1A7\x2\x2\xBC0\xBC5\x3\x2\x2\x2\xBC1\xBC2");
		sb.Append("\x5\x146\xA4\x2\xBC2\xBC3\a\x1A7\x2\x2\xBC3\xBC5\x3\x2\x2\x2");
		sb.Append("\xBC4\xBBA\x3\x2\x2\x2\xBC4\xBC1\x3\x2\x2\x2\xBC4\xBC5\x3\x2");
		sb.Append("\x2\x2\xBC5\xBC6\x3\x2\x2\x2\xBC6\xBC7\x5\x146\xA4\x2\xBC7\x12D");
		sb.Append("\x3\x2\x2\x2\xBC8\xBCB\x5\x126\x94\x2\xBC9\xBCB\a\x194\x2\x2");
		sb.Append("\xBCA\xBC8\x3\x2\x2\x2\xBCA\xBC9\x3\x2\x2\x2\xBCB\x12F\x3\x2");
		sb.Append("\x2\x2\xBCC\xBCD\x5\x128\x95\x2\xBCD\xBCE\a\x1A7\x2\x2\xBCE");
		sb.Append("\xBD0\x3\x2\x2\x2\xBCF\xBCC\x3\x2\x2\x2\xBCF\xBD0\x3\x2\x2\x2");
		sb.Append("\xBD0\xBD1\x3\x2\x2\x2\xBD1\xBD2\x5\x146\xA4\x2\xBD2\x131\x3");
		sb.Append("\x2\x2\x2\xBD3\xBD8\x5\x146\xA4\x2\xBD4\xBD5\a\x1AE\x2\x2\xBD5");
		sb.Append("\xBD7\x5\x146\xA4\x2\xBD6\xBD4\x3\x2\x2\x2\xBD7\xBDA\x3\x2\x2");
		sb.Append("\x2\xBD8\xBD6\x3\x2\x2\x2\xBD8\xBD9\x3\x2\x2\x2\xBD9\x133\x3");
		sb.Append("\x2\x2\x2\xBDA\xBD8\x3\x2\x2\x2\xBDB\xBDE\x5\x146\xA4\x2\xBDC");
		sb.Append("\xBDE\a\x194\x2\x2\xBDD\xBDB\x3\x2\x2\x2\xBDD\xBDC\x3\x2\x2");
		sb.Append("\x2\xBDE\x135\x3\x2\x2\x2\xBDF\xBE0\t\r\x2\x2\xBE0\x137\x3\x2");
		sb.Append("\x2\x2\xBE1\xBE2\t\x35\x2\x2\xBE2\x139\x3\x2\x2\x2\xBE3\xBE5");
		sb.Append("\am\x2\x2\xBE4\xBE3\x3\x2\x2\x2\xBE4\xBE5\x3\x2\x2\x2\xBE5\xBE6");
		sb.Append("\x3\x2\x2\x2\xBE6\xBE7\an\x2\x2\xBE7\x13B\x3\x2\x2\x2\xBE8\xBEE");
		sb.Append("\x5\x12C\x97\x2\xBE9\xBEE\a\x93\x2\x2\xBEA\xBEE\a\x63\x2\x2");
		sb.Append("\xBEB\xBEE\a\xD6\x2\x2\xBEC\xBEE\a\xDD\x2\x2\xBED\xBE8\x3\x2");
		sb.Append("\x2\x2\xBED\xBE9\x3\x2\x2\x2\xBED\xBEA\x3\x2\x2\x2\xBED\xBEB");
		sb.Append("\x3\x2\x2\x2\xBED\xBEC\x3\x2\x2\x2\xBEE\x13D\x3\x2\x2\x2\xBEF");
		sb.Append("\xBF1\x5\x146\xA4\x2\xBF0\xBF2\aU\x2\x2\xBF1\xBF0\x3\x2\x2\x2");
		sb.Append("\xBF1\xBF2\x3\x2\x2\x2\xBF2\xBFA\x3\x2\x2\x2\xBF3\xBF4\a\x1AC");
		sb.Append("\x2\x2\xBF4\xBF7\t\x36\x2\x2\xBF5\xBF6\a\x1AE\x2\x2\xBF6\xBF8");
		sb.Append("\a\x195\x2\x2\xBF7\xBF5\x3\x2\x2\x2\xBF7\xBF8\x3\x2\x2\x2\xBF8");
		sb.Append("\xBF9\x3\x2\x2\x2\xBF9\xBFB\a\x1AD\x2\x2\xBFA\xBF3\x3\x2\x2");
		sb.Append("\x2\xBFA\xBFB\x3\x2\x2\x2\xBFB\x13F\x3\x2\x2\x2\xBFC\xBFF\a");
		sb.Append("n\x2\x2\xBFD\xBFF\x5\x142\xA2\x2\xBFE\xBFC\x3\x2\x2\x2\xBFE");
		sb.Append("\xBFD\x3\x2\x2\x2\xBFF\x141\x3\x2\x2\x2\xC00\xC10\a\x197\x2");
		sb.Append("\x2\xC01\xC10\a\x198\x2\x2\xC02\xC04\x5\x144\xA3\x2\xC03\xC02");
		sb.Append("\x3\x2\x2\x2\xC03\xC04\x3\x2\x2\x2\xC04\xC05\x3\x2\x2\x2\xC05");
		sb.Append("\xC10\a\x195\x2\x2\xC06\xC08\x5\x144\xA3\x2\xC07\xC06\x3\x2");
		sb.Append("\x2\x2\xC07\xC08\x3\x2\x2\x2\xC08\xC09\x3\x2\x2\x2\xC09\xC10");
		sb.Append("\t\x37\x2\x2\xC0A\xC0C\x5\x144\xA3\x2\xC0B\xC0A\x3\x2\x2\x2");
		sb.Append("\xC0B\xC0C\x3\x2\x2\x2\xC0C\xC0D\x3\x2\x2\x2\xC0D\xC0E\a\x1AB");
		sb.Append("\x2\x2\xC0E\xC10\t\x38\x2\x2\xC0F\xC00\x3\x2\x2\x2\xC0F\xC01");
		sb.Append("\x3\x2\x2\x2\xC0F\xC03\x3\x2\x2\x2\xC0F\xC07\x3\x2\x2\x2\xC0F");
		sb.Append("\xC0B\x3\x2\x2\x2\xC10\x143\x3\x2\x2\x2\xC11\xC12\t!\x2\x2\xC12");
		sb.Append("\x145\x3\x2\x2\x2\xC13\xC17\x5\x148\xA5\x2\xC14\xC17\a\x192");
		sb.Append("\x2\x2\xC15\xC17\a\x193\x2\x2\xC16\xC13\x3\x2\x2\x2\xC16\xC14");
		sb.Append("\x3\x2\x2\x2\xC16\xC15\x3\x2\x2\x2\xC17\x147\x3\x2\x2\x2\xC18");
		sb.Append("\xC19\t\x39\x2\x2\xC19\x149\x3\x2\x2\x2\xC1A\xC2A\a\x19B\x2");
		sb.Append("\x2\xC1B\xC2A\a\x19C\x2\x2\xC1C\xC2A\a\x19D\x2\x2\xC1D\xC1E");
		sb.Append("\a\x19D\x2\x2\xC1E\xC2A\a\x19B\x2\x2\xC1F\xC20\a\x19C\x2\x2");
		sb.Append("\xC20\xC2A\a\x19B\x2\x2\xC21\xC22\a\x19D\x2\x2\xC22\xC2A\a\x19C");
		sb.Append("\x2\x2\xC23\xC24\a\x19E\x2\x2\xC24\xC2A\a\x19B\x2\x2\xC25\xC26");
		sb.Append("\a\x19E\x2\x2\xC26\xC2A\a\x19C\x2\x2\xC27\xC28\a\x19E\x2\x2");
		sb.Append("\xC28\xC2A\a\x19D\x2\x2\xC29\xC1A\x3\x2\x2\x2\xC29\xC1B\x3\x2");
		sb.Append("\x2\x2\xC29\xC1C\x3\x2\x2\x2\xC29\xC1D\x3\x2\x2\x2\xC29\xC1F");
		sb.Append("\x3\x2\x2\x2\xC29\xC21\x3\x2\x2\x2\xC29\xC23\x3\x2\x2\x2\xC29");
		sb.Append("\xC25\x3\x2\x2\x2\xC29\xC27\x3\x2\x2\x2\xC2A\x14B\x3\x2\x2\x2");
		sb.Append("\xC2B\xC2C\t:\x2\x2\xC2C\x14D\x3\x2\x2\x2\xC2D\xC2F\a\x195\x2");
		sb.Append("\x2\xC2E\xC30\t;\x2\x2\xC2F\xC2E\x3\x2\x2\x2\xC2F\xC30\x3\x2");
		sb.Append("\x2\x2\xC30\x14F\x3\x2\x2\x2\x1CD\x153\x15A\x15E\x162\x168\x16E");
		sb.Append("\x17F\x183\x186\x18A\x18E\x192\x197\x19C\x1A3\x1A6\x1AA\x1AD");
		sb.Append("\x1B5\x1B8\x1BD\x1C0\x1C5\x1CA\x1CD\x1D2\x1D8\x1DF\x1E3\x1E5");
		sb.Append("\x1EA\x1F7\x1FC\x1FE\x207\x20A\x212\x214\x217\x21B\x21E\x222");
		sb.Append("\x229\x22D\x22F\x231\x234\x237\x23A\x240\x243\x24B\x24D\x250");
		sb.Append("\x254\x257\x25D\x260\x264\x267\x26A\x271\x274\x278\x27B\x27E");
		sb.Append("\x281\x284\x28C\x28E\x292\x295\x29D\x2A1\x2A5\x2AC\x2B0\x2B2");
		sb.Append("\x2B4\x2B7\x2BA\x2BD\x2C5\x2CB\x2D1\x2D3\x2D7\x2DA\x2DD\x2E2");
		sb.Append("\x2E7\x2EA\x2F2\x2F6\x2FD\x300\x309\x30C\x310\x318\x31B\x31F");
		sb.Append("\x322\x32B\x32F\x333\x336\x33D\x340\x347\x34B\x34D\x355\x358");
		sb.Append("\x35C\x365\x368\x36C\x370\x373\x378\x388\x38C\x392\x394\x397");
		sb.Append("\x39F\x3A5\x3AA\x3AD\x3B6\x3BE\x3C1\x3C8\x3CB\x3F0\x3F3\x3F9");
		sb.Append("\x405\x407\x40A\x422\x42D\x435\x440\x445\x448\x450\x45A\x474");
		sb.Append("\x47A\x485\x493\x49B\x4A2\x4B9\x4C6\x4CC\x4D1\x4D4\x4DA\x4DE");
		sb.Append("\x4E5\x4EE\x4F2\x4F8\x4FF\x503\x510\x516\x527\x52B\x533\x537");
		sb.Append("\x53F\x543\x545\x549\x54D\x551\x555\x55B\x55F\x561\x566\x56E");
		sb.Append("\x571\x574\x57D\x582\x587\x58A\x58C\x590\x594\x597\x59B\x5A1");
		sb.Append("\x5A6\x5AD\x5AF\x5B3\x5BA\x5BE\x5C1\x5CA\x5CD\x5CF\x5D8\x5E3");
		sb.Append("\x5E7\x5E9\x5EB\x5F1\x5F6\x5FD\x60A\x60C\x60E\x611\x614\x61B");
		sb.Append("\x61E\x624\x629\x62B\x62E\x634\x63C\x63E\x641\x645\x648\x64E");
		sb.Append("\x651\x655\x658\x65E\x661\x663\x667\x66C\x674\x679\x682\x687");
		sb.Append("\x68C\x692\x696\x699\x69D\x6A3\x6AB\x6B0\x6B2\x6B5\x6BA\x6BF");
		sb.Append("\x6C2\x6C7\x6CA\x6CD\x6D3\x6D9\x6DD\x6E2\x6E5\x6EA\x6EE\x6F2");
		sb.Append("\x6F8\x6FE\x707\x711\x71B\x71D\x71F\x722\x725\x730\x732\x734");
		sb.Append("\x737\x73A\x73D\x740\x743\x746\x752\x755\x758\x761\x764\x767");
		sb.Append("\x76E\x771\x77F\x782\x789\x794\x798\x7A5\x7A9\x7B1\x7B5\x7C7");
		sb.Append("\x7D6\x7D8\x7E3\x7EA\x7F1\x7F9\x802\x806\x810\x817\x81F\x827");
		sb.Append("\x82B\x841\x84A\x850\x856\x85C\x867\x86E\x873\x878\x87C\x885");
		sb.Append("\x887\x88B\x890\x894\x896\x89B\x89F\x8A3\x8AC\x8AF\x8B3\x8BC");
		sb.Append("\x8C8\x8CA\x8D2\x8DA\x8DD\x8DF\x8E6\x8EA\x8F5\x917\x927\x92D");
		sb.Append("\x934\x93A\x93F\x947\x94A\x94C\x953\x95B\x961\x966\x96A\x96F");
		sb.Append("\x971\x978\x97C\x983\x985\x987\x992\x996\x998\x99B\x9AB\x9AF");
		sb.Append("\x9C3\x9C7\x9CB\x9D6\x9DD\x9F3\xA27\xA2B\xA39\xA46\xA4C\xA4F");
		sb.Append("\xA57\xA63\xA69\xA72\xA83\xA89\xA91\xA95\xA9D\xAA4\xAB1\xAB9");
		sb.Append("\xAC6\xACD\xAD3\xAD7\xAE8\xAEB\xAF4\xAF7\xAFA\xB07\xB0B\xB13");
		sb.Append("\xB19\xB21\xB28\xB2E\xB3D\xB46\xB4C\xB52\xB55\xB59\xB60\xB68");
		sb.Append("\xB6B\xB71\xB77\xB79\xB7F\xB82\xB84\xB8A\xB8C\xB9A\xBA1\xBA8");
		sb.Append("\xBAF\xBB6\xBBD\xBC4\xBCA\xBCF\xBD8\xBDD\xBE4\xBED\xBF1\xBF7");
		sb.Append("\xBFA\xBFE\xC03\xC07\xC0B\xC0F\xC16\xC29\xC2F");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
